
Command Parser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08008070  08008070  00018070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800852c  0800852c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008534  08008534  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008534  08008534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008538  08008538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800853c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001dc  08008718  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08008718  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e369  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002102  00000000  00000000  0002e575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00030678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfce  00000000  00000000  00031bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7c5  00000000  00000000  0004fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8431  00000000  00000000  0005d353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d74  00000000  00000000  001157d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008058 	.word	0x08008058

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08008058 	.word	0x08008058

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <Init_Command_Parser>:
static bool Process_Command(SerialBuffer_t *SerialBuffer);
static void Clear_Buffer(SerialBuffer_t *SerialBuffer);

/*			Functions			*/
void Init_Command_Parser (SerialBuffer_t *SerialBuffer)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	Clear_Buffer(SerialBuffer);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f8d9 	bl	80010dc <Clear_Buffer>

	// Clear the command map
	for (int mapIndex = 0; mapIndex < MAX_NUM_COMMANDS; ++mapIndex)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e00d      	b.n	8000f4c <Init_Command_Parser+0x30>
	{
		g_cmdMap[mapIndex].cmdName = NULL;
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <Init_Command_Parser+0x44>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2100      	movs	r1, #0
 8000f36:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		g_cmdMap[mapIndex].funcPtr = NULL;
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <Init_Command_Parser+0x44>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
	for (int mapIndex = 0; mapIndex < MAX_NUM_COMMANDS; ++mapIndex)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b09      	cmp	r3, #9
 8000f50:	ddee      	ble.n	8000f30 <Init_Command_Parser+0x14>
	}
	// Clear the command counter
	g_numCmds = 0;
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <Init_Command_Parser+0x48>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001f8 	.word	0x200001f8
 8000f64:	20000248 	.word	0x20000248

08000f68 <Add_Command>:

void Add_Command (char* CmdName, void *FuncPtr)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	g_cmdMap[g_numCmds].cmdName = CmdName;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <Add_Command+0x3c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <Add_Command+0x40>)
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	g_cmdMap[g_numCmds].funcPtr = FuncPtr;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <Add_Command+0x3c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <Add_Command+0x40>)
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	605a      	str	r2, [r3, #4]
	++g_numCmds;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <Add_Command+0x3c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <Add_Command+0x3c>)
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000248 	.word	0x20000248
 8000fa8:	200001f8 	.word	0x200001f8

08000fac <Read_Buffer>:

void Read_Buffer (SerialBuffer_t *SerialBuffer)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	bool commandReady = false;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	bool commandFound = false;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73bb      	strb	r3, [r7, #14]

	int bufIndex = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
	for (bufIndex = 0; bufIndex < SERIAL_BUFFER_LENGTH; ++bufIndex)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	e01f      	b.n	8001006 <Read_Buffer+0x5a>
	{
		if (('\n' == SerialBuffer->charBuf[bufIndex]) || ('\r' == SerialBuffer->charBuf[bufIndex]))
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b0a      	cmp	r3, #10
 8000fd0:	d005      	beq.n	8000fde <Read_Buffer+0x32>
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b0d      	cmp	r3, #13
 8000fdc:	d110      	bne.n	8001000 <Read_Buffer+0x54>
		{
			SerialBuffer->charBuf[bufIndex] = '\0';
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
			SerialBuffer->tail = bufIndex;
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			commandReady = true;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
			commandFound = Process_Command(SerialBuffer);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f819 	bl	800102c <Process_Command>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73bb      	strb	r3, [r7, #14]
			break;
 8000ffe:	e005      	b.n	800100c <Read_Buffer+0x60>
	for (bufIndex = 0; bufIndex < SERIAL_BUFFER_LENGTH; ++bufIndex)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	3301      	adds	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b7f      	cmp	r3, #127	; 0x7f
 800100a:	dddc      	ble.n	8000fc6 <Read_Buffer+0x1a>
		}
	}

	if (true == commandReady)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d008      	beq.n	8001024 <Read_Buffer+0x78>
	{
		if (false == commandFound)
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <Read_Buffer+0x78>
		{
			// Handle invalid command here
			Clear_Buffer(SerialBuffer);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f85c 	bl	80010dc <Clear_Buffer>
		}
	}
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <Process_Command>:

static bool Process_Command (SerialBuffer_t *SerialBuffer)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	; 0x40
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	bool commandFound = false;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    char* token = strtok(SerialBuffer->charBuf, " ");
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4924      	ldr	r1, [pc, #144]	; (80010d0 <Process_Command+0xa4>)
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fe76 	bl	8005d30 <strtok>
 8001044:	63b8      	str	r0, [r7, #56]	; 0x38
    char* args[MAX_NUM_ARGS];
    uint32_t argCount = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34

    while ((NULL != token) && (MAX_NUM_ARGS > argCount))
 800104a:	e00d      	b.n	8001068 <Process_Command+0x3c>
    {
        args[argCount++] = token;
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	637a      	str	r2, [r7, #52]	; 0x34
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	3340      	adds	r3, #64	; 0x40
 8001056:	443b      	add	r3, r7
 8001058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800105a:	f843 2c38 	str.w	r2, [r3, #-56]
        token = strtok(NULL, " ");
 800105e:	491c      	ldr	r1, [pc, #112]	; (80010d0 <Process_Command+0xa4>)
 8001060:	2000      	movs	r0, #0
 8001062:	f004 fe65 	bl	8005d30 <strtok>
 8001066:	63b8      	str	r0, [r7, #56]	; 0x38
    while ((NULL != token) && (MAX_NUM_ARGS > argCount))
 8001068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <Process_Command+0x48>
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	2b09      	cmp	r3, #9
 8001072:	d9eb      	bls.n	800104c <Process_Command+0x20>
    }

    // map the command string to a command enum using the command_map array
    for (int cmdIndex = 0; cmdIndex < g_numCmds; ++cmdIndex)
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
 8001078:	e01c      	b.n	80010b4 <Process_Command+0x88>
    {
        if (0 == strcmp(args[0], g_cmdMap[cmdIndex].cmdName))
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4915      	ldr	r1, [pc, #84]	; (80010d4 <Process_Command+0xa8>)
 800107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001080:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff f8ca 	bl	8000220 <strcmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10d      	bne.n	80010ae <Process_Command+0x82>
        {
            // call the appropriate function with the parsed arguments
            g_cmdMap[cmdIndex].funcPtr(&args[1]);
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <Process_Command+0xa8>)
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f107 0208 	add.w	r2, r7, #8
 80010a0:	3204      	adds	r2, #4
 80010a2:	4610      	mov	r0, r2
 80010a4:	4798      	blx	r3
            commandFound = true;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80010ac:	e007      	b.n	80010be <Process_Command+0x92>
    for (int cmdIndex = 0; cmdIndex < g_numCmds; ++cmdIndex)
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	3301      	adds	r3, #1
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
 80010b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <Process_Command+0xac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d3dd      	bcc.n	800107a <Process_Command+0x4e>
        }
    }

    Clear_Buffer(SerialBuffer);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f80c 	bl	80010dc <Clear_Buffer>
    return (commandFound);
 80010c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3740      	adds	r7, #64	; 0x40
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08008070 	.word	0x08008070
 80010d4:	200001f8 	.word	0x200001f8
 80010d8:	20000248 	.word	0x20000248

080010dc <Clear_Buffer>:

static void Clear_Buffer (SerialBuffer_t *SerialBuffer)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	// Set the buffer to the NULL termination
	for (int bufIndex = 0; bufIndex < SERIAL_BUFFER_LENGTH; ++bufIndex)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e007      	b.n	80010fa <Clear_Buffer+0x1e>
	{
		SerialBuffer->charBuf[bufIndex] = '\0';
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	for (int bufIndex = 0; bufIndex < SERIAL_BUFFER_LENGTH; ++bufIndex)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b7f      	cmp	r3, #127	; 0x7f
 80010fe:	ddf4      	ble.n	80010ea <Clear_Buffer+0xe>
	}
	// Set the buffer head and tail to zero
	SerialBuffer->tail = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fc3b 	bl	8001992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f852 	bl	80011c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Init_Command_Parser(&g_serialRxBuf);
 8001120:	481f      	ldr	r0, [pc, #124]	; (80011a0 <main+0x8c>)
 8001122:	f7ff fefb 	bl	8000f1c <Init_Command_Parser>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 f917 	bl	8001358 <MX_GPIO_Init>
  MX_DMA_Init();
 800112a:	f000 f8e3 	bl	80012f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800112e:	f000 f895 	bl	800125c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Testing the on-board LED with arguments
  Add_Command("LED", &cmd_Set_LED);
 8001132:	491c      	ldr	r1, [pc, #112]	; (80011a4 <main+0x90>)
 8001134:	481c      	ldr	r0, [pc, #112]	; (80011a8 <main+0x94>)
 8001136:	f7ff ff17 	bl	8000f68 <Add_Command>

  strcpy(g_serialRxBuf.charBuf, "LED ON\n");
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0x8c>)
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <main+0x98>)
 800113e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001142:	e883 0003 	stmia.w	r3, {r0, r1}
  Read_Buffer(&g_serialRxBuf);
 8001146:	4816      	ldr	r0, [pc, #88]	; (80011a0 <main+0x8c>)
 8001148:	f7ff ff30 	bl	8000fac <Read_Buffer>

  HAL_Delay(1000);
 800114c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001150:	f000 fc90 	bl	8001a74 <HAL_Delay>

  strcpy(g_serialRxBuf.charBuf, "LED OFF\n");
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <main+0x8c>)
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <main+0x9c>)
 8001158:	ca07      	ldmia	r2, {r0, r1, r2}
 800115a:	c303      	stmia	r3!, {r0, r1}
 800115c:	701a      	strb	r2, [r3, #0]
  Read_Buffer(&g_serialRxBuf);
 800115e:	4810      	ldr	r0, [pc, #64]	; (80011a0 <main+0x8c>)
 8001160:	f7ff ff24 	bl	8000fac <Read_Buffer>

  // Testing changing the value of a uint32
  Add_Command("UINT", &cmd_Set_Uint_Value);
 8001164:	4913      	ldr	r1, [pc, #76]	; (80011b4 <main+0xa0>)
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <main+0xa4>)
 8001168:	f7ff fefe 	bl	8000f68 <Add_Command>

  strcpy(g_serialRxBuf.charBuf, "UINT 5327\n");
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <main+0x8c>)
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <main+0xa8>)
 8001170:	ca07      	ldmia	r2, {r0, r1, r2}
 8001172:	c303      	stmia	r3!, {r0, r1}
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	3302      	adds	r3, #2
 8001178:	0c12      	lsrs	r2, r2, #16
 800117a:	701a      	strb	r2, [r3, #0]
  Read_Buffer(&g_serialRxBuf);
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <main+0x8c>)
 800117e:	f7ff ff15 	bl	8000fac <Read_Buffer>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&g_serialRxBuf.charBuf[g_serialRxBuf.tail], 1);
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <main+0x8c>)
 8001184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <main+0x8c>)
 800118a:	4413      	add	r3, r2
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <main+0xac>)
 8001192:	f002 f9cd 	bl	8003530 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_Buffer(&g_serialRxBuf);
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <main+0x8c>)
 8001198:	f7ff ff08 	bl	8000fac <Read_Buffer>
 800119c:	e7fb      	b.n	8001196 <main+0x82>
 800119e:	bf00      	nop
 80011a0:	2000039c 	.word	0x2000039c
 80011a4:	080013fd 	.word	0x080013fd
 80011a8:	08008074 	.word	0x08008074
 80011ac:	08008078 	.word	0x08008078
 80011b0:	08008080 	.word	0x08008080
 80011b4:	08001481 	.word	0x08001481
 80011b8:	0800808c 	.word	0x0800808c
 80011bc:	08008094 	.word	0x08008094
 80011c0:	2000024c 	.word	0x2000024c

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 f93a 	bl	800544c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f001 f98a 	bl	8002500 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	2302      	movs	r3, #2
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001202:	2304      	movs	r3, #4
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001206:	2355      	movs	r3, #85	; 0x55
 8001208:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120a:	2302      	movs	r3, #2
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fa14 	bl	8002648 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001226:	f000 f987 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2303      	movs	r3, #3
 8001230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2104      	movs	r1, #4
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fd18 	bl	8002c78 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800124e:	f000 f973 	bl	8001538 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_USART2_UART_Init+0x90>)
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <MX_USART2_UART_Init+0x94>)
 8001264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_USART2_UART_Init+0x90>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <MX_USART2_UART_Init+0x90>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_USART2_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_USART2_UART_Init+0x90>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_USART2_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_USART2_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USART2_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_USART2_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <MX_USART2_UART_Init+0x90>)
 80012a6:	f002 f8f3 	bl	8003490 <HAL_UART_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012b0:	f000 f942 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b4:	2100      	movs	r1, #0
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_USART2_UART_Init+0x90>)
 80012b8:	f003 ffcf 	bl	800525a <HAL_UARTEx_SetTxFifoThreshold>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012c2:	f000 f939 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <MX_USART2_UART_Init+0x90>)
 80012ca:	f004 f804 	bl	80052d6 <HAL_UARTEx_SetRxFifoThreshold>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012d4:	f000 f930 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_USART2_UART_Init+0x90>)
 80012da:	f003 ff85 	bl	80051e8 <HAL_UARTEx_DisableFifoMode>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012e4:	f000 f928 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000024c 	.word	0x2000024c
 80012f0:	40004400 	.word	0x40004400

080012f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_DMA_Init+0x60>)
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <MX_DMA_Init+0x60>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6493      	str	r3, [r2, #72]	; 0x48
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_DMA_Init+0x60>)
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_DMA_Init+0x60>)
 8001314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <MX_DMA_Init+0x60>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6493      	str	r3, [r2, #72]	; 0x48
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_DMA_Init+0x60>)
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	200b      	movs	r0, #11
 8001330:	f000 fc9d 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001334:	200b      	movs	r0, #11
 8001336:	f000 fcb4 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	200c      	movs	r0, #12
 8001340:	f000 fc95 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001344:	200c      	movs	r0, #12
 8001346:	f000 fcac 	bl	8001ca2 <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_GPIO_Init+0x78>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <MX_GPIO_Init+0x78>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_GPIO_Init+0x78>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_GPIO_Init+0x78>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <MX_GPIO_Init+0x78>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_GPIO_Init+0x78>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0x7c>)
 80013a6:	f001 f893 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0x7c>)
 80013c4:	f000 ff02 	bl	80021cc <HAL_GPIO_Init>

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000400 	.word	0x48000400

080013d8 <Set_LED>:

/* USER CODE BEGIN 4 */
void Set_LED(GPIO_PinState State)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, State);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <Set_LED+0x20>)
 80013ec:	f001 f870 	bl	80024d0 <HAL_GPIO_WritePin>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	48000400 	.word	0x48000400

080013fc <cmd_Set_LED>:

void cmd_Set_LED(char** Args)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	bool validCommand = false;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state = GPIO_PIN_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	73bb      	strb	r3, [r7, #14]

	if (0 == strcmp(Args[0], "ON"))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4911      	ldr	r1, [pc, #68]	; (8001458 <cmd_Set_LED+0x5c>)
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe ff04 	bl	8000220 <strcmp>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d104      	bne.n	8001428 <cmd_Set_LED+0x2c>
	{
		state = GPIO_PIN_SET;
 800141e:	2301      	movs	r3, #1
 8001420:	73bb      	strb	r3, [r7, #14]
		validCommand = true;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00c      	b.n	8001442 <cmd_Set_LED+0x46>
	}
	else if (0 == strcmp(Args[0], "OFF"))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	490b      	ldr	r1, [pc, #44]	; (800145c <cmd_Set_LED+0x60>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe fef6 	bl	8000220 <strcmp>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <cmd_Set_LED+0x46>
	{
		state = GPIO_PIN_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	73bb      	strb	r3, [r7, #14]
		validCommand = true;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
	}

	if (true == validCommand)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <cmd_Set_LED+0x54>
	{
		Set_LED(state);
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ffc4 	bl	80013d8 <Set_LED>
	}
	else
	{
		// Handle the invalid argument here
	}
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	080080a0 	.word	0x080080a0
 800145c:	080080a4 	.word	0x080080a4

08001460 <Set_Uint_Value>:

void Set_Uint_Value(uint32_t Value)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	g_uintValue = Value;
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <Set_Uint_Value+0x1c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000420 	.word	0x20000420

08001480 <cmd_Set_Uint_Value>:

void cmd_Set_Uint_Value(char** Args)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	bool validCommand = false;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
	uint32_t value = atoi(Args[0]);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 ffad 	bl	80053f0 <atoi>
 8001496:	4603      	mov	r3, r0
 8001498:	60bb      	str	r3, [r7, #8]

	if (0 == strcmp(Args[0], "0"))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <cmd_Set_Uint_Value+0x54>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe febd 	bl	8000220 <strcmp>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d104      	bne.n	80014b6 <cmd_Set_Uint_Value+0x36>
	{
		value = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
		validCommand = true;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e004      	b.n	80014c0 <cmd_Set_Uint_Value+0x40>
	}
	else if (1 <= value)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <cmd_Set_Uint_Value+0x40>
	{
		validCommand = true;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
	}

	if (true == validCommand)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <cmd_Set_Uint_Value+0x4c>
	{
		Set_Uint_Value(value);
 80014c6:	68b8      	ldr	r0, [r7, #8]
 80014c8:	f7ff ffca 	bl	8001460 <Set_Uint_Value>
	}
	else
	{
		// Handle the invalid argument here
	}
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	080080a8 	.word	0x080080a8

080014d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	if (&huart2.pRxBuffPtr[0] != (uint8_t*)&g_serialRxBuf.charBuf[(g_serialRxBuf.tail + 1)])
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_UART_RxCpltCallback+0x58>)
 80014e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 80014e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ea:	3301      	adds	r3, #1
 80014ec:	4911      	ldr	r1, [pc, #68]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 80014ee:	440b      	add	r3, r1
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d008      	beq.n	8001506 <HAL_UART_RxCpltCallback+0x2e>
	{
		g_serialRxBuf.charBuf[g_serialRxBuf.tail] = *(huart2.pRxBuffPtr - 1);
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_UART_RxCpltCallback+0x58>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 80014fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001500:	7811      	ldrb	r1, [r2, #0]
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 8001504:	54d1      	strb	r1, [r2, r3]
	}

	++g_serialRxBuf.tail;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 8001508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800150c:	3301      	adds	r3, #1
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 8001510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&g_serialRxBuf.charBuf[g_serialRxBuf.tail], 1);
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 8001516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_UART_RxCpltCallback+0x5c>)
 800151c:	4413      	add	r3, r2
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <HAL_UART_RxCpltCallback+0x58>)
 8001524:	f002 f804 	bl	8003530 <HAL_UART_Receive_IT>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000024c 	.word	0x2000024c
 8001534:	2000039c 	.word	0x2000039c

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_MspInit+0x44>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_MspInit+0x44>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_MspInit+0x44>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x44>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x44>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x44>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b09a      	sub	sp, #104	; 0x68
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2244      	movs	r2, #68	; 0x44
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 ff4d 	bl	800544c <memset>
  if(huart->Instance==USART2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a4c      	ldr	r2, [pc, #304]	; (80016e8 <HAL_UART_MspInit+0x15c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	f040 8091 	bne.w	80016e0 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015be:	2302      	movs	r3, #2
 80015c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fd70 	bl	80030b0 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015d6:	f7ff ffaf 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <HAL_UART_MspInit+0x160>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a43      	ldr	r2, [pc, #268]	; (80016ec <HAL_UART_MspInit+0x160>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_UART_MspInit+0x160>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_UART_MspInit+0x160>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a3d      	ldr	r2, [pc, #244]	; (80016ec <HAL_UART_MspInit+0x160>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_UART_MspInit+0x160>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f000 fdd0 	bl	80021cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_UART_MspInit+0x164>)
 800162e:	4a31      	ldr	r2, [pc, #196]	; (80016f4 <HAL_UART_MspInit+0x168>)
 8001630:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_UART_MspInit+0x164>)
 8001634:	221a      	movs	r2, #26
 8001636:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_UART_MspInit+0x164>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_UART_MspInit+0x164>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_UART_MspInit+0x164>)
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_UART_MspInit+0x164>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_UART_MspInit+0x164>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_UART_MspInit+0x164>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_UART_MspInit+0x164>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001662:	4823      	ldr	r0, [pc, #140]	; (80016f0 <HAL_UART_MspInit+0x164>)
 8001664:	f000 fb38 	bl	8001cd8 <HAL_DMA_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800166e:	f7ff ff63 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_UART_MspInit+0x164>)
 8001676:	67da      	str	r2, [r3, #124]	; 0x7c
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_UART_MspInit+0x164>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_UART_MspInit+0x170>)
 8001682:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 8001686:	221b      	movs	r2, #27
 8001688:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 800168c:	2210      	movs	r2, #16
 800168e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 80016b6:	f000 fb0f 	bl	8001cd8 <HAL_DMA_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80016c0:	f7ff ff3a 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 80016c8:	679a      	str	r2, [r3, #120]	; 0x78
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <HAL_UART_MspInit+0x16c>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2026      	movs	r0, #38	; 0x26
 80016d6:	f000 faca 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016da:	2026      	movs	r0, #38	; 0x26
 80016dc:	f000 fae1 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3768      	adds	r7, #104	; 0x68
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40021000 	.word	0x40021000
 80016f0:	200002dc 	.word	0x200002dc
 80016f4:	40020008 	.word	0x40020008
 80016f8:	2000033c 	.word	0x2000033c
 80016fc:	4002001c 	.word	0x4002001c

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f974 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <DMA1_Channel1_IRQHandler+0x10>)
 800175a:	f000 fc25 	bl	8001fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200002dc 	.word	0x200002dc

08001768 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Channel2_IRQHandler+0x10>)
 800176e:	f000 fc1b 	bl	8001fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000033c 	.word	0x2000033c

0800177c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <USART2_IRQHandler+0x10>)
 8001782:	f001 ff2b 	bl	80035dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000024c 	.word	0x2000024c

08001790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_kill>:

int _kill(int pid, int sig)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017aa:	f003 fe25 	bl	80053f8 <__errno>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2216      	movs	r2, #22
 80017b2:	601a      	str	r2, [r3, #0]
	return -1;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_exit>:

void _exit (int status)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffe7 	bl	80017a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d2:	e7fe      	b.n	80017d2 <_exit+0x12>

080017d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00a      	b.n	80017fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	4601      	mov	r1, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf0      	blt.n	80017e6 <_read+0x12>
	}

return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e009      	b.n	8001834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf1      	blt.n	8001820 <_write+0x12>
	}
	return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_close>:

int _close(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186e:	605a      	str	r2, [r3, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_isatty>:

int _isatty(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	return 1;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f003 fd8a 	bl	80053f8 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20008000 	.word	0x20008000
 8001910:	00000400 	.word	0x00000400
 8001914:	20000424 	.word	0x20000424
 8001918:	20000440 	.word	0x20000440

0800191c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001942:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 8001946:	490e      	ldr	r1, [pc, #56]	; (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 800195c:	4c0b      	ldr	r4, [pc, #44]	; (800198c <LoopForever+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800196a:	f7ff ffd7 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f003 fd49 	bl	8005404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001972:	f7ff fbcf 	bl	8001114 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   r0, =_estack
 8001978:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001984:	0800853c 	.word	0x0800853c
  ldr r2, =_sbss
 8001988:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800198c:	2000043c 	.word	0x2000043c

08001990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_2_IRQHandler>

08001992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f95b 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f80e 	bl	80019c4 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	e001      	b.n	80019b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b4:	f7ff fdc6 	bl	8001544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b8:	79fb      	ldrb	r3, [r7, #7]

}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_InitTick+0x68>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d022      	beq.n	8001a1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_InitTick+0x6c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_InitTick+0x68>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f966 	bl	8001cbe <HAL_SYSTICK_Config>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10f      	bne.n	8001a18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	d809      	bhi.n	8001a12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fe:	2200      	movs	r2, #0
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	f000 f932 	bl	8001c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_InitTick+0x70>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e007      	b.n	8001a22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	e004      	b.n	8001a22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x1c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_IncTick+0x20>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_IncTick+0x1c>)
 8001a48:	6013      	str	r3, [r2, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000428 	.word	0x20000428
 8001a58:	20000008 	.word	0x20000008

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000428 	.word	0x20000428

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d004      	beq.n	8001a98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_Delay+0x40>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a98:	bf00      	nop
 8001a9a:	f7ff ffdf 	bl	8001a5c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d8f7      	bhi.n	8001a9a <HAL_Delay+0x26>
  {
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	; (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff29 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff40 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff90 	bl	8001bac <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5f 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff33 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa4 	bl	8001c14 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e08d      	b.n	8001e06 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_DMA_Init+0x138>)
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d80f      	bhi.n	8001d16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <HAL_DMA_Init+0x13c>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a45      	ldr	r2, [pc, #276]	; (8001e18 <HAL_DMA_Init+0x140>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	009a      	lsls	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a42      	ldr	r2, [pc, #264]	; (8001e1c <HAL_DMA_Init+0x144>)
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
 8001d14:	e00e      	b.n	8001d34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_DMA_Init+0x148>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <HAL_DMA_Init+0x140>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	009a      	lsls	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a3c      	ldr	r2, [pc, #240]	; (8001e24 <HAL_DMA_Init+0x14c>)
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f9be 	bl	8002108 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d94:	d102      	bne.n	8001d9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001db0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d010      	beq.n	8001ddc <HAL_DMA_Init+0x104>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d80c      	bhi.n	8001ddc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f9de 	bl	8002184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	e008      	b.n	8001dee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40020407 	.word	0x40020407
 8001e14:	bffdfff8 	.word	0xbffdfff8
 8001e18:	cccccccd 	.word	0xcccccccd
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	bffdfbf8 	.word	0xbffdfbf8
 8001e24:	40020400 	.word	0x40020400

08001e28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d005      	beq.n	8001e4c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2204      	movs	r2, #4
 8001e44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e037      	b.n	8001ebc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020e 	bic.w	r2, r2, #14
 8001e5a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e98:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00c      	beq.n	8001ebc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001eba:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e047      	b.n	8001f9e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 020e 	bic.w	r2, r2, #14
 8001f1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 021f 	and.w	r2, r3, #31
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
    }
  }
  return status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2204      	movs	r2, #4
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d026      	beq.n	8002022 <HAL_DMA_IRQHandler+0x7a>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d021      	beq.n	8002022 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	2104      	movs	r1, #4
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d071      	beq.n	80020fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002020:	e06c      	b.n	80020fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2202      	movs	r2, #2
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d02e      	beq.n	8002094 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d029      	beq.n	8002094 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10b      	bne.n	8002066 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 020a 	bic.w	r2, r2, #10
 800205c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2102      	movs	r1, #2
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d038      	beq.n	80020fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002092:	e033      	b.n	80020fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2208      	movs	r2, #8
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d02a      	beq.n	80020fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d025      	beq.n	80020fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 020e 	bic.w	r2, r2, #14
 80020c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f003 021f 	and.w	r2, r3, #31
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
}
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002118:	429a      	cmp	r2, r3
 800211a:	d802      	bhi.n	8002122 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e001      	b.n	8002126 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002124:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3b08      	subs	r3, #8
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	461a      	mov	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002152:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2201      	movs	r2, #1
 800215c:	409a      	lsls	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40020407 	.word	0x40020407
 8002174:	40020800 	.word	0x40020800
 8002178:	40020820 	.word	0x40020820
 800217c:	cccccccd 	.word	0xcccccccd
 8002180:	40020880 	.word	0x40020880

08002184 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2201      	movs	r2, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	1000823f 	.word	0x1000823f
 80021c8:	40020940 	.word	0x40020940

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021da:	e15a      	b.n	8002492 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 814c 	beq.w	800248c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	6939      	ldr	r1, [r7, #16]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a6 	beq.w	800248c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <HAL_GPIO_Init+0x2e4>)
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	4a5a      	ldr	r2, [pc, #360]	; (80024b0 <HAL_GPIO_Init+0x2e4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6613      	str	r3, [r2, #96]	; 0x60
 800234c:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <HAL_GPIO_Init+0x2e4>)
 800234e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002358:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <HAL_GPIO_Init+0x2e8>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002382:	d01f      	beq.n	80023c4 <HAL_GPIO_Init+0x1f8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a4c      	ldr	r2, [pc, #304]	; (80024b8 <HAL_GPIO_Init+0x2ec>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d019      	beq.n	80023c0 <HAL_GPIO_Init+0x1f4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a4b      	ldr	r2, [pc, #300]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_GPIO_Init+0x1f0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_GPIO_Init+0x2f4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00d      	beq.n	80023b8 <HAL_GPIO_Init+0x1ec>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a49      	ldr	r2, [pc, #292]	; (80024c4 <HAL_GPIO_Init+0x2f8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <HAL_GPIO_Init+0x1e8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <HAL_GPIO_Init+0x2fc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_GPIO_Init+0x1e4>
 80023ac:	2305      	movs	r3, #5
 80023ae:	e00a      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023b0:	2306      	movs	r3, #6
 80023b2:	e008      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e006      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023b8:	2303      	movs	r3, #3
 80023ba:	e004      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023bc:	2302      	movs	r3, #2
 80023be:	e002      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023c4:	2300      	movs	r3, #0
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	f002 0203 	and.w	r2, r2, #3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4093      	lsls	r3, r2
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d6:	4937      	ldr	r1, [pc, #220]	; (80024b4 <HAL_GPIO_Init+0x2e8>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_GPIO_Init+0x300>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002408:	4a30      	ldr	r2, [pc, #192]	; (80024cc <HAL_GPIO_Init+0x300>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800240e:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_GPIO_Init+0x300>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002432:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_GPIO_Init+0x300>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_GPIO_Init+0x300>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <HAL_GPIO_Init+0x300>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_GPIO_Init+0x300>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_GPIO_Init+0x300>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f ae9d 	bne.w	80021dc <HAL_GPIO_Init+0x10>
  }
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	48000400 	.word	0x48000400
 80024bc:	48000800 	.word	0x48000800
 80024c0:	48000c00 	.word	0x48000c00
 80024c4:	48001000 	.word	0x48001000
 80024c8:	48001400 	.word	0x48001400
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d141      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800250e:	4b4b      	ldr	r3, [pc, #300]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251a:	d131      	bne.n	8002580 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002522:	4a46      	ldr	r2, [pc, #280]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800252c:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002534:	4a41      	ldr	r2, [pc, #260]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800253c:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2232      	movs	r2, #50	; 0x32
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002552:	e002      	b.n	800255a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b01      	subs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002566:	d102      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f2      	bne.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d158      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e057      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002580:	4b2e      	ldr	r3, [pc, #184]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002586:	4a2d      	ldr	r2, [pc, #180]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800258c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002590:	e04d      	b.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d141      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800259a:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d131      	bne.n	800260c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ae:	4a23      	ldr	r2, [pc, #140]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c0:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2232      	movs	r2, #50	; 0x32
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025de:	e002      	b.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	d102      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f2      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002606:	d112      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e011      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800261c:	e007      	b.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40007000 	.word	0x40007000
 8002640:	20000000 	.word	0x20000000
 8002644:	431bde83 	.word	0x431bde83

08002648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e306      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d075      	beq.n	8002752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002666:	4b97      	ldr	r3, [pc, #604]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002670:	4b94      	ldr	r3, [pc, #592]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	d102      	bne.n	8002686 <HAL_RCC_OscConfig+0x3e>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d002      	beq.n	800268c <HAL_RCC_OscConfig+0x44>
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d10b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	4b8d      	ldr	r3, [pc, #564]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05b      	beq.n	8002750 <HAL_RCC_OscConfig+0x108>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d157      	bne.n	8002750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e2e1      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x74>
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a84      	ldr	r2, [pc, #528]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b7f      	ldr	r3, [pc, #508]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7e      	ldr	r2, [pc, #504]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b7c      	ldr	r3, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7b      	ldr	r2, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026e0:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a77      	ldr	r2, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a74      	ldr	r2, [pc, #464]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff f9ac 	bl	8001a5c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff f9a8 	bl	8001a5c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e2a6      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xc0>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff f998 	bl	8001a5c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff f994 	bl	8001a5c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e292      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002742:	4b60      	ldr	r3, [pc, #384]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0xe8>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d075      	beq.n	800284a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275e:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002768:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d102      	bne.n	800277e <HAL_RCC_OscConfig+0x136>
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d002      	beq.n	8002784 <HAL_RCC_OscConfig+0x13c>
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d11f      	bne.n	80027c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_OscConfig+0x154>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e265      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4946      	ldr	r1, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027b0:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f905 	bl	80019c4 <HAL_InitTick>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d043      	beq.n	8002848 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e251      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a3c      	ldr	r2, [pc, #240]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff f940 	bl	8001a5c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff f93c 	bl	8001a5c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e23a      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	492d      	ldr	r1, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
 8002812:	e01a      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800281a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7ff f91c 	bl	8001a5c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f918 	bl	8001a5c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e216      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x1e0>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d041      	beq.n	80028da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01c      	beq.n	8002898 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002864:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f8f5 	bl	8001a5c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7ff f8f1 	bl	8001a5c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1ef      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800288a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ef      	beq.n	8002876 <HAL_RCC_OscConfig+0x22e>
 8002896:	e020      	b.n	80028da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_OscConfig+0x27c>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7ff f8d8 	bl	8001a5c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ae:	e00d      	b.n	80028cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7ff f8d4 	bl	8001a5c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d906      	bls.n	80028cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1d2      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ea      	bne.n	80028b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80a6 	beq.w	8002a34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ec:	4b84      	ldr	r3, [pc, #528]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_OscConfig+0x2b4>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x2b6>
 80028fc:	2300      	movs	r3, #0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b7f      	ldr	r3, [pc, #508]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a7e      	ldr	r2, [pc, #504]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
 800290e:	4b7c      	ldr	r3, [pc, #496]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291e:	4b79      	ldr	r3, [pc, #484]	; (8002b04 <HAL_RCC_OscConfig+0x4bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292a:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0x4bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a75      	ldr	r2, [pc, #468]	; (8002b04 <HAL_RCC_OscConfig+0x4bc>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7ff f891 	bl	8001a5c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7ff f88d 	bl	8001a5c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e18b      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002950:	4b6c      	ldr	r3, [pc, #432]	; (8002b04 <HAL_RCC_OscConfig+0x4bc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d108      	bne.n	8002976 <HAL_RCC_OscConfig+0x32e>
 8002964:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002974:	e024      	b.n	80029c0 <HAL_RCC_OscConfig+0x378>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d110      	bne.n	80029a0 <HAL_RCC_OscConfig+0x358>
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a5a      	ldr	r2, [pc, #360]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299e:	e00f      	b.n	80029c0 <HAL_RCC_OscConfig+0x378>
 80029a0:	4b57      	ldr	r3, [pc, #348]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d016      	beq.n	80029f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7ff f848 	bl	8001a5c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7ff f844 	bl	8001a5c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e140      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ed      	beq.n	80029d0 <HAL_RCC_OscConfig+0x388>
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7ff f831 	bl	8001a5c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7ff f82d 	bl	8001a5c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e129      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a14:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ed      	bne.n	80029fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d03c      	beq.n	8002aba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7ff f800 	bl	8001a5c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a60:	f7fe fffc 	bl	8001a5c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0fa      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ef      	beq.n	8002a60 <HAL_RCC_OscConfig+0x418>
 8002a80:	e01b      	b.n	8002aba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a88:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a92:	f7fe ffe3 	bl	8001a5c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a9a:	f7fe ffdf 	bl	8001a5c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0dd      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1ef      	bne.n	8002a9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80d1 	beq.w	8002c66 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	f000 808b 	beq.w	8002be8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d15e      	bne.n	8002b98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_RCC_OscConfig+0x4b8>)
 8002ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe ffb9 	bl	8001a5c <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aec:	e00c      	b.n	8002b08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe ffb5 	bl	8001a5c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d905      	bls.n	8002b08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0b3      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ec      	bne.n	8002aee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b14:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_RCC_OscConfig+0x62c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6a11      	ldr	r1, [r2, #32]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b24:	3a01      	subs	r2, #1
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b2e:	0212      	lsls	r2, r2, #8
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0552      	lsls	r2, r2, #21
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b42:	0852      	lsrs	r2, r2, #1
 8002b44:	3a01      	subs	r2, #1
 8002b46:	0652      	lsls	r2, r2, #25
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b4e:	06d2      	lsls	r2, r2, #27
 8002b50:	430a      	orrs	r2, r1
 8002b52:	4947      	ldr	r1, [pc, #284]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b58:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a44      	ldr	r2, [pc, #272]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a41      	ldr	r2, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe ff74 	bl	8001a5c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe ff70 	bl	8001a5c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e06e      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x530>
 8002b96:	e066      	b.n	8002c66 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a34      	ldr	r2, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a2e      	ldr	r2, [pc, #184]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002bb6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ff4c 	bl	8001a5c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe ff48 	bl	8001a5c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e046      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x580>
 8002be6:	e03e      	b.n	8002c66 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e039      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_RCC_OscConfig+0x628>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0203 	and.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d12c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	3b01      	subs	r3, #1
 8002c14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d123      	bne.n	8002c62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11b      	bne.n	8002c62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d113      	bne.n	8002c62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	3b01      	subs	r3, #1
 8002c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d109      	bne.n	8002c62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	019f800c 	.word	0x019f800c

08002c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e11e      	b.n	8002ece <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b91      	ldr	r3, [pc, #580]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d910      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b8e      	ldr	r3, [pc, #568]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 020f 	bic.w	r2, r3, #15
 8002ca6:	498c      	ldr	r1, [pc, #560]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b8a      	ldr	r3, [pc, #552]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e106      	b.n	8002ece <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d073      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d129      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd4:	4b81      	ldr	r3, [pc, #516]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0f4      	b.n	8002ece <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ce4:	f000 f99e 	bl	8003024 <RCC_GetSysClockFreqFromPLLSource>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4a7c      	ldr	r2, [pc, #496]	; (8002ee0 <HAL_RCC_ClockConfig+0x268>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d93f      	bls.n	8002d72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cf2:	4b7a      	ldr	r3, [pc, #488]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d033      	beq.n	8002d72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12f      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d12:	4b72      	ldr	r3, [pc, #456]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1a:	4a70      	ldr	r2, [pc, #448]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e024      	b.n	8002d72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d30:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0c6      	b.n	8002ece <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0be      	b.n	8002ece <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d50:	f000 f8ce 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4a61      	ldr	r2, [pc, #388]	; (8002ee0 <HAL_RCC_ClockConfig+0x268>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d909      	bls.n	8002d72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d66:	4a5d      	ldr	r2, [pc, #372]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4957      	ldr	r1, [pc, #348]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe fe6a 	bl	8001a5c <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe fe66 	bl	8001a5c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e095      	b.n	8002ece <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d023      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dcc:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a42      	ldr	r2, [pc, #264]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002dd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002de4:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002dec:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4936      	ldr	r1, [pc, #216]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4a32      	ldr	r2, [pc, #200]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d21d      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 020f 	bic.w	r2, r3, #15
 8002e30:	4929      	ldr	r1, [pc, #164]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e38:	f7fe fe10 	bl	8001a5c <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe fe0c 	bl	8001a5c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e03b      	b.n	8002ece <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1ed      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4917      	ldr	r1, [pc, #92]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	490f      	ldr	r1, [pc, #60]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea2:	f000 f825 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <HAL_RCC_ClockConfig+0x26c>)
 8002eb4:	5ccb      	ldrb	r3, [r1, r3]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_RCC_ClockConfig+0x270>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x274>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fd7c 	bl	80019c4 <HAL_InitTick>
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	04c4b400 	.word	0x04c4b400
 8002ee4:	080080ac 	.word	0x080080ac
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d102      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e047      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f14:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e03e      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d136      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f4e:	68d2      	ldr	r2, [r2, #12]
 8002f50:	0a12      	lsrs	r2, r2, #8
 8002f52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
      break;
 8002f5c:	e00c      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	0a12      	lsrs	r2, r2, #8
 8002f6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
      break;
 8002f76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0e5b      	lsrs	r3, r3, #25
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e001      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f98:	693b      	ldr	r3, [r7, #16]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000000 	.word	0x20000000

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	080080bc 	.word	0x080080bc

08002ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ffc:	f7ff ffda 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0adb      	lsrs	r3, r3, #11
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	080080bc 	.word	0x080080bc

08003024 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d10c      	bne.n	8003062 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003048:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003052:	68d2      	ldr	r2, [r2, #12]
 8003054:	0a12      	lsrs	r2, r2, #8
 8003056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	617b      	str	r3, [r7, #20]
    break;
 8003060:	e00c      	b.n	800307c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	0a12      	lsrs	r2, r2, #8
 8003070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    break;
 800307a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0e5b      	lsrs	r3, r3, #25
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003096:	687b      	ldr	r3, [r7, #4]
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40021000 	.word	0x40021000
 80030a8:	007a1200 	.word	0x007a1200
 80030ac:	00f42400 	.word	0x00f42400

080030b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b8:	2300      	movs	r3, #0
 80030ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030bc:	2300      	movs	r3, #0
 80030be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8098 	beq.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ce:	2300      	movs	r3, #0
 80030d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d2:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10d      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	4a3f      	ldr	r2, [pc, #252]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6593      	str	r3, [r2, #88]	; 0x58
 80030ea:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fa:	4b3a      	ldr	r3, [pc, #232]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a39      	ldr	r2, [pc, #228]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003106:	f7fe fca9 	bl	8001a5c <HAL_GetTick>
 800310a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800310c:	e009      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fe fca5 	bl	8001a5c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d902      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	74fb      	strb	r3, [r7, #19]
        break;
 8003120:	e005      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ef      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d159      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01e      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d019      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe fc65 	bl	8001a5c <HAL_GetTick>
 8003192:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003194:	e00b      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fc61 	bl	8001a5c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d902      	bls.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	74fb      	strb	r3, [r7, #19]
            break;
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ec      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	4903      	ldr	r1, [pc, #12]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031d8:	e008      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	74bb      	strb	r3, [r7, #18]
 80031de:	e005      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ec:	7c7b      	ldrb	r3, [r7, #17]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d105      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f2:	4ba6      	ldr	r3, [pc, #664]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4aa5      	ldr	r2, [pc, #660]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320a:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	f023 0203 	bic.w	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	499c      	ldr	r1, [pc, #624]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800322c:	4b97      	ldr	r3, [pc, #604]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f023 020c 	bic.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4994      	ldr	r1, [pc, #592]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800324e:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	498b      	ldr	r1, [pc, #556]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003270:	4b86      	ldr	r3, [pc, #536]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	4983      	ldr	r1, [pc, #524]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003292:	4b7e      	ldr	r3, [pc, #504]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	497a      	ldr	r1, [pc, #488]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	4972      	ldr	r1, [pc, #456]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4969      	ldr	r1, [pc, #420]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032f8:	4b64      	ldr	r3, [pc, #400]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4961      	ldr	r1, [pc, #388]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800331a:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	4958      	ldr	r1, [pc, #352]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d015      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	4950      	ldr	r1, [pc, #320]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335a:	d105      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a4a      	ldr	r2, [pc, #296]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003366:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003374:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	4942      	ldr	r1, [pc, #264]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d105      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003394:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a3c      	ldr	r2, [pc, #240]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033ac:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4934      	ldr	r1, [pc, #208]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ca:	d105      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a2e      	ldr	r2, [pc, #184]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	4926      	ldr	r1, [pc, #152]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003402:	d105      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003404:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	4918      	ldr	r1, [pc, #96]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a12      	ldr	r2, [pc, #72]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003446:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	490a      	ldr	r1, [pc, #40]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003472:	d105      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003480:	7cbb      	ldrb	r3, [r7, #18]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000

08003490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e042      	b.n	8003528 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fe f869 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2224      	movs	r2, #36	; 0x24
 80034be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fbba 	bl	8003c4c <UART_SetConfig>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e022      	b.n	8003528 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fe7a 	bl	80041e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800350e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 ff01 	bl	8004328 <UART_CheckIdleState>
 8003526:	4603      	mov	r3, r0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	2b20      	cmp	r3, #32
 8003546:	d142      	bne.n	80035ce <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_UART_Receive_IT+0x24>
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e03b      	b.n	80035d0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_UART_Receive_IT+0x36>
 8003562:	2302      	movs	r3, #2
 8003564:	e034      	b.n	80035d0 <HAL_UART_Receive_IT+0xa0>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_UART_Receive_IT+0xa8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d018      	beq.n	80035be <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	613b      	str	r3, [r7, #16]
   return(result);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	69f9      	ldr	r1, [r7, #28]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e6      	bne.n	800358c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	461a      	mov	r2, r3
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 ffc3 	bl	8004550 <UART_Start_Receive_IT>
 80035ca:	4603      	mov	r3, r0
 80035cc:	e000      	b.n	80035d0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40008000 	.word	0x40008000

080035dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b0ba      	sub	sp, #232	; 0xe8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003602:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003606:	f640 030f 	movw	r3, #2063	; 0x80f
 800360a:	4013      	ands	r3, r2
 800360c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11b      	bne.n	8003650 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 82d6 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
      }
      return;
 800364e:	e2d0      	b.n	8003bf2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 811f 	beq.w	8003898 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800365a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_UART_IRQHandler+0x2b0>)
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003666:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_UART_IRQHandler+0x2b4>)
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8112 	beq.w	8003898 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d011      	beq.n	80036a4 <HAL_UART_IRQHandler+0xc8>
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00b      	beq.n	80036a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d011      	beq.n	80036d4 <HAL_UART_IRQHandler+0xf8>
 80036b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2202      	movs	r2, #2
 80036c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ca:	f043 0204 	orr.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d011      	beq.n	8003704 <HAL_UART_IRQHandler+0x128>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2204      	movs	r2, #4
 80036f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d017      	beq.n	8003740 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800371c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003720:	4b5a      	ldr	r3, [pc, #360]	; (800388c <HAL_UART_IRQHandler+0x2b0>)
 8003722:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003736:	f043 0208 	orr.w	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	2b00      	cmp	r3, #0
 800374a:	d012      	beq.n	8003772 <HAL_UART_IRQHandler+0x196>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00c      	beq.n	8003772 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 823c 	beq.w	8003bf6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d013      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800378a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04f      	beq.n	8003876 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 ffe4 	bl	80047a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d141      	bne.n	800386e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003816:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800381a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800382e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1d9      	bne.n	80037ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d013      	beq.n	8003866 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003842:	4a14      	ldr	r2, [pc, #80]	; (8003894 <HAL_UART_IRQHandler+0x2b8>)
 8003844:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fb45 	bl	8001eda <HAL_DMA_Abort_IT>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003860:	4610      	mov	r0, r2
 8003862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	e00f      	b.n	8003886 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9da 	bl	8003c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	e00b      	b.n	8003886 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9d6 	bl	8003c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	e007      	b.n	8003886 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9d2 	bl	8003c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003884:	e1b7      	b.n	8003bf6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	bf00      	nop
    return;
 8003888:	e1b5      	b.n	8003bf6 <HAL_UART_IRQHandler+0x61a>
 800388a:	bf00      	nop
 800388c:	10000001 	.word	0x10000001
 8003890:	04000120 	.word	0x04000120
 8003894:	08004871 	.word	0x08004871

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389c:	2b01      	cmp	r3, #1
 800389e:	f040 814a 	bne.w	8003b36 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8143 	beq.w	8003b36 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 813c 	beq.w	8003b36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2210      	movs	r2, #16
 80038c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	f040 80b5 	bne.w	8003a40 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8187 	beq.w	8003bfa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f6:	429a      	cmp	r2, r3
 80038f8:	f080 817f 	bcs.w	8003bfa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 8086 	bne.w	8003a24 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800392c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003946:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800394e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800395a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1da      	bne.n	8003918 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003986:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800398a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800398e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e1      	bne.n	8003962 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e3      	bne.n	800399e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a06:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e4      	bne.n	80039e4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fa02 	bl	8001e28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8fb 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a3e:	e0dc      	b.n	8003bfa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80ce 	beq.w	8003bfe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80c9 	beq.w	8003bfe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e4      	bne.n	8003a6c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aca:	633a      	str	r2, [r7, #48]	; 0x30
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e1      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0310 	bic.w	r3, r3, #16
 8003b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	617b      	str	r3, [r7, #20]
   return(result);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e4      	bne.n	8003af2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f880 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b34:	e063      	b.n	8003bfe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <HAL_UART_IRQHandler+0x584>
 8003b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 fb27 	bl	80051ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b5e:	e051      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d014      	beq.n	8003b96 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d03a      	beq.n	8003c02 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
    }
    return;
 8003b94:	e035      	b.n	8003c02 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x5da>
 8003ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fe74 	bl	800489c <UART_EndTransmit_IT>
    return;
 8003bb4:	e026      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5fa>
 8003bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 fb00 	bl	80051d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bd4:	e016      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_UART_IRQHandler+0x628>
 8003be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	da0c      	bge.n	8003c04 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 fae8 	bl	80051c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bf0:	e008      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
      return;
 8003bf2:	bf00      	nop
 8003bf4:	e006      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
    return;
 8003bf6:	bf00      	nop
 8003bf8:	e004      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
      return;
 8003bfa:	bf00      	nop
 8003bfc:	e002      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
      return;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <HAL_UART_IRQHandler+0x628>
    return;
 8003c02:	bf00      	nop
  }
}
 8003c04:	37e8      	adds	r7, #232	; 0xe8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop

08003c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b08c      	sub	sp, #48	; 0x30
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4bab      	ldr	r3, [pc, #684]	; (8003f28 <UART_SetConfig+0x2dc>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4aa0      	ldr	r2, [pc, #640]	; (8003f2c <UART_SetConfig+0x2e0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003cc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	f023 010f 	bic.w	r1, r3, #15
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a91      	ldr	r2, [pc, #580]	; (8003f30 <UART_SetConfig+0x2e4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d125      	bne.n	8003d3c <UART_SetConfig+0xf0>
 8003cf0:	4b90      	ldr	r3, [pc, #576]	; (8003f34 <UART_SetConfig+0x2e8>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d81a      	bhi.n	8003d34 <UART_SetConfig+0xe8>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0xb8>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d25 	.word	0x08003d25
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d2d 	.word	0x08003d2d
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e0d6      	b.n	8003eca <UART_SetConfig+0x27e>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d22:	e0d2      	b.n	8003eca <UART_SetConfig+0x27e>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	e0ce      	b.n	8003eca <UART_SetConfig+0x27e>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d32:	e0ca      	b.n	8003eca <UART_SetConfig+0x27e>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3a:	e0c6      	b.n	8003eca <UART_SetConfig+0x27e>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7d      	ldr	r2, [pc, #500]	; (8003f38 <UART_SetConfig+0x2ec>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d138      	bne.n	8003db8 <UART_SetConfig+0x16c>
 8003d46:	4b7b      	ldr	r3, [pc, #492]	; (8003f34 <UART_SetConfig+0x2e8>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d82d      	bhi.n	8003db0 <UART_SetConfig+0x164>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x110>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003db1 	.word	0x08003db1
 8003d64:	08003db1 	.word	0x08003db1
 8003d68:	08003db1 	.word	0x08003db1
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003db1 	.word	0x08003db1
 8003d78:	08003db1 	.word	0x08003db1
 8003d7c:	08003d99 	.word	0x08003d99
 8003d80:	08003db1 	.word	0x08003db1
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003da9 	.word	0x08003da9
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d96:	e098      	b.n	8003eca <UART_SetConfig+0x27e>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	e094      	b.n	8003eca <UART_SetConfig+0x27e>
 8003da0:	2304      	movs	r3, #4
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e090      	b.n	8003eca <UART_SetConfig+0x27e>
 8003da8:	2308      	movs	r3, #8
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e08c      	b.n	8003eca <UART_SetConfig+0x27e>
 8003db0:	2310      	movs	r3, #16
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e088      	b.n	8003eca <UART_SetConfig+0x27e>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5f      	ldr	r2, [pc, #380]	; (8003f3c <UART_SetConfig+0x2f0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d125      	bne.n	8003e0e <UART_SetConfig+0x1c2>
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	; (8003f34 <UART_SetConfig+0x2e8>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d016      	beq.n	8003dfe <UART_SetConfig+0x1b2>
 8003dd0:	2b30      	cmp	r3, #48	; 0x30
 8003dd2:	d818      	bhi.n	8003e06 <UART_SetConfig+0x1ba>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d00a      	beq.n	8003dee <UART_SetConfig+0x1a2>
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d814      	bhi.n	8003e06 <UART_SetConfig+0x1ba>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <UART_SetConfig+0x19a>
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d008      	beq.n	8003df6 <UART_SetConfig+0x1aa>
 8003de4:	e00f      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003de6:	2300      	movs	r3, #0
 8003de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dec:	e06d      	b.n	8003eca <UART_SetConfig+0x27e>
 8003dee:	2302      	movs	r3, #2
 8003df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df4:	e069      	b.n	8003eca <UART_SetConfig+0x27e>
 8003df6:	2304      	movs	r3, #4
 8003df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfc:	e065      	b.n	8003eca <UART_SetConfig+0x27e>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e04:	e061      	b.n	8003eca <UART_SetConfig+0x27e>
 8003e06:	2310      	movs	r3, #16
 8003e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0c:	e05d      	b.n	8003eca <UART_SetConfig+0x27e>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <UART_SetConfig+0x2f4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d125      	bne.n	8003e64 <UART_SetConfig+0x218>
 8003e18:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <UART_SetConfig+0x2e8>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e22:	2bc0      	cmp	r3, #192	; 0xc0
 8003e24:	d016      	beq.n	8003e54 <UART_SetConfig+0x208>
 8003e26:	2bc0      	cmp	r3, #192	; 0xc0
 8003e28:	d818      	bhi.n	8003e5c <UART_SetConfig+0x210>
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d00a      	beq.n	8003e44 <UART_SetConfig+0x1f8>
 8003e2e:	2b80      	cmp	r3, #128	; 0x80
 8003e30:	d814      	bhi.n	8003e5c <UART_SetConfig+0x210>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <UART_SetConfig+0x1f0>
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d008      	beq.n	8003e4c <UART_SetConfig+0x200>
 8003e3a:	e00f      	b.n	8003e5c <UART_SetConfig+0x210>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e42:	e042      	b.n	8003eca <UART_SetConfig+0x27e>
 8003e44:	2302      	movs	r3, #2
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4a:	e03e      	b.n	8003eca <UART_SetConfig+0x27e>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e52:	e03a      	b.n	8003eca <UART_SetConfig+0x27e>
 8003e54:	2308      	movs	r3, #8
 8003e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5a:	e036      	b.n	8003eca <UART_SetConfig+0x27e>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e62:	e032      	b.n	8003eca <UART_SetConfig+0x27e>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <UART_SetConfig+0x2e0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d12a      	bne.n	8003ec4 <UART_SetConfig+0x278>
 8003e6e:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <UART_SetConfig+0x2e8>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e7c:	d01a      	beq.n	8003eb4 <UART_SetConfig+0x268>
 8003e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e82:	d81b      	bhi.n	8003ebc <UART_SetConfig+0x270>
 8003e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e88:	d00c      	beq.n	8003ea4 <UART_SetConfig+0x258>
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d815      	bhi.n	8003ebc <UART_SetConfig+0x270>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <UART_SetConfig+0x250>
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d008      	beq.n	8003eac <UART_SetConfig+0x260>
 8003e9a:	e00f      	b.n	8003ebc <UART_SetConfig+0x270>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	e012      	b.n	8003eca <UART_SetConfig+0x27e>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	e00e      	b.n	8003eca <UART_SetConfig+0x27e>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb2:	e00a      	b.n	8003eca <UART_SetConfig+0x27e>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eba:	e006      	b.n	8003eca <UART_SetConfig+0x27e>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	e002      	b.n	8003eca <UART_SetConfig+0x27e>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <UART_SetConfig+0x2e0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	f040 80a8 	bne.w	8004026 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d834      	bhi.n	8003f48 <UART_SetConfig+0x2fc>
 8003ede:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x298>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003f49 	.word	0x08003f49
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f49 	.word	0x08003f49
 8003ef4:	08003f17 	.word	0x08003f17
 8003ef8:	08003f49 	.word	0x08003f49
 8003efc:	08003f49 	.word	0x08003f49
 8003f00:	08003f49 	.word	0x08003f49
 8003f04:	08003f1f 	.word	0x08003f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7ff f860 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8003f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f0e:	e021      	b.n	8003f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <UART_SetConfig+0x2f8>)
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f14:	e01e      	b.n	8003f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f16:	f7fe ffeb 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8003f1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f1c:	e01a      	b.n	8003f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f24:	e016      	b.n	8003f54 <UART_SetConfig+0x308>
 8003f26:	bf00      	nop
 8003f28:	cfff69f3 	.word	0xcfff69f3
 8003f2c:	40008000 	.word	0x40008000
 8003f30:	40013800 	.word	0x40013800
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40004400 	.word	0x40004400
 8003f3c:	40004800 	.word	0x40004800
 8003f40:	40004c00 	.word	0x40004c00
 8003f44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 812a 	beq.w	80041b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	4a9e      	ldr	r2, [pc, #632]	; (80041dc <UART_SetConfig+0x590>)
 8003f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d305      	bcc.n	8003f8c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d903      	bls.n	8003f94 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f92:	e10d      	b.n	80041b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	2200      	movs	r2, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	60fa      	str	r2, [r7, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	4a8e      	ldr	r2, [pc, #568]	; (80041dc <UART_SetConfig+0x590>)
 8003fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2200      	movs	r2, #0
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fb6:	f7fc fe2f 	bl	8000c18 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	020b      	lsls	r3, r1, #8
 8003fcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fd0:	0202      	lsls	r2, r0, #8
 8003fd2:	6979      	ldr	r1, [r7, #20]
 8003fd4:	6849      	ldr	r1, [r1, #4]
 8003fd6:	0849      	lsrs	r1, r1, #1
 8003fd8:	2000      	movs	r0, #0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	4605      	mov	r5, r0
 8003fde:	eb12 0804 	adds.w	r8, r2, r4
 8003fe2:	eb43 0905 	adc.w	r9, r3, r5
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	469a      	mov	sl, r3
 8003fee:	4693      	mov	fp, r2
 8003ff0:	4652      	mov	r2, sl
 8003ff2:	465b      	mov	r3, fp
 8003ff4:	4640      	mov	r0, r8
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	f7fc fe0e 	bl	8000c18 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400a:	d308      	bcc.n	800401e <UART_SetConfig+0x3d2>
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004012:	d204      	bcs.n	800401e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a3a      	ldr	r2, [r7, #32]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e0c8      	b.n	80041b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004024:	e0c4      	b.n	80041b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d167      	bne.n	8004100 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004034:	2b08      	cmp	r3, #8
 8004036:	d828      	bhi.n	800408a <UART_SetConfig+0x43e>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0x3f4>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004065 	.word	0x08004065
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004075 	.word	0x08004075
 800404c:	0800408b 	.word	0x0800408b
 8004050:	0800407b 	.word	0x0800407b
 8004054:	0800408b 	.word	0x0800408b
 8004058:	0800408b 	.word	0x0800408b
 800405c:	0800408b 	.word	0x0800408b
 8004060:	08004083 	.word	0x08004083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7fe ffb2 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8004068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800406a:	e014      	b.n	8004096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe ffc4 	bl	8002ff8 <HAL_RCC_GetPCLK2Freq>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004072:	e010      	b.n	8004096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004074:	4b5a      	ldr	r3, [pc, #360]	; (80041e0 <UART_SetConfig+0x594>)
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004078:	e00d      	b.n	8004096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407a:	f7fe ff39 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 800407e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004080:	e009      	b.n	8004096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004088:	e005      	b.n	8004096 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8089 	beq.w	80041b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	4a4e      	ldr	r2, [pc, #312]	; (80041dc <UART_SetConfig+0x590>)
 80040a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040a8:	461a      	mov	r2, r3
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80040b0:	005a      	lsls	r2, r3, #1
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	441a      	add	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	2b0f      	cmp	r3, #15
 80040c8:	d916      	bls.n	80040f8 <UART_SetConfig+0x4ac>
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d212      	bcs.n	80040f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f023 030f 	bic.w	r3, r3, #15
 80040da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	8bfb      	ldrh	r3, [r7, #30]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	8bfa      	ldrh	r2, [r7, #30]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	e05b      	b.n	80041b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040fe:	e057      	b.n	80041b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004104:	2b08      	cmp	r3, #8
 8004106:	d828      	bhi.n	800415a <UART_SetConfig+0x50e>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x4c4>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004135 	.word	0x08004135
 8004114:	0800413d 	.word	0x0800413d
 8004118:	08004145 	.word	0x08004145
 800411c:	0800415b 	.word	0x0800415b
 8004120:	0800414b 	.word	0x0800414b
 8004124:	0800415b 	.word	0x0800415b
 8004128:	0800415b 	.word	0x0800415b
 800412c:	0800415b 	.word	0x0800415b
 8004130:	08004153 	.word	0x08004153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004134:	f7fe ff4a 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8004138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800413a:	e014      	b.n	8004166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7fe ff5c 	bl	8002ff8 <HAL_RCC_GetPCLK2Freq>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004142:	e010      	b.n	8004166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004144:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <UART_SetConfig+0x594>)
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004148:	e00d      	b.n	8004166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414a:	f7fe fed1 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004150:	e009      	b.n	8004166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004158:	e005      	b.n	8004166 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004164:	bf00      	nop
    }

    if (pclk != 0U)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d021      	beq.n	80041b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <UART_SetConfig+0x590>)
 8004172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004176:	461a      	mov	r2, r3
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	fbb3 f2f2 	udiv	r2, r3, r2
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	441a      	add	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d909      	bls.n	80041aa <UART_SetConfig+0x55e>
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d205      	bcs.n	80041aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60da      	str	r2, [r3, #12]
 80041a8:	e002      	b.n	80041b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80041cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3730      	adds	r7, #48	; 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041da:	bf00      	nop
 80041dc:	080080c4 	.word	0x080080c4
 80041e0:	00f42400 	.word	0x00f42400

080041e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01a      	beq.n	80042fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e2:	d10a      	bne.n	80042fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004338:	f7fd fb90 	bl	8001a5c <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b08      	cmp	r3, #8
 800434a:	d10e      	bne.n	800436a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f82f 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e025      	b.n	80043b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b04      	cmp	r3, #4
 8004376:	d10e      	bne.n	8004396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f819 	bl	80043be <UART_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e00f      	b.n	80043b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b09c      	sub	sp, #112	; 0x70
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	e0a9      	b.n	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	f000 80a5 	beq.w	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fd fb3f 	bl	8001a5c <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80043ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d140      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004404:	667b      	str	r3, [r7, #100]	; 0x64
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800440e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004410:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800441c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e6      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	663b      	str	r3, [r7, #96]	; 0x60
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004442:	64ba      	str	r2, [r7, #72]	; 0x48
 8004444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e069      	b.n	8004546 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d051      	beq.n	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448e:	d149      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	613b      	str	r3, [r7, #16]
   return(result);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044ec:	623a      	str	r2, [r7, #32]
 80044ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	69f9      	ldr	r1, [r7, #28]
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e010      	b.n	8004546 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	429a      	cmp	r2, r3
 8004540:	f43f af46 	beq.w	80043d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3770      	adds	r7, #112	; 0x70
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b0a3      	sub	sp, #140	; 0x8c
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	d10e      	bne.n	80045a2 <UART_Start_Receive_IT+0x52>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <UART_Start_Receive_IT+0x48>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004596:	e02d      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	22ff      	movs	r2, #255	; 0xff
 800459c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045a0:	e028      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <UART_Start_Receive_IT+0x76>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <UART_Start_Receive_IT+0x6c>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	22ff      	movs	r2, #255	; 0xff
 80045b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045ba:	e01b      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	227f      	movs	r2, #127	; 0x7f
 80045c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045c4:	e016      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ce:	d10d      	bne.n	80045ec <UART_Start_Receive_IT+0x9c>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <UART_Start_Receive_IT+0x92>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	227f      	movs	r2, #127	; 0x7f
 80045dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045e0:	e008      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	223f      	movs	r2, #63	; 0x3f
 80045e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045ea:	e003      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2222      	movs	r2, #34	; 0x22
 8004600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3308      	adds	r3, #8
 8004624:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004628:	673a      	str	r2, [r7, #112]	; 0x70
 800462a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800462e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e3      	bne.n	8004604 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004644:	d153      	bne.n	80046ee <UART_Start_Receive_IT+0x19e>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	429a      	cmp	r2, r3
 8004650:	d34d      	bcc.n	80046ee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d107      	bne.n	800466c <UART_Start_Receive_IT+0x11c>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a4b      	ldr	r2, [pc, #300]	; (8004794 <UART_Start_Receive_IT+0x244>)
 8004668:	671a      	str	r2, [r3, #112]	; 0x70
 800466a:	e002      	b.n	8004672 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a4a      	ldr	r2, [pc, #296]	; (8004798 <UART_Start_Receive_IT+0x248>)
 8004670:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01a      	beq.n	80046b8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e4      	bne.n	8004682 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80046d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80046da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <UART_Start_Receive_IT+0x168>
 80046ec:	e04a      	b.n	8004784 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d107      	bne.n	8004708 <UART_Start_Receive_IT+0x1b8>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a26      	ldr	r2, [pc, #152]	; (800479c <UART_Start_Receive_IT+0x24c>)
 8004704:	671a      	str	r2, [r3, #112]	; 0x70
 8004706:	e002      	b.n	800470e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <UART_Start_Receive_IT+0x250>)
 800470c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d019      	beq.n	8004752 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004732:	677b      	str	r3, [r7, #116]	; 0x74
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
 800473e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e6      	bne.n	800471e <UART_Start_Receive_IT+0x1ce>
 8004750:	e018      	b.n	8004784 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	613b      	str	r3, [r7, #16]
   return(result);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f043 0320 	orr.w	r3, r3, #32
 8004766:	67bb      	str	r3, [r7, #120]	; 0x78
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	69f9      	ldr	r1, [r7, #28]
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	61bb      	str	r3, [r7, #24]
   return(result);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e6      	bne.n	8004752 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	378c      	adds	r7, #140	; 0x8c
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	08004ead 	.word	0x08004ead
 8004798:	08004bb5 	.word	0x08004bb5
 800479c:	08004a53 	.word	0x08004a53
 80047a0:	080048f3 	.word	0x080048f3

080047a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b095      	sub	sp, #84	; 0x54
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40
 80047cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e6      	bne.n	80047ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3308      	adds	r3, #8
 8004800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e3      	bne.n	80047de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d118      	bne.n	8004850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	60bb      	str	r3, [r7, #8]
   return(result);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0310 	bic.w	r3, r3, #16
 8004832:	647b      	str	r3, [r7, #68]	; 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	613b      	str	r3, [r7, #16]
   return(result);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004864:	bf00      	nop
 8004866:	3754      	adds	r7, #84	; 0x54
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff f9c6 	bl	8003c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	613b      	str	r3, [r7, #16]
   return(result);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff f991 	bl	8003c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ea:	bf00      	nop
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b096      	sub	sp, #88	; 0x58
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004900:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	2b22      	cmp	r3, #34	; 0x22
 800490c:	f040 8095 	bne.w	8004a3a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800491a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800491e:	b2d9      	uxtb	r1, r3
 8004920:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004924:	b2da      	uxtb	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	400a      	ands	r2, r1
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d178      	bne.n	8004a4a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800496c:	653b      	str	r3, [r7, #80]	; 0x50
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
 8004978:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800497c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	623b      	str	r3, [r7, #32]
   return(result);
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049aa:	633a      	str	r2, [r7, #48]	; 0x30
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d12e      	bne.n	8004a32 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0310 	bic.w	r3, r3, #16
 80049ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	617b      	str	r3, [r7, #20]
   return(result);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e6      	bne.n	80049da <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d103      	bne.n	8004a22 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2210      	movs	r2, #16
 8004a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff f902 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a30:	e00b      	b.n	8004a4a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fd50 	bl	80014d8 <HAL_UART_RxCpltCallback>
}
 8004a38:	e007      	b.n	8004a4a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0208 	orr.w	r2, r2, #8
 8004a48:	619a      	str	r2, [r3, #24]
}
 8004a4a:	bf00      	nop
 8004a4c:	3758      	adds	r7, #88	; 0x58
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b096      	sub	sp, #88	; 0x58
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	f040 8095 	bne.w	8004b9a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a80:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004a84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a88:	4013      	ands	r3, r2
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d178      	bne.n	8004baa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d12e      	bne.n	8004b92 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d103      	bne.n	8004b82 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff f852 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b90:	e00b      	b.n	8004baa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fca0 	bl	80014d8 <HAL_UART_RxCpltCallback>
}
 8004b98:	e007      	b.n	8004baa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0208 	orr.w	r2, r2, #8
 8004ba8:	619a      	str	r2, [r3, #24]
}
 8004baa:	bf00      	nop
 8004bac:	3758      	adds	r7, #88	; 0x58
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b0a6      	sub	sp, #152	; 0x98
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004bc2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	2b22      	cmp	r3, #34	; 0x22
 8004bec:	f040 814f 	bne.w	8004e8e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bf6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004bfa:	e0f6      	b.n	8004dea <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c06:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004c0a:	b2d9      	uxtb	r1, r3
 8004c0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	400a      	ands	r2, r1
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d053      	beq.n	8004cf6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d011      	beq.n	8004c7e <UART_RxISR_8BIT_FIFOEN+0xca>
 8004c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d011      	beq.n	8004cae <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca4:	f043 0204 	orr.w	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d011      	beq.n	8004cde <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd4:	f043 0202 	orr.w	r2, r3, #2
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d006      	beq.n	8004cf6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fe ff99 	bl	8003c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d173      	bne.n	8004dea <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d26:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004d2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e4      	bne.n	8004d02 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d5c:	657a      	str	r2, [r7, #84]	; 0x54
 8004d5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e3      	bne.n	8004d38 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d12e      	bne.n	8004de4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
 8004da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
 8004dac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e6      	bne.n	8004d8c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d103      	bne.n	8004dd4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fe ff29 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
 8004de2:	e002      	b.n	8004dea <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fc fb77 	bl	80014d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8004df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f47f aefe 	bne.w	8004bfc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d045      	beq.n	8004e9e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d23e      	bcs.n	8004e9e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3308      	adds	r3, #8
 8004e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e36:	673b      	str	r3, [r7, #112]	; 0x70
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e5      	bne.n	8004e20 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004e58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f043 0320 	orr.w	r3, r3, #32
 8004e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6979      	ldr	r1, [r7, #20]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	613b      	str	r3, [r7, #16]
   return(result);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e6      	bne.n	8004e5a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e8c:	e007      	b.n	8004e9e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0208 	orr.w	r2, r2, #8
 8004e9c:	619a      	str	r2, [r3, #24]
}
 8004e9e:	bf00      	nop
 8004ea0:	3798      	adds	r7, #152	; 0x98
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	080048f3 	.word	0x080048f3

08004eac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0a8      	sub	sp, #160	; 0xa0
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004eba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	2b22      	cmp	r3, #34	; 0x22
 8004ee4:	f040 8153 	bne.w	800518e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004eee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ef2:	e0fa      	b.n	80050ea <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8004f06:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004f0a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f0e:	4013      	ands	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d053      	beq.n	8004ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8004f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2202      	movs	r2, #2
 8004f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa0:	f043 0204 	orr.w	r2, r3, #4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd0:	f043 0202 	orr.w	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d006      	beq.n	8004ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fe fe1b 	bl	8003c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d175      	bne.n	80050ea <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800500c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005022:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005026:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800502e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e4      	bne.n	8004ffe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800505c:	65ba      	str	r2, [r7, #88]	; 0x58
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800506a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e1      	bne.n	8005034 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005082:	2b01      	cmp	r3, #1
 8005084:	d12e      	bne.n	80050e4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509c:	f023 0310 	bic.w	r3, r3, #16
 80050a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050aa:	647b      	str	r3, [r7, #68]	; 0x44
 80050ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e6      	bne.n	800508c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d103      	bne.n	80050d4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2210      	movs	r2, #16
 80050d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7fe fda9 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
 80050e2:	e002      	b.n	80050ea <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fc f9f7 	bl	80014d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <UART_RxISR_16BIT_FIFOEN+0x254>
 80050f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f47f aefa 	bne.w	8004ef4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005106:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800510a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800510e:	2b00      	cmp	r3, #0
 8005110:	d045      	beq.n	800519e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005118:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800511c:	429a      	cmp	r2, r3
 800511e:	d23e      	bcs.n	800519e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	623b      	str	r3, [r7, #32]
   return(result);
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005136:	677b      	str	r3, [r7, #116]	; 0x74
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005140:	633a      	str	r2, [r7, #48]	; 0x30
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e5      	bne.n	8005120 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005158:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	60fb      	str	r3, [r7, #12]
   return(result);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f043 0320 	orr.w	r3, r3, #32
 800516e:	673b      	str	r3, [r7, #112]	; 0x70
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	617b      	str	r3, [r7, #20]
   return(result);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800518c:	e007      	b.n	800519e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	619a      	str	r2, [r3, #24]
}
 800519e:	bf00      	nop
 80051a0:	37a0      	adds	r7, #160	; 0xa0
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	08004a53 	.word	0x08004a53

080051ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UARTEx_DisableFifoMode+0x16>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e027      	b.n	800524e <HAL_UARTEx_DisableFifoMode+0x66>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2224      	movs	r2, #36	; 0x24
 800520a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800522c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800526e:	2302      	movs	r3, #2
 8005270:	e02d      	b.n	80052ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2224      	movs	r2, #36	; 0x24
 800527e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f850 	bl	8005354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e02d      	b.n	800534a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2224      	movs	r2, #36	; 0x24
 80052fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f812 	bl	8005354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005360:	2b00      	cmp	r3, #0
 8005362:	d108      	bne.n	8005376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005374:	e031      	b.n	80053da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005376:	2308      	movs	r3, #8
 8005378:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800537a:	2308      	movs	r3, #8
 800537c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	0e5b      	lsrs	r3, r3, #25
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	0f5b      	lsrs	r3, r3, #29
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	7b3a      	ldrb	r2, [r7, #12]
 80053a2:	4911      	ldr	r1, [pc, #68]	; (80053e8 <UARTEx_SetNbDataToProcess+0x94>)
 80053a4:	5c8a      	ldrb	r2, [r1, r2]
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053aa:	7b3a      	ldrb	r2, [r7, #12]
 80053ac:	490f      	ldr	r1, [pc, #60]	; (80053ec <UARTEx_SetNbDataToProcess+0x98>)
 80053ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	7b7a      	ldrb	r2, [r7, #13]
 80053c0:	4909      	ldr	r1, [pc, #36]	; (80053e8 <UARTEx_SetNbDataToProcess+0x94>)
 80053c2:	5c8a      	ldrb	r2, [r1, r2]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053c8:	7b7a      	ldrb	r2, [r7, #13]
 80053ca:	4908      	ldr	r1, [pc, #32]	; (80053ec <UARTEx_SetNbDataToProcess+0x98>)
 80053cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	080080dc 	.word	0x080080dc
 80053ec:	080080e4 	.word	0x080080e4

080053f0 <atoi>:
 80053f0:	220a      	movs	r2, #10
 80053f2:	2100      	movs	r1, #0
 80053f4:	f000 bd7a 	b.w	8005eec <strtol>

080053f8 <__errno>:
 80053f8:	4b01      	ldr	r3, [pc, #4]	; (8005400 <__errno+0x8>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	2000000c 	.word	0x2000000c

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4d0d      	ldr	r5, [pc, #52]	; (800543c <__libc_init_array+0x38>)
 8005408:	4c0d      	ldr	r4, [pc, #52]	; (8005440 <__libc_init_array+0x3c>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	2600      	movs	r6, #0
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	4d0b      	ldr	r5, [pc, #44]	; (8005444 <__libc_init_array+0x40>)
 8005416:	4c0c      	ldr	r4, [pc, #48]	; (8005448 <__libc_init_array+0x44>)
 8005418:	f002 fe1e 	bl	8008058 <_init>
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	2600      	movs	r6, #0
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	08008534 	.word	0x08008534
 8005440:	08008534 	.word	0x08008534
 8005444:	08008534 	.word	0x08008534
 8005448:	08008538 	.word	0x08008538

0800544c <memset>:
 800544c:	4402      	add	r2, r0
 800544e:	4603      	mov	r3, r0
 8005450:	4293      	cmp	r3, r2
 8005452:	d100      	bne.n	8005456 <memset+0xa>
 8005454:	4770      	bx	lr
 8005456:	f803 1b01 	strb.w	r1, [r3], #1
 800545a:	e7f9      	b.n	8005450 <memset+0x4>

0800545c <__cvt>:
 800545c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	ec55 4b10 	vmov	r4, r5, d0
 8005464:	2d00      	cmp	r5, #0
 8005466:	460e      	mov	r6, r1
 8005468:	4619      	mov	r1, r3
 800546a:	462b      	mov	r3, r5
 800546c:	bfbb      	ittet	lt
 800546e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005472:	461d      	movlt	r5, r3
 8005474:	2300      	movge	r3, #0
 8005476:	232d      	movlt	r3, #45	; 0x2d
 8005478:	700b      	strb	r3, [r1, #0]
 800547a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800547c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005480:	4691      	mov	r9, r2
 8005482:	f023 0820 	bic.w	r8, r3, #32
 8005486:	bfbc      	itt	lt
 8005488:	4622      	movlt	r2, r4
 800548a:	4614      	movlt	r4, r2
 800548c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005490:	d005      	beq.n	800549e <__cvt+0x42>
 8005492:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005496:	d100      	bne.n	800549a <__cvt+0x3e>
 8005498:	3601      	adds	r6, #1
 800549a:	2102      	movs	r1, #2
 800549c:	e000      	b.n	80054a0 <__cvt+0x44>
 800549e:	2103      	movs	r1, #3
 80054a0:	ab03      	add	r3, sp, #12
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	ab02      	add	r3, sp, #8
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	ec45 4b10 	vmov	d0, r4, r5
 80054ac:	4653      	mov	r3, sl
 80054ae:	4632      	mov	r2, r6
 80054b0:	f000 fdd2 	bl	8006058 <_dtoa_r>
 80054b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054b8:	4607      	mov	r7, r0
 80054ba:	d102      	bne.n	80054c2 <__cvt+0x66>
 80054bc:	f019 0f01 	tst.w	r9, #1
 80054c0:	d022      	beq.n	8005508 <__cvt+0xac>
 80054c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054c6:	eb07 0906 	add.w	r9, r7, r6
 80054ca:	d110      	bne.n	80054ee <__cvt+0x92>
 80054cc:	783b      	ldrb	r3, [r7, #0]
 80054ce:	2b30      	cmp	r3, #48	; 0x30
 80054d0:	d10a      	bne.n	80054e8 <__cvt+0x8c>
 80054d2:	2200      	movs	r2, #0
 80054d4:	2300      	movs	r3, #0
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	f7fb fb2d 	bl	8000b38 <__aeabi_dcmpeq>
 80054de:	b918      	cbnz	r0, 80054e8 <__cvt+0x8c>
 80054e0:	f1c6 0601 	rsb	r6, r6, #1
 80054e4:	f8ca 6000 	str.w	r6, [sl]
 80054e8:	f8da 3000 	ldr.w	r3, [sl]
 80054ec:	4499      	add	r9, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	2300      	movs	r3, #0
 80054f2:	4620      	mov	r0, r4
 80054f4:	4629      	mov	r1, r5
 80054f6:	f7fb fb1f 	bl	8000b38 <__aeabi_dcmpeq>
 80054fa:	b108      	cbz	r0, 8005500 <__cvt+0xa4>
 80054fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005500:	2230      	movs	r2, #48	; 0x30
 8005502:	9b03      	ldr	r3, [sp, #12]
 8005504:	454b      	cmp	r3, r9
 8005506:	d307      	bcc.n	8005518 <__cvt+0xbc>
 8005508:	9b03      	ldr	r3, [sp, #12]
 800550a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800550c:	1bdb      	subs	r3, r3, r7
 800550e:	4638      	mov	r0, r7
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	b004      	add	sp, #16
 8005514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005518:	1c59      	adds	r1, r3, #1
 800551a:	9103      	str	r1, [sp, #12]
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e7f0      	b.n	8005502 <__cvt+0xa6>

08005520 <__exponent>:
 8005520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005522:	4603      	mov	r3, r0
 8005524:	2900      	cmp	r1, #0
 8005526:	bfb8      	it	lt
 8005528:	4249      	neglt	r1, r1
 800552a:	f803 2b02 	strb.w	r2, [r3], #2
 800552e:	bfb4      	ite	lt
 8005530:	222d      	movlt	r2, #45	; 0x2d
 8005532:	222b      	movge	r2, #43	; 0x2b
 8005534:	2909      	cmp	r1, #9
 8005536:	7042      	strb	r2, [r0, #1]
 8005538:	dd2a      	ble.n	8005590 <__exponent+0x70>
 800553a:	f10d 0407 	add.w	r4, sp, #7
 800553e:	46a4      	mov	ip, r4
 8005540:	270a      	movs	r7, #10
 8005542:	46a6      	mov	lr, r4
 8005544:	460a      	mov	r2, r1
 8005546:	fb91 f6f7 	sdiv	r6, r1, r7
 800554a:	fb07 1516 	mls	r5, r7, r6, r1
 800554e:	3530      	adds	r5, #48	; 0x30
 8005550:	2a63      	cmp	r2, #99	; 0x63
 8005552:	f104 34ff 	add.w	r4, r4, #4294967295
 8005556:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800555a:	4631      	mov	r1, r6
 800555c:	dcf1      	bgt.n	8005542 <__exponent+0x22>
 800555e:	3130      	adds	r1, #48	; 0x30
 8005560:	f1ae 0502 	sub.w	r5, lr, #2
 8005564:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005568:	1c44      	adds	r4, r0, #1
 800556a:	4629      	mov	r1, r5
 800556c:	4561      	cmp	r1, ip
 800556e:	d30a      	bcc.n	8005586 <__exponent+0x66>
 8005570:	f10d 0209 	add.w	r2, sp, #9
 8005574:	eba2 020e 	sub.w	r2, r2, lr
 8005578:	4565      	cmp	r5, ip
 800557a:	bf88      	it	hi
 800557c:	2200      	movhi	r2, #0
 800557e:	4413      	add	r3, r2
 8005580:	1a18      	subs	r0, r3, r0
 8005582:	b003      	add	sp, #12
 8005584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800558a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800558e:	e7ed      	b.n	800556c <__exponent+0x4c>
 8005590:	2330      	movs	r3, #48	; 0x30
 8005592:	3130      	adds	r1, #48	; 0x30
 8005594:	7083      	strb	r3, [r0, #2]
 8005596:	70c1      	strb	r1, [r0, #3]
 8005598:	1d03      	adds	r3, r0, #4
 800559a:	e7f1      	b.n	8005580 <__exponent+0x60>

0800559c <_printf_float>:
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	ed2d 8b02 	vpush	{d8}
 80055a4:	b08d      	sub	sp, #52	; 0x34
 80055a6:	460c      	mov	r4, r1
 80055a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055ac:	4616      	mov	r6, r2
 80055ae:	461f      	mov	r7, r3
 80055b0:	4605      	mov	r5, r0
 80055b2:	f001 fb51 	bl	8006c58 <_localeconv_r>
 80055b6:	f8d0 a000 	ldr.w	sl, [r0]
 80055ba:	4650      	mov	r0, sl
 80055bc:	f7fa fe3a 	bl	8000234 <strlen>
 80055c0:	2300      	movs	r3, #0
 80055c2:	930a      	str	r3, [sp, #40]	; 0x28
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	9305      	str	r3, [sp, #20]
 80055c8:	f8d8 3000 	ldr.w	r3, [r8]
 80055cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055d0:	3307      	adds	r3, #7
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	f103 0208 	add.w	r2, r3, #8
 80055da:	f8c8 2000 	str.w	r2, [r8]
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055ee:	9307      	str	r3, [sp, #28]
 80055f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80055f4:	ee08 0a10 	vmov	s16, r0
 80055f8:	4b9f      	ldr	r3, [pc, #636]	; (8005878 <_printf_float+0x2dc>)
 80055fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005602:	f7fb facb 	bl	8000b9c <__aeabi_dcmpun>
 8005606:	bb88      	cbnz	r0, 800566c <_printf_float+0xd0>
 8005608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800560c:	4b9a      	ldr	r3, [pc, #616]	; (8005878 <_printf_float+0x2dc>)
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	f7fb faa5 	bl	8000b60 <__aeabi_dcmple>
 8005616:	bb48      	cbnz	r0, 800566c <_printf_float+0xd0>
 8005618:	2200      	movs	r2, #0
 800561a:	2300      	movs	r3, #0
 800561c:	4640      	mov	r0, r8
 800561e:	4649      	mov	r1, r9
 8005620:	f7fb fa94 	bl	8000b4c <__aeabi_dcmplt>
 8005624:	b110      	cbz	r0, 800562c <_printf_float+0x90>
 8005626:	232d      	movs	r3, #45	; 0x2d
 8005628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800562c:	4b93      	ldr	r3, [pc, #588]	; (800587c <_printf_float+0x2e0>)
 800562e:	4894      	ldr	r0, [pc, #592]	; (8005880 <_printf_float+0x2e4>)
 8005630:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005634:	bf94      	ite	ls
 8005636:	4698      	movls	r8, r3
 8005638:	4680      	movhi	r8, r0
 800563a:	2303      	movs	r3, #3
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	9b05      	ldr	r3, [sp, #20]
 8005640:	f023 0204 	bic.w	r2, r3, #4
 8005644:	6022      	str	r2, [r4, #0]
 8005646:	f04f 0900 	mov.w	r9, #0
 800564a:	9700      	str	r7, [sp, #0]
 800564c:	4633      	mov	r3, r6
 800564e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005650:	4621      	mov	r1, r4
 8005652:	4628      	mov	r0, r5
 8005654:	f000 f9d8 	bl	8005a08 <_printf_common>
 8005658:	3001      	adds	r0, #1
 800565a:	f040 8090 	bne.w	800577e <_printf_float+0x1e2>
 800565e:	f04f 30ff 	mov.w	r0, #4294967295
 8005662:	b00d      	add	sp, #52	; 0x34
 8005664:	ecbd 8b02 	vpop	{d8}
 8005668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566c:	4642      	mov	r2, r8
 800566e:	464b      	mov	r3, r9
 8005670:	4640      	mov	r0, r8
 8005672:	4649      	mov	r1, r9
 8005674:	f7fb fa92 	bl	8000b9c <__aeabi_dcmpun>
 8005678:	b140      	cbz	r0, 800568c <_printf_float+0xf0>
 800567a:	464b      	mov	r3, r9
 800567c:	2b00      	cmp	r3, #0
 800567e:	bfbc      	itt	lt
 8005680:	232d      	movlt	r3, #45	; 0x2d
 8005682:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005686:	487f      	ldr	r0, [pc, #508]	; (8005884 <_printf_float+0x2e8>)
 8005688:	4b7f      	ldr	r3, [pc, #508]	; (8005888 <_printf_float+0x2ec>)
 800568a:	e7d1      	b.n	8005630 <_printf_float+0x94>
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005692:	9206      	str	r2, [sp, #24]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	d13f      	bne.n	8005718 <_printf_float+0x17c>
 8005698:	2306      	movs	r3, #6
 800569a:	6063      	str	r3, [r4, #4]
 800569c:	9b05      	ldr	r3, [sp, #20]
 800569e:	6861      	ldr	r1, [r4, #4]
 80056a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056a4:	2300      	movs	r3, #0
 80056a6:	9303      	str	r3, [sp, #12]
 80056a8:	ab0a      	add	r3, sp, #40	; 0x28
 80056aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056ae:	ab09      	add	r3, sp, #36	; 0x24
 80056b0:	ec49 8b10 	vmov	d0, r8, r9
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	6022      	str	r2, [r4, #0]
 80056b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056bc:	4628      	mov	r0, r5
 80056be:	f7ff fecd 	bl	800545c <__cvt>
 80056c2:	9b06      	ldr	r3, [sp, #24]
 80056c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056c6:	2b47      	cmp	r3, #71	; 0x47
 80056c8:	4680      	mov	r8, r0
 80056ca:	d108      	bne.n	80056de <_printf_float+0x142>
 80056cc:	1cc8      	adds	r0, r1, #3
 80056ce:	db02      	blt.n	80056d6 <_printf_float+0x13a>
 80056d0:	6863      	ldr	r3, [r4, #4]
 80056d2:	4299      	cmp	r1, r3
 80056d4:	dd41      	ble.n	800575a <_printf_float+0x1be>
 80056d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80056da:	fa5f fb8b 	uxtb.w	fp, fp
 80056de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056e2:	d820      	bhi.n	8005726 <_printf_float+0x18a>
 80056e4:	3901      	subs	r1, #1
 80056e6:	465a      	mov	r2, fp
 80056e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056ec:	9109      	str	r1, [sp, #36]	; 0x24
 80056ee:	f7ff ff17 	bl	8005520 <__exponent>
 80056f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056f4:	1813      	adds	r3, r2, r0
 80056f6:	2a01      	cmp	r2, #1
 80056f8:	4681      	mov	r9, r0
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	dc02      	bgt.n	8005704 <_printf_float+0x168>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	07d2      	lsls	r2, r2, #31
 8005702:	d501      	bpl.n	8005708 <_printf_float+0x16c>
 8005704:	3301      	adds	r3, #1
 8005706:	6123      	str	r3, [r4, #16]
 8005708:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800570c:	2b00      	cmp	r3, #0
 800570e:	d09c      	beq.n	800564a <_printf_float+0xae>
 8005710:	232d      	movs	r3, #45	; 0x2d
 8005712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005716:	e798      	b.n	800564a <_printf_float+0xae>
 8005718:	9a06      	ldr	r2, [sp, #24]
 800571a:	2a47      	cmp	r2, #71	; 0x47
 800571c:	d1be      	bne.n	800569c <_printf_float+0x100>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1bc      	bne.n	800569c <_printf_float+0x100>
 8005722:	2301      	movs	r3, #1
 8005724:	e7b9      	b.n	800569a <_printf_float+0xfe>
 8005726:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800572a:	d118      	bne.n	800575e <_printf_float+0x1c2>
 800572c:	2900      	cmp	r1, #0
 800572e:	6863      	ldr	r3, [r4, #4]
 8005730:	dd0b      	ble.n	800574a <_printf_float+0x1ae>
 8005732:	6121      	str	r1, [r4, #16]
 8005734:	b913      	cbnz	r3, 800573c <_printf_float+0x1a0>
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	07d0      	lsls	r0, r2, #31
 800573a:	d502      	bpl.n	8005742 <_printf_float+0x1a6>
 800573c:	3301      	adds	r3, #1
 800573e:	440b      	add	r3, r1
 8005740:	6123      	str	r3, [r4, #16]
 8005742:	65a1      	str	r1, [r4, #88]	; 0x58
 8005744:	f04f 0900 	mov.w	r9, #0
 8005748:	e7de      	b.n	8005708 <_printf_float+0x16c>
 800574a:	b913      	cbnz	r3, 8005752 <_printf_float+0x1b6>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	07d2      	lsls	r2, r2, #31
 8005750:	d501      	bpl.n	8005756 <_printf_float+0x1ba>
 8005752:	3302      	adds	r3, #2
 8005754:	e7f4      	b.n	8005740 <_printf_float+0x1a4>
 8005756:	2301      	movs	r3, #1
 8005758:	e7f2      	b.n	8005740 <_printf_float+0x1a4>
 800575a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800575e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005760:	4299      	cmp	r1, r3
 8005762:	db05      	blt.n	8005770 <_printf_float+0x1d4>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	6121      	str	r1, [r4, #16]
 8005768:	07d8      	lsls	r0, r3, #31
 800576a:	d5ea      	bpl.n	8005742 <_printf_float+0x1a6>
 800576c:	1c4b      	adds	r3, r1, #1
 800576e:	e7e7      	b.n	8005740 <_printf_float+0x1a4>
 8005770:	2900      	cmp	r1, #0
 8005772:	bfd4      	ite	le
 8005774:	f1c1 0202 	rsble	r2, r1, #2
 8005778:	2201      	movgt	r2, #1
 800577a:	4413      	add	r3, r2
 800577c:	e7e0      	b.n	8005740 <_printf_float+0x1a4>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	055a      	lsls	r2, r3, #21
 8005782:	d407      	bmi.n	8005794 <_printf_float+0x1f8>
 8005784:	6923      	ldr	r3, [r4, #16]
 8005786:	4642      	mov	r2, r8
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	d12c      	bne.n	80057ec <_printf_float+0x250>
 8005792:	e764      	b.n	800565e <_printf_float+0xc2>
 8005794:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005798:	f240 80e0 	bls.w	800595c <_printf_float+0x3c0>
 800579c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	f7fb f9c8 	bl	8000b38 <__aeabi_dcmpeq>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d034      	beq.n	8005816 <_printf_float+0x27a>
 80057ac:	4a37      	ldr	r2, [pc, #220]	; (800588c <_printf_float+0x2f0>)
 80057ae:	2301      	movs	r3, #1
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f af51 	beq.w	800565e <_printf_float+0xc2>
 80057bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c0:	429a      	cmp	r2, r3
 80057c2:	db02      	blt.n	80057ca <_printf_float+0x22e>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	07d8      	lsls	r0, r3, #31
 80057c8:	d510      	bpl.n	80057ec <_printf_float+0x250>
 80057ca:	ee18 3a10 	vmov	r3, s16
 80057ce:	4652      	mov	r2, sl
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	f43f af41 	beq.w	800565e <_printf_float+0xc2>
 80057dc:	f04f 0800 	mov.w	r8, #0
 80057e0:	f104 091a 	add.w	r9, r4, #26
 80057e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	4543      	cmp	r3, r8
 80057ea:	dc09      	bgt.n	8005800 <_printf_float+0x264>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	079b      	lsls	r3, r3, #30
 80057f0:	f100 8105 	bmi.w	80059fe <_printf_float+0x462>
 80057f4:	68e0      	ldr	r0, [r4, #12]
 80057f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f8:	4298      	cmp	r0, r3
 80057fa:	bfb8      	it	lt
 80057fc:	4618      	movlt	r0, r3
 80057fe:	e730      	b.n	8005662 <_printf_float+0xc6>
 8005800:	2301      	movs	r3, #1
 8005802:	464a      	mov	r2, r9
 8005804:	4631      	mov	r1, r6
 8005806:	4628      	mov	r0, r5
 8005808:	47b8      	blx	r7
 800580a:	3001      	adds	r0, #1
 800580c:	f43f af27 	beq.w	800565e <_printf_float+0xc2>
 8005810:	f108 0801 	add.w	r8, r8, #1
 8005814:	e7e6      	b.n	80057e4 <_printf_float+0x248>
 8005816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	dc39      	bgt.n	8005890 <_printf_float+0x2f4>
 800581c:	4a1b      	ldr	r2, [pc, #108]	; (800588c <_printf_float+0x2f0>)
 800581e:	2301      	movs	r3, #1
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f af19 	beq.w	800565e <_printf_float+0xc2>
 800582c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005830:	4313      	orrs	r3, r2
 8005832:	d102      	bne.n	800583a <_printf_float+0x29e>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	07d9      	lsls	r1, r3, #31
 8005838:	d5d8      	bpl.n	80057ec <_printf_float+0x250>
 800583a:	ee18 3a10 	vmov	r3, s16
 800583e:	4652      	mov	r2, sl
 8005840:	4631      	mov	r1, r6
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	f43f af09 	beq.w	800565e <_printf_float+0xc2>
 800584c:	f04f 0900 	mov.w	r9, #0
 8005850:	f104 0a1a 	add.w	sl, r4, #26
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	425b      	negs	r3, r3
 8005858:	454b      	cmp	r3, r9
 800585a:	dc01      	bgt.n	8005860 <_printf_float+0x2c4>
 800585c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585e:	e792      	b.n	8005786 <_printf_float+0x1ea>
 8005860:	2301      	movs	r3, #1
 8005862:	4652      	mov	r2, sl
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	f43f aef7 	beq.w	800565e <_printf_float+0xc2>
 8005870:	f109 0901 	add.w	r9, r9, #1
 8005874:	e7ee      	b.n	8005854 <_printf_float+0x2b8>
 8005876:	bf00      	nop
 8005878:	7fefffff 	.word	0x7fefffff
 800587c:	080080f0 	.word	0x080080f0
 8005880:	080080f4 	.word	0x080080f4
 8005884:	080080fc 	.word	0x080080fc
 8005888:	080080f8 	.word	0x080080f8
 800588c:	08008100 	.word	0x08008100
 8005890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005892:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005894:	429a      	cmp	r2, r3
 8005896:	bfa8      	it	ge
 8005898:	461a      	movge	r2, r3
 800589a:	2a00      	cmp	r2, #0
 800589c:	4691      	mov	r9, r2
 800589e:	dc37      	bgt.n	8005910 <_printf_float+0x374>
 80058a0:	f04f 0b00 	mov.w	fp, #0
 80058a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a8:	f104 021a 	add.w	r2, r4, #26
 80058ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058ae:	9305      	str	r3, [sp, #20]
 80058b0:	eba3 0309 	sub.w	r3, r3, r9
 80058b4:	455b      	cmp	r3, fp
 80058b6:	dc33      	bgt.n	8005920 <_printf_float+0x384>
 80058b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058bc:	429a      	cmp	r2, r3
 80058be:	db3b      	blt.n	8005938 <_printf_float+0x39c>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	07da      	lsls	r2, r3, #31
 80058c4:	d438      	bmi.n	8005938 <_printf_float+0x39c>
 80058c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c8:	9a05      	ldr	r2, [sp, #20]
 80058ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058cc:	1a9a      	subs	r2, r3, r2
 80058ce:	eba3 0901 	sub.w	r9, r3, r1
 80058d2:	4591      	cmp	r9, r2
 80058d4:	bfa8      	it	ge
 80058d6:	4691      	movge	r9, r2
 80058d8:	f1b9 0f00 	cmp.w	r9, #0
 80058dc:	dc35      	bgt.n	800594a <_printf_float+0x3ae>
 80058de:	f04f 0800 	mov.w	r8, #0
 80058e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058e6:	f104 0a1a 	add.w	sl, r4, #26
 80058ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	eba3 0309 	sub.w	r3, r3, r9
 80058f4:	4543      	cmp	r3, r8
 80058f6:	f77f af79 	ble.w	80057ec <_printf_float+0x250>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4652      	mov	r2, sl
 80058fe:	4631      	mov	r1, r6
 8005900:	4628      	mov	r0, r5
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	f43f aeaa 	beq.w	800565e <_printf_float+0xc2>
 800590a:	f108 0801 	add.w	r8, r8, #1
 800590e:	e7ec      	b.n	80058ea <_printf_float+0x34e>
 8005910:	4613      	mov	r3, r2
 8005912:	4631      	mov	r1, r6
 8005914:	4642      	mov	r2, r8
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	d1c0      	bne.n	80058a0 <_printf_float+0x304>
 800591e:	e69e      	b.n	800565e <_printf_float+0xc2>
 8005920:	2301      	movs	r3, #1
 8005922:	4631      	mov	r1, r6
 8005924:	4628      	mov	r0, r5
 8005926:	9205      	str	r2, [sp, #20]
 8005928:	47b8      	blx	r7
 800592a:	3001      	adds	r0, #1
 800592c:	f43f ae97 	beq.w	800565e <_printf_float+0xc2>
 8005930:	9a05      	ldr	r2, [sp, #20]
 8005932:	f10b 0b01 	add.w	fp, fp, #1
 8005936:	e7b9      	b.n	80058ac <_printf_float+0x310>
 8005938:	ee18 3a10 	vmov	r3, s16
 800593c:	4652      	mov	r2, sl
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	d1be      	bne.n	80058c6 <_printf_float+0x32a>
 8005948:	e689      	b.n	800565e <_printf_float+0xc2>
 800594a:	9a05      	ldr	r2, [sp, #20]
 800594c:	464b      	mov	r3, r9
 800594e:	4442      	add	r2, r8
 8005950:	4631      	mov	r1, r6
 8005952:	4628      	mov	r0, r5
 8005954:	47b8      	blx	r7
 8005956:	3001      	adds	r0, #1
 8005958:	d1c1      	bne.n	80058de <_printf_float+0x342>
 800595a:	e680      	b.n	800565e <_printf_float+0xc2>
 800595c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800595e:	2a01      	cmp	r2, #1
 8005960:	dc01      	bgt.n	8005966 <_printf_float+0x3ca>
 8005962:	07db      	lsls	r3, r3, #31
 8005964:	d538      	bpl.n	80059d8 <_printf_float+0x43c>
 8005966:	2301      	movs	r3, #1
 8005968:	4642      	mov	r2, r8
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f ae74 	beq.w	800565e <_printf_float+0xc2>
 8005976:	ee18 3a10 	vmov	r3, s16
 800597a:	4652      	mov	r2, sl
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f ae6b 	beq.w	800565e <_printf_float+0xc2>
 8005988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800598c:	2200      	movs	r2, #0
 800598e:	2300      	movs	r3, #0
 8005990:	f7fb f8d2 	bl	8000b38 <__aeabi_dcmpeq>
 8005994:	b9d8      	cbnz	r0, 80059ce <_printf_float+0x432>
 8005996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005998:	f108 0201 	add.w	r2, r8, #1
 800599c:	3b01      	subs	r3, #1
 800599e:	4631      	mov	r1, r6
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b8      	blx	r7
 80059a4:	3001      	adds	r0, #1
 80059a6:	d10e      	bne.n	80059c6 <_printf_float+0x42a>
 80059a8:	e659      	b.n	800565e <_printf_float+0xc2>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4652      	mov	r2, sl
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	f43f ae52 	beq.w	800565e <_printf_float+0xc2>
 80059ba:	f108 0801 	add.w	r8, r8, #1
 80059be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	4543      	cmp	r3, r8
 80059c4:	dcf1      	bgt.n	80059aa <_printf_float+0x40e>
 80059c6:	464b      	mov	r3, r9
 80059c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059cc:	e6dc      	b.n	8005788 <_printf_float+0x1ec>
 80059ce:	f04f 0800 	mov.w	r8, #0
 80059d2:	f104 0a1a 	add.w	sl, r4, #26
 80059d6:	e7f2      	b.n	80059be <_printf_float+0x422>
 80059d8:	2301      	movs	r3, #1
 80059da:	4642      	mov	r2, r8
 80059dc:	e7df      	b.n	800599e <_printf_float+0x402>
 80059de:	2301      	movs	r3, #1
 80059e0:	464a      	mov	r2, r9
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	f43f ae38 	beq.w	800565e <_printf_float+0xc2>
 80059ee:	f108 0801 	add.w	r8, r8, #1
 80059f2:	68e3      	ldr	r3, [r4, #12]
 80059f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059f6:	1a5b      	subs	r3, r3, r1
 80059f8:	4543      	cmp	r3, r8
 80059fa:	dcf0      	bgt.n	80059de <_printf_float+0x442>
 80059fc:	e6fa      	b.n	80057f4 <_printf_float+0x258>
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	f104 0919 	add.w	r9, r4, #25
 8005a06:	e7f4      	b.n	80059f2 <_printf_float+0x456>

08005a08 <_printf_common>:
 8005a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	4699      	mov	r9, r3
 8005a10:	688a      	ldr	r2, [r1, #8]
 8005a12:	690b      	ldr	r3, [r1, #16]
 8005a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	bfb8      	it	lt
 8005a1c:	4613      	movlt	r3, r2
 8005a1e:	6033      	str	r3, [r6, #0]
 8005a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a24:	4607      	mov	r7, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	b10a      	cbz	r2, 8005a2e <_printf_common+0x26>
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	6033      	str	r3, [r6, #0]
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	0699      	lsls	r1, r3, #26
 8005a32:	bf42      	ittt	mi
 8005a34:	6833      	ldrmi	r3, [r6, #0]
 8005a36:	3302      	addmi	r3, #2
 8005a38:	6033      	strmi	r3, [r6, #0]
 8005a3a:	6825      	ldr	r5, [r4, #0]
 8005a3c:	f015 0506 	ands.w	r5, r5, #6
 8005a40:	d106      	bne.n	8005a50 <_printf_common+0x48>
 8005a42:	f104 0a19 	add.w	sl, r4, #25
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	6832      	ldr	r2, [r6, #0]
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	dc26      	bgt.n	8005a9e <_printf_common+0x96>
 8005a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a54:	1e13      	subs	r3, r2, #0
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	bf18      	it	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	0692      	lsls	r2, r2, #26
 8005a5e:	d42b      	bmi.n	8005ab8 <_printf_common+0xb0>
 8005a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a64:	4649      	mov	r1, r9
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d01e      	beq.n	8005aac <_printf_common+0xa4>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	68e5      	ldr	r5, [r4, #12]
 8005a72:	6832      	ldr	r2, [r6, #0]
 8005a74:	f003 0306 	and.w	r3, r3, #6
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	bf08      	it	eq
 8005a7c:	1aad      	subeq	r5, r5, r2
 8005a7e:	68a3      	ldr	r3, [r4, #8]
 8005a80:	6922      	ldr	r2, [r4, #16]
 8005a82:	bf0c      	ite	eq
 8005a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a88:	2500      	movne	r5, #0
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	bfc4      	itt	gt
 8005a8e:	1a9b      	subgt	r3, r3, r2
 8005a90:	18ed      	addgt	r5, r5, r3
 8005a92:	2600      	movs	r6, #0
 8005a94:	341a      	adds	r4, #26
 8005a96:	42b5      	cmp	r5, r6
 8005a98:	d11a      	bne.n	8005ad0 <_printf_common+0xc8>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e008      	b.n	8005ab0 <_printf_common+0xa8>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	47c0      	blx	r8
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d103      	bne.n	8005ab4 <_printf_common+0xac>
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	e7c6      	b.n	8005a46 <_printf_common+0x3e>
 8005ab8:	18e1      	adds	r1, r4, r3
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	2030      	movs	r0, #48	; 0x30
 8005abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ac2:	4422      	add	r2, r4
 8005ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005acc:	3302      	adds	r3, #2
 8005ace:	e7c7      	b.n	8005a60 <_printf_common+0x58>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c0      	blx	r8
 8005ada:	3001      	adds	r0, #1
 8005adc:	d0e6      	beq.n	8005aac <_printf_common+0xa4>
 8005ade:	3601      	adds	r6, #1
 8005ae0:	e7d9      	b.n	8005a96 <_printf_common+0x8e>
	...

08005ae4 <_printf_i>:
 8005ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	7e0f      	ldrb	r7, [r1, #24]
 8005aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aec:	2f78      	cmp	r7, #120	; 0x78
 8005aee:	4691      	mov	r9, r2
 8005af0:	4680      	mov	r8, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	469a      	mov	sl, r3
 8005af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005afa:	d807      	bhi.n	8005b0c <_printf_i+0x28>
 8005afc:	2f62      	cmp	r7, #98	; 0x62
 8005afe:	d80a      	bhi.n	8005b16 <_printf_i+0x32>
 8005b00:	2f00      	cmp	r7, #0
 8005b02:	f000 80d8 	beq.w	8005cb6 <_printf_i+0x1d2>
 8005b06:	2f58      	cmp	r7, #88	; 0x58
 8005b08:	f000 80a3 	beq.w	8005c52 <_printf_i+0x16e>
 8005b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b14:	e03a      	b.n	8005b8c <_printf_i+0xa8>
 8005b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b1a:	2b15      	cmp	r3, #21
 8005b1c:	d8f6      	bhi.n	8005b0c <_printf_i+0x28>
 8005b1e:	a101      	add	r1, pc, #4	; (adr r1, 8005b24 <_printf_i+0x40>)
 8005b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b91 	.word	0x08005b91
 8005b2c:	08005b0d 	.word	0x08005b0d
 8005b30:	08005b0d 	.word	0x08005b0d
 8005b34:	08005b0d 	.word	0x08005b0d
 8005b38:	08005b0d 	.word	0x08005b0d
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005b0d 	.word	0x08005b0d
 8005b44:	08005b0d 	.word	0x08005b0d
 8005b48:	08005b0d 	.word	0x08005b0d
 8005b4c:	08005b0d 	.word	0x08005b0d
 8005b50:	08005c9d 	.word	0x08005c9d
 8005b54:	08005bc1 	.word	0x08005bc1
 8005b58:	08005c7f 	.word	0x08005c7f
 8005b5c:	08005b0d 	.word	0x08005b0d
 8005b60:	08005b0d 	.word	0x08005b0d
 8005b64:	08005cbf 	.word	0x08005cbf
 8005b68:	08005b0d 	.word	0x08005b0d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b0d 	.word	0x08005b0d
 8005b74:	08005b0d 	.word	0x08005b0d
 8005b78:	08005c87 	.word	0x08005c87
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	1d1a      	adds	r2, r3, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	602a      	str	r2, [r5, #0]
 8005b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0a3      	b.n	8005cd8 <_printf_i+0x1f4>
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	6829      	ldr	r1, [r5, #0]
 8005b94:	0606      	lsls	r6, r0, #24
 8005b96:	f101 0304 	add.w	r3, r1, #4
 8005b9a:	d50a      	bpl.n	8005bb2 <_printf_i+0xce>
 8005b9c:	680e      	ldr	r6, [r1, #0]
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	2e00      	cmp	r6, #0
 8005ba2:	da03      	bge.n	8005bac <_printf_i+0xc8>
 8005ba4:	232d      	movs	r3, #45	; 0x2d
 8005ba6:	4276      	negs	r6, r6
 8005ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bac:	485e      	ldr	r0, [pc, #376]	; (8005d28 <_printf_i+0x244>)
 8005bae:	230a      	movs	r3, #10
 8005bb0:	e019      	b.n	8005be6 <_printf_i+0x102>
 8005bb2:	680e      	ldr	r6, [r1, #0]
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bba:	bf18      	it	ne
 8005bbc:	b236      	sxthne	r6, r6
 8005bbe:	e7ef      	b.n	8005ba0 <_printf_i+0xbc>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	6820      	ldr	r0, [r4, #0]
 8005bc4:	1d19      	adds	r1, r3, #4
 8005bc6:	6029      	str	r1, [r5, #0]
 8005bc8:	0601      	lsls	r1, r0, #24
 8005bca:	d501      	bpl.n	8005bd0 <_printf_i+0xec>
 8005bcc:	681e      	ldr	r6, [r3, #0]
 8005bce:	e002      	b.n	8005bd6 <_printf_i+0xf2>
 8005bd0:	0646      	lsls	r6, r0, #25
 8005bd2:	d5fb      	bpl.n	8005bcc <_printf_i+0xe8>
 8005bd4:	881e      	ldrh	r6, [r3, #0]
 8005bd6:	4854      	ldr	r0, [pc, #336]	; (8005d28 <_printf_i+0x244>)
 8005bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bda:	bf0c      	ite	eq
 8005bdc:	2308      	moveq	r3, #8
 8005bde:	230a      	movne	r3, #10
 8005be0:	2100      	movs	r1, #0
 8005be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005be6:	6865      	ldr	r5, [r4, #4]
 8005be8:	60a5      	str	r5, [r4, #8]
 8005bea:	2d00      	cmp	r5, #0
 8005bec:	bfa2      	ittt	ge
 8005bee:	6821      	ldrge	r1, [r4, #0]
 8005bf0:	f021 0104 	bicge.w	r1, r1, #4
 8005bf4:	6021      	strge	r1, [r4, #0]
 8005bf6:	b90e      	cbnz	r6, 8005bfc <_printf_i+0x118>
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	d04d      	beq.n	8005c98 <_printf_i+0x1b4>
 8005bfc:	4615      	mov	r5, r2
 8005bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c02:	fb03 6711 	mls	r7, r3, r1, r6
 8005c06:	5dc7      	ldrb	r7, [r0, r7]
 8005c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c0c:	4637      	mov	r7, r6
 8005c0e:	42bb      	cmp	r3, r7
 8005c10:	460e      	mov	r6, r1
 8005c12:	d9f4      	bls.n	8005bfe <_printf_i+0x11a>
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d10b      	bne.n	8005c30 <_printf_i+0x14c>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	07de      	lsls	r6, r3, #31
 8005c1c:	d508      	bpl.n	8005c30 <_printf_i+0x14c>
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	6861      	ldr	r1, [r4, #4]
 8005c22:	4299      	cmp	r1, r3
 8005c24:	bfde      	ittt	le
 8005c26:	2330      	movle	r3, #48	; 0x30
 8005c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c30:	1b52      	subs	r2, r2, r5
 8005c32:	6122      	str	r2, [r4, #16]
 8005c34:	f8cd a000 	str.w	sl, [sp]
 8005c38:	464b      	mov	r3, r9
 8005c3a:	aa03      	add	r2, sp, #12
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f7ff fee2 	bl	8005a08 <_printf_common>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d14c      	bne.n	8005ce2 <_printf_i+0x1fe>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	b004      	add	sp, #16
 8005c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c52:	4835      	ldr	r0, [pc, #212]	; (8005d28 <_printf_i+0x244>)
 8005c54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c58:	6829      	ldr	r1, [r5, #0]
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c60:	6029      	str	r1, [r5, #0]
 8005c62:	061d      	lsls	r5, r3, #24
 8005c64:	d514      	bpl.n	8005c90 <_printf_i+0x1ac>
 8005c66:	07df      	lsls	r7, r3, #31
 8005c68:	bf44      	itt	mi
 8005c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c6e:	6023      	strmi	r3, [r4, #0]
 8005c70:	b91e      	cbnz	r6, 8005c7a <_printf_i+0x196>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f023 0320 	bic.w	r3, r3, #32
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	e7b0      	b.n	8005be0 <_printf_i+0xfc>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	f043 0320 	orr.w	r3, r3, #32
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	2378      	movs	r3, #120	; 0x78
 8005c88:	4828      	ldr	r0, [pc, #160]	; (8005d2c <_printf_i+0x248>)
 8005c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c8e:	e7e3      	b.n	8005c58 <_printf_i+0x174>
 8005c90:	0659      	lsls	r1, r3, #25
 8005c92:	bf48      	it	mi
 8005c94:	b2b6      	uxthmi	r6, r6
 8005c96:	e7e6      	b.n	8005c66 <_printf_i+0x182>
 8005c98:	4615      	mov	r5, r2
 8005c9a:	e7bb      	b.n	8005c14 <_printf_i+0x130>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	6826      	ldr	r6, [r4, #0]
 8005ca0:	6961      	ldr	r1, [r4, #20]
 8005ca2:	1d18      	adds	r0, r3, #4
 8005ca4:	6028      	str	r0, [r5, #0]
 8005ca6:	0635      	lsls	r5, r6, #24
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	d501      	bpl.n	8005cb0 <_printf_i+0x1cc>
 8005cac:	6019      	str	r1, [r3, #0]
 8005cae:	e002      	b.n	8005cb6 <_printf_i+0x1d2>
 8005cb0:	0670      	lsls	r0, r6, #25
 8005cb2:	d5fb      	bpl.n	8005cac <_printf_i+0x1c8>
 8005cb4:	8019      	strh	r1, [r3, #0]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	4615      	mov	r5, r2
 8005cbc:	e7ba      	b.n	8005c34 <_printf_i+0x150>
 8005cbe:	682b      	ldr	r3, [r5, #0]
 8005cc0:	1d1a      	adds	r2, r3, #4
 8005cc2:	602a      	str	r2, [r5, #0]
 8005cc4:	681d      	ldr	r5, [r3, #0]
 8005cc6:	6862      	ldr	r2, [r4, #4]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f7fa fac0 	bl	8000250 <memchr>
 8005cd0:	b108      	cbz	r0, 8005cd6 <_printf_i+0x1f2>
 8005cd2:	1b40      	subs	r0, r0, r5
 8005cd4:	6060      	str	r0, [r4, #4]
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	6123      	str	r3, [r4, #16]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce0:	e7a8      	b.n	8005c34 <_printf_i+0x150>
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	462a      	mov	r2, r5
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4640      	mov	r0, r8
 8005cea:	47d0      	blx	sl
 8005cec:	3001      	adds	r0, #1
 8005cee:	d0ab      	beq.n	8005c48 <_printf_i+0x164>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	079b      	lsls	r3, r3, #30
 8005cf4:	d413      	bmi.n	8005d1e <_printf_i+0x23a>
 8005cf6:	68e0      	ldr	r0, [r4, #12]
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	4298      	cmp	r0, r3
 8005cfc:	bfb8      	it	lt
 8005cfe:	4618      	movlt	r0, r3
 8005d00:	e7a4      	b.n	8005c4c <_printf_i+0x168>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4632      	mov	r2, r6
 8005d06:	4649      	mov	r1, r9
 8005d08:	4640      	mov	r0, r8
 8005d0a:	47d0      	blx	sl
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d09b      	beq.n	8005c48 <_printf_i+0x164>
 8005d10:	3501      	adds	r5, #1
 8005d12:	68e3      	ldr	r3, [r4, #12]
 8005d14:	9903      	ldr	r1, [sp, #12]
 8005d16:	1a5b      	subs	r3, r3, r1
 8005d18:	42ab      	cmp	r3, r5
 8005d1a:	dcf2      	bgt.n	8005d02 <_printf_i+0x21e>
 8005d1c:	e7eb      	b.n	8005cf6 <_printf_i+0x212>
 8005d1e:	2500      	movs	r5, #0
 8005d20:	f104 0619 	add.w	r6, r4, #25
 8005d24:	e7f5      	b.n	8005d12 <_printf_i+0x22e>
 8005d26:	bf00      	nop
 8005d28:	08008102 	.word	0x08008102
 8005d2c:	08008113 	.word	0x08008113

08005d30 <strtok>:
 8005d30:	4b16      	ldr	r3, [pc, #88]	; (8005d8c <strtok+0x5c>)
 8005d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d34:	681e      	ldr	r6, [r3, #0]
 8005d36:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005d38:	4605      	mov	r5, r0
 8005d3a:	b9fc      	cbnz	r4, 8005d7c <strtok+0x4c>
 8005d3c:	2050      	movs	r0, #80	; 0x50
 8005d3e:	9101      	str	r1, [sp, #4]
 8005d40:	f000 ff8e 	bl	8006c60 <malloc>
 8005d44:	9901      	ldr	r1, [sp, #4]
 8005d46:	65b0      	str	r0, [r6, #88]	; 0x58
 8005d48:	4602      	mov	r2, r0
 8005d4a:	b920      	cbnz	r0, 8005d56 <strtok+0x26>
 8005d4c:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <strtok+0x60>)
 8005d4e:	4811      	ldr	r0, [pc, #68]	; (8005d94 <strtok+0x64>)
 8005d50:	2157      	movs	r1, #87	; 0x57
 8005d52:	f000 f8d5 	bl	8005f00 <__assert_func>
 8005d56:	e9c0 4400 	strd	r4, r4, [r0]
 8005d5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005d5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005d62:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005d66:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005d6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005d6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005d72:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005d76:	6184      	str	r4, [r0, #24]
 8005d78:	7704      	strb	r4, [r0, #28]
 8005d7a:	6244      	str	r4, [r0, #36]	; 0x24
 8005d7c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4628      	mov	r0, r5
 8005d82:	b002      	add	sp, #8
 8005d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d88:	f000 b806 	b.w	8005d98 <__strtok_r>
 8005d8c:	2000000c 	.word	0x2000000c
 8005d90:	08008124 	.word	0x08008124
 8005d94:	0800813b 	.word	0x0800813b

08005d98 <__strtok_r>:
 8005d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9a:	b908      	cbnz	r0, 8005da0 <__strtok_r+0x8>
 8005d9c:	6810      	ldr	r0, [r2, #0]
 8005d9e:	b188      	cbz	r0, 8005dc4 <__strtok_r+0x2c>
 8005da0:	4604      	mov	r4, r0
 8005da2:	4620      	mov	r0, r4
 8005da4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005da8:	460f      	mov	r7, r1
 8005daa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005dae:	b91e      	cbnz	r6, 8005db8 <__strtok_r+0x20>
 8005db0:	b965      	cbnz	r5, 8005dcc <__strtok_r+0x34>
 8005db2:	6015      	str	r5, [r2, #0]
 8005db4:	4628      	mov	r0, r5
 8005db6:	e005      	b.n	8005dc4 <__strtok_r+0x2c>
 8005db8:	42b5      	cmp	r5, r6
 8005dba:	d1f6      	bne.n	8005daa <__strtok_r+0x12>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f0      	bne.n	8005da2 <__strtok_r+0xa>
 8005dc0:	6014      	str	r4, [r2, #0]
 8005dc2:	7003      	strb	r3, [r0, #0]
 8005dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	e00c      	b.n	8005de4 <__strtok_r+0x4c>
 8005dca:	b915      	cbnz	r5, 8005dd2 <__strtok_r+0x3a>
 8005dcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005dd0:	460e      	mov	r6, r1
 8005dd2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005dd6:	42ab      	cmp	r3, r5
 8005dd8:	d1f7      	bne.n	8005dca <__strtok_r+0x32>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f3      	beq.n	8005dc6 <__strtok_r+0x2e>
 8005dde:	2300      	movs	r3, #0
 8005de0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005de4:	6014      	str	r4, [r2, #0]
 8005de6:	e7ed      	b.n	8005dc4 <__strtok_r+0x2c>

08005de8 <_strtol_l.constprop.0>:
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dee:	d001      	beq.n	8005df4 <_strtol_l.constprop.0+0xc>
 8005df0:	2b24      	cmp	r3, #36	; 0x24
 8005df2:	d906      	bls.n	8005e02 <_strtol_l.constprop.0+0x1a>
 8005df4:	f7ff fb00 	bl	80053f8 <__errno>
 8005df8:	2316      	movs	r3, #22
 8005dfa:	6003      	str	r3, [r0, #0]
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005ee8 <_strtol_l.constprop.0+0x100>
 8005e06:	460d      	mov	r5, r1
 8005e08:	462e      	mov	r6, r5
 8005e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005e12:	f017 0708 	ands.w	r7, r7, #8
 8005e16:	d1f7      	bne.n	8005e08 <_strtol_l.constprop.0+0x20>
 8005e18:	2c2d      	cmp	r4, #45	; 0x2d
 8005e1a:	d132      	bne.n	8005e82 <_strtol_l.constprop.0+0x9a>
 8005e1c:	782c      	ldrb	r4, [r5, #0]
 8005e1e:	2701      	movs	r7, #1
 8005e20:	1cb5      	adds	r5, r6, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d05b      	beq.n	8005ede <_strtol_l.constprop.0+0xf6>
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d109      	bne.n	8005e3e <_strtol_l.constprop.0+0x56>
 8005e2a:	2c30      	cmp	r4, #48	; 0x30
 8005e2c:	d107      	bne.n	8005e3e <_strtol_l.constprop.0+0x56>
 8005e2e:	782c      	ldrb	r4, [r5, #0]
 8005e30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005e34:	2c58      	cmp	r4, #88	; 0x58
 8005e36:	d14d      	bne.n	8005ed4 <_strtol_l.constprop.0+0xec>
 8005e38:	786c      	ldrb	r4, [r5, #1]
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	3502      	adds	r5, #2
 8005e3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e46:	f04f 0c00 	mov.w	ip, #0
 8005e4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005e4e:	4666      	mov	r6, ip
 8005e50:	fb03 8a19 	mls	sl, r3, r9, r8
 8005e54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005e58:	f1be 0f09 	cmp.w	lr, #9
 8005e5c:	d816      	bhi.n	8005e8c <_strtol_l.constprop.0+0xa4>
 8005e5e:	4674      	mov	r4, lr
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	dd24      	ble.n	8005eae <_strtol_l.constprop.0+0xc6>
 8005e64:	f1bc 0f00 	cmp.w	ip, #0
 8005e68:	db1e      	blt.n	8005ea8 <_strtol_l.constprop.0+0xc0>
 8005e6a:	45b1      	cmp	r9, r6
 8005e6c:	d31c      	bcc.n	8005ea8 <_strtol_l.constprop.0+0xc0>
 8005e6e:	d101      	bne.n	8005e74 <_strtol_l.constprop.0+0x8c>
 8005e70:	45a2      	cmp	sl, r4
 8005e72:	db19      	blt.n	8005ea8 <_strtol_l.constprop.0+0xc0>
 8005e74:	fb06 4603 	mla	r6, r6, r3, r4
 8005e78:	f04f 0c01 	mov.w	ip, #1
 8005e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e80:	e7e8      	b.n	8005e54 <_strtol_l.constprop.0+0x6c>
 8005e82:	2c2b      	cmp	r4, #43	; 0x2b
 8005e84:	bf04      	itt	eq
 8005e86:	782c      	ldrbeq	r4, [r5, #0]
 8005e88:	1cb5      	addeq	r5, r6, #2
 8005e8a:	e7ca      	b.n	8005e22 <_strtol_l.constprop.0+0x3a>
 8005e8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005e90:	f1be 0f19 	cmp.w	lr, #25
 8005e94:	d801      	bhi.n	8005e9a <_strtol_l.constprop.0+0xb2>
 8005e96:	3c37      	subs	r4, #55	; 0x37
 8005e98:	e7e2      	b.n	8005e60 <_strtol_l.constprop.0+0x78>
 8005e9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005e9e:	f1be 0f19 	cmp.w	lr, #25
 8005ea2:	d804      	bhi.n	8005eae <_strtol_l.constprop.0+0xc6>
 8005ea4:	3c57      	subs	r4, #87	; 0x57
 8005ea6:	e7db      	b.n	8005e60 <_strtol_l.constprop.0+0x78>
 8005ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8005eac:	e7e6      	b.n	8005e7c <_strtol_l.constprop.0+0x94>
 8005eae:	f1bc 0f00 	cmp.w	ip, #0
 8005eb2:	da05      	bge.n	8005ec0 <_strtol_l.constprop.0+0xd8>
 8005eb4:	2322      	movs	r3, #34	; 0x22
 8005eb6:	6003      	str	r3, [r0, #0]
 8005eb8:	4646      	mov	r6, r8
 8005eba:	b942      	cbnz	r2, 8005ece <_strtol_l.constprop.0+0xe6>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	e79e      	b.n	8005dfe <_strtol_l.constprop.0+0x16>
 8005ec0:	b107      	cbz	r7, 8005ec4 <_strtol_l.constprop.0+0xdc>
 8005ec2:	4276      	negs	r6, r6
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	d0f9      	beq.n	8005ebc <_strtol_l.constprop.0+0xd4>
 8005ec8:	f1bc 0f00 	cmp.w	ip, #0
 8005ecc:	d000      	beq.n	8005ed0 <_strtol_l.constprop.0+0xe8>
 8005ece:	1e69      	subs	r1, r5, #1
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	e7f3      	b.n	8005ebc <_strtol_l.constprop.0+0xd4>
 8005ed4:	2430      	movs	r4, #48	; 0x30
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1b1      	bne.n	8005e3e <_strtol_l.constprop.0+0x56>
 8005eda:	2308      	movs	r3, #8
 8005edc:	e7af      	b.n	8005e3e <_strtol_l.constprop.0+0x56>
 8005ede:	2c30      	cmp	r4, #48	; 0x30
 8005ee0:	d0a5      	beq.n	8005e2e <_strtol_l.constprop.0+0x46>
 8005ee2:	230a      	movs	r3, #10
 8005ee4:	e7ab      	b.n	8005e3e <_strtol_l.constprop.0+0x56>
 8005ee6:	bf00      	nop
 8005ee8:	080081d5 	.word	0x080081d5

08005eec <strtol>:
 8005eec:	4613      	mov	r3, r2
 8005eee:	460a      	mov	r2, r1
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	4802      	ldr	r0, [pc, #8]	; (8005efc <strtol+0x10>)
 8005ef4:	6800      	ldr	r0, [r0, #0]
 8005ef6:	f7ff bf77 	b.w	8005de8 <_strtol_l.constprop.0>
 8005efa:	bf00      	nop
 8005efc:	2000000c 	.word	0x2000000c

08005f00 <__assert_func>:
 8005f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f02:	4614      	mov	r4, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <__assert_func+0x2c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	68d8      	ldr	r0, [r3, #12]
 8005f0e:	b14c      	cbz	r4, 8005f24 <__assert_func+0x24>
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <__assert_func+0x30>)
 8005f12:	9100      	str	r1, [sp, #0]
 8005f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f18:	4906      	ldr	r1, [pc, #24]	; (8005f34 <__assert_func+0x34>)
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	f000 fe8a 	bl	8006c34 <fiprintf>
 8005f20:	f001 fd58 	bl	80079d4 <abort>
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <__assert_func+0x38>)
 8005f26:	461c      	mov	r4, r3
 8005f28:	e7f3      	b.n	8005f12 <__assert_func+0x12>
 8005f2a:	bf00      	nop
 8005f2c:	2000000c 	.word	0x2000000c
 8005f30:	08008198 	.word	0x08008198
 8005f34:	080081a5 	.word	0x080081a5
 8005f38:	080081d3 	.word	0x080081d3

08005f3c <quorem>:
 8005f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	6903      	ldr	r3, [r0, #16]
 8005f42:	690c      	ldr	r4, [r1, #16]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	4607      	mov	r7, r0
 8005f48:	f2c0 8081 	blt.w	800604e <quorem+0x112>
 8005f4c:	3c01      	subs	r4, #1
 8005f4e:	f101 0814 	add.w	r8, r1, #20
 8005f52:	f100 0514 	add.w	r5, r0, #20
 8005f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f64:	3301      	adds	r3, #1
 8005f66:	429a      	cmp	r2, r3
 8005f68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f74:	d331      	bcc.n	8005fda <quorem+0x9e>
 8005f76:	f04f 0e00 	mov.w	lr, #0
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	46ac      	mov	ip, r5
 8005f7e:	46f2      	mov	sl, lr
 8005f80:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f84:	b293      	uxth	r3, r2
 8005f86:	fb06 e303 	mla	r3, r6, r3, lr
 8005f8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	ebaa 0303 	sub.w	r3, sl, r3
 8005f94:	f8dc a000 	ldr.w	sl, [ip]
 8005f98:	0c12      	lsrs	r2, r2, #16
 8005f9a:	fa13 f38a 	uxtah	r3, r3, sl
 8005f9e:	fb06 e202 	mla	r2, r6, r2, lr
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	9b00      	ldr	r3, [sp, #0]
 8005fa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005faa:	b292      	uxth	r2, r2
 8005fac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005fb8:	4581      	cmp	r9, r0
 8005fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fbe:	f84c 3b04 	str.w	r3, [ip], #4
 8005fc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fc6:	d2db      	bcs.n	8005f80 <quorem+0x44>
 8005fc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fcc:	b92b      	cbnz	r3, 8005fda <quorem+0x9e>
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	3b04      	subs	r3, #4
 8005fd2:	429d      	cmp	r5, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	d32e      	bcc.n	8006036 <quorem+0xfa>
 8005fd8:	613c      	str	r4, [r7, #16]
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f001 f8d8 	bl	8007190 <__mcmp>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	db24      	blt.n	800602e <quorem+0xf2>
 8005fe4:	3601      	adds	r6, #1
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f04f 0c00 	mov.w	ip, #0
 8005fec:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ff0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ff4:	b293      	uxth	r3, r2
 8005ff6:	ebac 0303 	sub.w	r3, ip, r3
 8005ffa:	0c12      	lsrs	r2, r2, #16
 8005ffc:	fa13 f38e 	uxtah	r3, r3, lr
 8006000:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006008:	b29b      	uxth	r3, r3
 800600a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800600e:	45c1      	cmp	r9, r8
 8006010:	f840 3b04 	str.w	r3, [r0], #4
 8006014:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006018:	d2e8      	bcs.n	8005fec <quorem+0xb0>
 800601a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800601e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006022:	b922      	cbnz	r2, 800602e <quorem+0xf2>
 8006024:	3b04      	subs	r3, #4
 8006026:	429d      	cmp	r5, r3
 8006028:	461a      	mov	r2, r3
 800602a:	d30a      	bcc.n	8006042 <quorem+0x106>
 800602c:	613c      	str	r4, [r7, #16]
 800602e:	4630      	mov	r0, r6
 8006030:	b003      	add	sp, #12
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006036:	6812      	ldr	r2, [r2, #0]
 8006038:	3b04      	subs	r3, #4
 800603a:	2a00      	cmp	r2, #0
 800603c:	d1cc      	bne.n	8005fd8 <quorem+0x9c>
 800603e:	3c01      	subs	r4, #1
 8006040:	e7c7      	b.n	8005fd2 <quorem+0x96>
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	3b04      	subs	r3, #4
 8006046:	2a00      	cmp	r2, #0
 8006048:	d1f0      	bne.n	800602c <quorem+0xf0>
 800604a:	3c01      	subs	r4, #1
 800604c:	e7eb      	b.n	8006026 <quorem+0xea>
 800604e:	2000      	movs	r0, #0
 8006050:	e7ee      	b.n	8006030 <quorem+0xf4>
 8006052:	0000      	movs	r0, r0
 8006054:	0000      	movs	r0, r0
	...

08006058 <_dtoa_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	ed2d 8b04 	vpush	{d8-d9}
 8006060:	ec57 6b10 	vmov	r6, r7, d0
 8006064:	b093      	sub	sp, #76	; 0x4c
 8006066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006068:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800606c:	9106      	str	r1, [sp, #24]
 800606e:	ee10 aa10 	vmov	sl, s0
 8006072:	4604      	mov	r4, r0
 8006074:	9209      	str	r2, [sp, #36]	; 0x24
 8006076:	930c      	str	r3, [sp, #48]	; 0x30
 8006078:	46bb      	mov	fp, r7
 800607a:	b975      	cbnz	r5, 800609a <_dtoa_r+0x42>
 800607c:	2010      	movs	r0, #16
 800607e:	f000 fdef 	bl	8006c60 <malloc>
 8006082:	4602      	mov	r2, r0
 8006084:	6260      	str	r0, [r4, #36]	; 0x24
 8006086:	b920      	cbnz	r0, 8006092 <_dtoa_r+0x3a>
 8006088:	4ba7      	ldr	r3, [pc, #668]	; (8006328 <_dtoa_r+0x2d0>)
 800608a:	21ea      	movs	r1, #234	; 0xea
 800608c:	48a7      	ldr	r0, [pc, #668]	; (800632c <_dtoa_r+0x2d4>)
 800608e:	f7ff ff37 	bl	8005f00 <__assert_func>
 8006092:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006096:	6005      	str	r5, [r0, #0]
 8006098:	60c5      	str	r5, [r0, #12]
 800609a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	b151      	cbz	r1, 80060b6 <_dtoa_r+0x5e>
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	604a      	str	r2, [r1, #4]
 80060a4:	2301      	movs	r3, #1
 80060a6:	4093      	lsls	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fe2e 	bl	8006d0c <_Bfree>
 80060b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	1e3b      	subs	r3, r7, #0
 80060b8:	bfaa      	itet	ge
 80060ba:	2300      	movge	r3, #0
 80060bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80060c0:	f8c8 3000 	strge.w	r3, [r8]
 80060c4:	4b9a      	ldr	r3, [pc, #616]	; (8006330 <_dtoa_r+0x2d8>)
 80060c6:	bfbc      	itt	lt
 80060c8:	2201      	movlt	r2, #1
 80060ca:	f8c8 2000 	strlt.w	r2, [r8]
 80060ce:	ea33 030b 	bics.w	r3, r3, fp
 80060d2:	d11b      	bne.n	800610c <_dtoa_r+0xb4>
 80060d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060e0:	4333      	orrs	r3, r6
 80060e2:	f000 8592 	beq.w	8006c0a <_dtoa_r+0xbb2>
 80060e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060e8:	b963      	cbnz	r3, 8006104 <_dtoa_r+0xac>
 80060ea:	4b92      	ldr	r3, [pc, #584]	; (8006334 <_dtoa_r+0x2dc>)
 80060ec:	e022      	b.n	8006134 <_dtoa_r+0xdc>
 80060ee:	4b92      	ldr	r3, [pc, #584]	; (8006338 <_dtoa_r+0x2e0>)
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	3308      	adds	r3, #8
 80060f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	9801      	ldr	r0, [sp, #4]
 80060fa:	b013      	add	sp, #76	; 0x4c
 80060fc:	ecbd 8b04 	vpop	{d8-d9}
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006104:	4b8b      	ldr	r3, [pc, #556]	; (8006334 <_dtoa_r+0x2dc>)
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	3303      	adds	r3, #3
 800610a:	e7f3      	b.n	80060f4 <_dtoa_r+0x9c>
 800610c:	2200      	movs	r2, #0
 800610e:	2300      	movs	r3, #0
 8006110:	4650      	mov	r0, sl
 8006112:	4659      	mov	r1, fp
 8006114:	f7fa fd10 	bl	8000b38 <__aeabi_dcmpeq>
 8006118:	ec4b ab19 	vmov	d9, sl, fp
 800611c:	4680      	mov	r8, r0
 800611e:	b158      	cbz	r0, 8006138 <_dtoa_r+0xe0>
 8006120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006122:	2301      	movs	r3, #1
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 856b 	beq.w	8006c04 <_dtoa_r+0xbac>
 800612e:	4883      	ldr	r0, [pc, #524]	; (800633c <_dtoa_r+0x2e4>)
 8006130:	6018      	str	r0, [r3, #0]
 8006132:	1e43      	subs	r3, r0, #1
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	e7df      	b.n	80060f8 <_dtoa_r+0xa0>
 8006138:	ec4b ab10 	vmov	d0, sl, fp
 800613c:	aa10      	add	r2, sp, #64	; 0x40
 800613e:	a911      	add	r1, sp, #68	; 0x44
 8006140:	4620      	mov	r0, r4
 8006142:	f001 f8cb 	bl	80072dc <__d2b>
 8006146:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800614a:	ee08 0a10 	vmov	s16, r0
 800614e:	2d00      	cmp	r5, #0
 8006150:	f000 8084 	beq.w	800625c <_dtoa_r+0x204>
 8006154:	ee19 3a90 	vmov	r3, s19
 8006158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800615c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006160:	4656      	mov	r6, sl
 8006162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800616a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800616e:	4b74      	ldr	r3, [pc, #464]	; (8006340 <_dtoa_r+0x2e8>)
 8006170:	2200      	movs	r2, #0
 8006172:	4630      	mov	r0, r6
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa f8bf 	bl	80002f8 <__aeabi_dsub>
 800617a:	a365      	add	r3, pc, #404	; (adr r3, 8006310 <_dtoa_r+0x2b8>)
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f7fa fa72 	bl	8000668 <__aeabi_dmul>
 8006184:	a364      	add	r3, pc, #400	; (adr r3, 8006318 <_dtoa_r+0x2c0>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa f8b7 	bl	80002fc <__adddf3>
 800618e:	4606      	mov	r6, r0
 8006190:	4628      	mov	r0, r5
 8006192:	460f      	mov	r7, r1
 8006194:	f7fa f9fe 	bl	8000594 <__aeabi_i2d>
 8006198:	a361      	add	r3, pc, #388	; (adr r3, 8006320 <_dtoa_r+0x2c8>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f7fa fa63 	bl	8000668 <__aeabi_dmul>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4630      	mov	r0, r6
 80061a8:	4639      	mov	r1, r7
 80061aa:	f7fa f8a7 	bl	80002fc <__adddf3>
 80061ae:	4606      	mov	r6, r0
 80061b0:	460f      	mov	r7, r1
 80061b2:	f7fa fd09 	bl	8000bc8 <__aeabi_d2iz>
 80061b6:	2200      	movs	r2, #0
 80061b8:	9000      	str	r0, [sp, #0]
 80061ba:	2300      	movs	r3, #0
 80061bc:	4630      	mov	r0, r6
 80061be:	4639      	mov	r1, r7
 80061c0:	f7fa fcc4 	bl	8000b4c <__aeabi_dcmplt>
 80061c4:	b150      	cbz	r0, 80061dc <_dtoa_r+0x184>
 80061c6:	9800      	ldr	r0, [sp, #0]
 80061c8:	f7fa f9e4 	bl	8000594 <__aeabi_i2d>
 80061cc:	4632      	mov	r2, r6
 80061ce:	463b      	mov	r3, r7
 80061d0:	f7fa fcb2 	bl	8000b38 <__aeabi_dcmpeq>
 80061d4:	b910      	cbnz	r0, 80061dc <_dtoa_r+0x184>
 80061d6:	9b00      	ldr	r3, [sp, #0]
 80061d8:	3b01      	subs	r3, #1
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	2b16      	cmp	r3, #22
 80061e0:	d85a      	bhi.n	8006298 <_dtoa_r+0x240>
 80061e2:	9a00      	ldr	r2, [sp, #0]
 80061e4:	4b57      	ldr	r3, [pc, #348]	; (8006344 <_dtoa_r+0x2ec>)
 80061e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	ec51 0b19 	vmov	r0, r1, d9
 80061f2:	f7fa fcab 	bl	8000b4c <__aeabi_dcmplt>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d050      	beq.n	800629c <_dtoa_r+0x244>
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	2300      	movs	r3, #0
 8006202:	930b      	str	r3, [sp, #44]	; 0x2c
 8006204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006206:	1b5d      	subs	r5, r3, r5
 8006208:	1e6b      	subs	r3, r5, #1
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	bf45      	ittet	mi
 800620e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006212:	9304      	strmi	r3, [sp, #16]
 8006214:	2300      	movpl	r3, #0
 8006216:	2300      	movmi	r3, #0
 8006218:	bf4c      	ite	mi
 800621a:	9305      	strmi	r3, [sp, #20]
 800621c:	9304      	strpl	r3, [sp, #16]
 800621e:	9b00      	ldr	r3, [sp, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db3d      	blt.n	80062a0 <_dtoa_r+0x248>
 8006224:	9b05      	ldr	r3, [sp, #20]
 8006226:	9a00      	ldr	r2, [sp, #0]
 8006228:	920a      	str	r2, [sp, #40]	; 0x28
 800622a:	4413      	add	r3, r2
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	2300      	movs	r3, #0
 8006230:	9307      	str	r3, [sp, #28]
 8006232:	9b06      	ldr	r3, [sp, #24]
 8006234:	2b09      	cmp	r3, #9
 8006236:	f200 8089 	bhi.w	800634c <_dtoa_r+0x2f4>
 800623a:	2b05      	cmp	r3, #5
 800623c:	bfc4      	itt	gt
 800623e:	3b04      	subgt	r3, #4
 8006240:	9306      	strgt	r3, [sp, #24]
 8006242:	9b06      	ldr	r3, [sp, #24]
 8006244:	f1a3 0302 	sub.w	r3, r3, #2
 8006248:	bfcc      	ite	gt
 800624a:	2500      	movgt	r5, #0
 800624c:	2501      	movle	r5, #1
 800624e:	2b03      	cmp	r3, #3
 8006250:	f200 8087 	bhi.w	8006362 <_dtoa_r+0x30a>
 8006254:	e8df f003 	tbb	[pc, r3]
 8006258:	59383a2d 	.word	0x59383a2d
 800625c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006260:	441d      	add	r5, r3
 8006262:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006266:	2b20      	cmp	r3, #32
 8006268:	bfc1      	itttt	gt
 800626a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800626e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006272:	fa0b f303 	lslgt.w	r3, fp, r3
 8006276:	fa26 f000 	lsrgt.w	r0, r6, r0
 800627a:	bfda      	itte	le
 800627c:	f1c3 0320 	rsble	r3, r3, #32
 8006280:	fa06 f003 	lslle.w	r0, r6, r3
 8006284:	4318      	orrgt	r0, r3
 8006286:	f7fa f975 	bl	8000574 <__aeabi_ui2d>
 800628a:	2301      	movs	r3, #1
 800628c:	4606      	mov	r6, r0
 800628e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006292:	3d01      	subs	r5, #1
 8006294:	930e      	str	r3, [sp, #56]	; 0x38
 8006296:	e76a      	b.n	800616e <_dtoa_r+0x116>
 8006298:	2301      	movs	r3, #1
 800629a:	e7b2      	b.n	8006202 <_dtoa_r+0x1aa>
 800629c:	900b      	str	r0, [sp, #44]	; 0x2c
 800629e:	e7b1      	b.n	8006204 <_dtoa_r+0x1ac>
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	9a00      	ldr	r2, [sp, #0]
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	9304      	str	r3, [sp, #16]
 80062a8:	4253      	negs	r3, r2
 80062aa:	9307      	str	r3, [sp, #28]
 80062ac:	2300      	movs	r3, #0
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	e7bf      	b.n	8006232 <_dtoa_r+0x1da>
 80062b2:	2300      	movs	r3, #0
 80062b4:	9308      	str	r3, [sp, #32]
 80062b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dc55      	bgt.n	8006368 <_dtoa_r+0x310>
 80062bc:	2301      	movs	r3, #1
 80062be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062c2:	461a      	mov	r2, r3
 80062c4:	9209      	str	r2, [sp, #36]	; 0x24
 80062c6:	e00c      	b.n	80062e2 <_dtoa_r+0x28a>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e7f3      	b.n	80062b4 <_dtoa_r+0x25c>
 80062cc:	2300      	movs	r3, #0
 80062ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d0:	9308      	str	r3, [sp, #32]
 80062d2:	9b00      	ldr	r3, [sp, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	9302      	str	r3, [sp, #8]
 80062d8:	3301      	adds	r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	9303      	str	r3, [sp, #12]
 80062de:	bfb8      	it	lt
 80062e0:	2301      	movlt	r3, #1
 80062e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062e4:	2200      	movs	r2, #0
 80062e6:	6042      	str	r2, [r0, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	f102 0614 	add.w	r6, r2, #20
 80062ee:	429e      	cmp	r6, r3
 80062f0:	6841      	ldr	r1, [r0, #4]
 80062f2:	d93d      	bls.n	8006370 <_dtoa_r+0x318>
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 fcc9 	bl	8006c8c <_Balloc>
 80062fa:	9001      	str	r0, [sp, #4]
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d13b      	bne.n	8006378 <_dtoa_r+0x320>
 8006300:	4b11      	ldr	r3, [pc, #68]	; (8006348 <_dtoa_r+0x2f0>)
 8006302:	4602      	mov	r2, r0
 8006304:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006308:	e6c0      	b.n	800608c <_dtoa_r+0x34>
 800630a:	2301      	movs	r3, #1
 800630c:	e7df      	b.n	80062ce <_dtoa_r+0x276>
 800630e:	bf00      	nop
 8006310:	636f4361 	.word	0x636f4361
 8006314:	3fd287a7 	.word	0x3fd287a7
 8006318:	8b60c8b3 	.word	0x8b60c8b3
 800631c:	3fc68a28 	.word	0x3fc68a28
 8006320:	509f79fb 	.word	0x509f79fb
 8006324:	3fd34413 	.word	0x3fd34413
 8006328:	08008124 	.word	0x08008124
 800632c:	080082e2 	.word	0x080082e2
 8006330:	7ff00000 	.word	0x7ff00000
 8006334:	080082de 	.word	0x080082de
 8006338:	080082d5 	.word	0x080082d5
 800633c:	08008101 	.word	0x08008101
 8006340:	3ff80000 	.word	0x3ff80000
 8006344:	080083d8 	.word	0x080083d8
 8006348:	0800833d 	.word	0x0800833d
 800634c:	2501      	movs	r5, #1
 800634e:	2300      	movs	r3, #0
 8006350:	9306      	str	r3, [sp, #24]
 8006352:	9508      	str	r5, [sp, #32]
 8006354:	f04f 33ff 	mov.w	r3, #4294967295
 8006358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	2312      	movs	r3, #18
 8006360:	e7b0      	b.n	80062c4 <_dtoa_r+0x26c>
 8006362:	2301      	movs	r3, #1
 8006364:	9308      	str	r3, [sp, #32]
 8006366:	e7f5      	b.n	8006354 <_dtoa_r+0x2fc>
 8006368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800636e:	e7b8      	b.n	80062e2 <_dtoa_r+0x28a>
 8006370:	3101      	adds	r1, #1
 8006372:	6041      	str	r1, [r0, #4]
 8006374:	0052      	lsls	r2, r2, #1
 8006376:	e7b8      	b.n	80062ea <_dtoa_r+0x292>
 8006378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	2b0e      	cmp	r3, #14
 8006382:	f200 809d 	bhi.w	80064c0 <_dtoa_r+0x468>
 8006386:	2d00      	cmp	r5, #0
 8006388:	f000 809a 	beq.w	80064c0 <_dtoa_r+0x468>
 800638c:	9b00      	ldr	r3, [sp, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	dd32      	ble.n	80063f8 <_dtoa_r+0x3a0>
 8006392:	4ab7      	ldr	r2, [pc, #732]	; (8006670 <_dtoa_r+0x618>)
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800639c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063a0:	9b00      	ldr	r3, [sp, #0]
 80063a2:	05d8      	lsls	r0, r3, #23
 80063a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80063a8:	d516      	bpl.n	80063d8 <_dtoa_r+0x380>
 80063aa:	4bb2      	ldr	r3, [pc, #712]	; (8006674 <_dtoa_r+0x61c>)
 80063ac:	ec51 0b19 	vmov	r0, r1, d9
 80063b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063b4:	f7fa fa82 	bl	80008bc <__aeabi_ddiv>
 80063b8:	f007 070f 	and.w	r7, r7, #15
 80063bc:	4682      	mov	sl, r0
 80063be:	468b      	mov	fp, r1
 80063c0:	2503      	movs	r5, #3
 80063c2:	4eac      	ldr	r6, [pc, #688]	; (8006674 <_dtoa_r+0x61c>)
 80063c4:	b957      	cbnz	r7, 80063dc <_dtoa_r+0x384>
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	4650      	mov	r0, sl
 80063cc:	4659      	mov	r1, fp
 80063ce:	f7fa fa75 	bl	80008bc <__aeabi_ddiv>
 80063d2:	4682      	mov	sl, r0
 80063d4:	468b      	mov	fp, r1
 80063d6:	e028      	b.n	800642a <_dtoa_r+0x3d2>
 80063d8:	2502      	movs	r5, #2
 80063da:	e7f2      	b.n	80063c2 <_dtoa_r+0x36a>
 80063dc:	07f9      	lsls	r1, r7, #31
 80063de:	d508      	bpl.n	80063f2 <_dtoa_r+0x39a>
 80063e0:	4640      	mov	r0, r8
 80063e2:	4649      	mov	r1, r9
 80063e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063e8:	f7fa f93e 	bl	8000668 <__aeabi_dmul>
 80063ec:	3501      	adds	r5, #1
 80063ee:	4680      	mov	r8, r0
 80063f0:	4689      	mov	r9, r1
 80063f2:	107f      	asrs	r7, r7, #1
 80063f4:	3608      	adds	r6, #8
 80063f6:	e7e5      	b.n	80063c4 <_dtoa_r+0x36c>
 80063f8:	f000 809b 	beq.w	8006532 <_dtoa_r+0x4da>
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	4f9d      	ldr	r7, [pc, #628]	; (8006674 <_dtoa_r+0x61c>)
 8006400:	425e      	negs	r6, r3
 8006402:	4b9b      	ldr	r3, [pc, #620]	; (8006670 <_dtoa_r+0x618>)
 8006404:	f006 020f 	and.w	r2, r6, #15
 8006408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	ec51 0b19 	vmov	r0, r1, d9
 8006414:	f7fa f928 	bl	8000668 <__aeabi_dmul>
 8006418:	1136      	asrs	r6, r6, #4
 800641a:	4682      	mov	sl, r0
 800641c:	468b      	mov	fp, r1
 800641e:	2300      	movs	r3, #0
 8006420:	2502      	movs	r5, #2
 8006422:	2e00      	cmp	r6, #0
 8006424:	d17a      	bne.n	800651c <_dtoa_r+0x4c4>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d3      	bne.n	80063d2 <_dtoa_r+0x37a>
 800642a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8082 	beq.w	8006536 <_dtoa_r+0x4de>
 8006432:	4b91      	ldr	r3, [pc, #580]	; (8006678 <_dtoa_r+0x620>)
 8006434:	2200      	movs	r2, #0
 8006436:	4650      	mov	r0, sl
 8006438:	4659      	mov	r1, fp
 800643a:	f7fa fb87 	bl	8000b4c <__aeabi_dcmplt>
 800643e:	2800      	cmp	r0, #0
 8006440:	d079      	beq.n	8006536 <_dtoa_r+0x4de>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d076      	beq.n	8006536 <_dtoa_r+0x4de>
 8006448:	9b02      	ldr	r3, [sp, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	dd36      	ble.n	80064bc <_dtoa_r+0x464>
 800644e:	9b00      	ldr	r3, [sp, #0]
 8006450:	4650      	mov	r0, sl
 8006452:	4659      	mov	r1, fp
 8006454:	1e5f      	subs	r7, r3, #1
 8006456:	2200      	movs	r2, #0
 8006458:	4b88      	ldr	r3, [pc, #544]	; (800667c <_dtoa_r+0x624>)
 800645a:	f7fa f905 	bl	8000668 <__aeabi_dmul>
 800645e:	9e02      	ldr	r6, [sp, #8]
 8006460:	4682      	mov	sl, r0
 8006462:	468b      	mov	fp, r1
 8006464:	3501      	adds	r5, #1
 8006466:	4628      	mov	r0, r5
 8006468:	f7fa f894 	bl	8000594 <__aeabi_i2d>
 800646c:	4652      	mov	r2, sl
 800646e:	465b      	mov	r3, fp
 8006470:	f7fa f8fa 	bl	8000668 <__aeabi_dmul>
 8006474:	4b82      	ldr	r3, [pc, #520]	; (8006680 <_dtoa_r+0x628>)
 8006476:	2200      	movs	r2, #0
 8006478:	f7f9 ff40 	bl	80002fc <__adddf3>
 800647c:	46d0      	mov	r8, sl
 800647e:	46d9      	mov	r9, fp
 8006480:	4682      	mov	sl, r0
 8006482:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006486:	2e00      	cmp	r6, #0
 8006488:	d158      	bne.n	800653c <_dtoa_r+0x4e4>
 800648a:	4b7e      	ldr	r3, [pc, #504]	; (8006684 <_dtoa_r+0x62c>)
 800648c:	2200      	movs	r2, #0
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7f9 ff31 	bl	80002f8 <__aeabi_dsub>
 8006496:	4652      	mov	r2, sl
 8006498:	465b      	mov	r3, fp
 800649a:	4680      	mov	r8, r0
 800649c:	4689      	mov	r9, r1
 800649e:	f7fa fb73 	bl	8000b88 <__aeabi_dcmpgt>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	f040 8295 	bne.w	80069d2 <_dtoa_r+0x97a>
 80064a8:	4652      	mov	r2, sl
 80064aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064ae:	4640      	mov	r0, r8
 80064b0:	4649      	mov	r1, r9
 80064b2:	f7fa fb4b 	bl	8000b4c <__aeabi_dcmplt>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f040 8289 	bne.w	80069ce <_dtoa_r+0x976>
 80064bc:	ec5b ab19 	vmov	sl, fp, d9
 80064c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f2c0 8148 	blt.w	8006758 <_dtoa_r+0x700>
 80064c8:	9a00      	ldr	r2, [sp, #0]
 80064ca:	2a0e      	cmp	r2, #14
 80064cc:	f300 8144 	bgt.w	8006758 <_dtoa_r+0x700>
 80064d0:	4b67      	ldr	r3, [pc, #412]	; (8006670 <_dtoa_r+0x618>)
 80064d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f280 80d5 	bge.w	800668c <_dtoa_r+0x634>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f300 80d1 	bgt.w	800668c <_dtoa_r+0x634>
 80064ea:	f040 826f 	bne.w	80069cc <_dtoa_r+0x974>
 80064ee:	4b65      	ldr	r3, [pc, #404]	; (8006684 <_dtoa_r+0x62c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	f7fa f8b7 	bl	8000668 <__aeabi_dmul>
 80064fa:	4652      	mov	r2, sl
 80064fc:	465b      	mov	r3, fp
 80064fe:	f7fa fb39 	bl	8000b74 <__aeabi_dcmpge>
 8006502:	9e03      	ldr	r6, [sp, #12]
 8006504:	4637      	mov	r7, r6
 8006506:	2800      	cmp	r0, #0
 8006508:	f040 8245 	bne.w	8006996 <_dtoa_r+0x93e>
 800650c:	9d01      	ldr	r5, [sp, #4]
 800650e:	2331      	movs	r3, #49	; 0x31
 8006510:	f805 3b01 	strb.w	r3, [r5], #1
 8006514:	9b00      	ldr	r3, [sp, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	e240      	b.n	800699e <_dtoa_r+0x946>
 800651c:	07f2      	lsls	r2, r6, #31
 800651e:	d505      	bpl.n	800652c <_dtoa_r+0x4d4>
 8006520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006524:	f7fa f8a0 	bl	8000668 <__aeabi_dmul>
 8006528:	3501      	adds	r5, #1
 800652a:	2301      	movs	r3, #1
 800652c:	1076      	asrs	r6, r6, #1
 800652e:	3708      	adds	r7, #8
 8006530:	e777      	b.n	8006422 <_dtoa_r+0x3ca>
 8006532:	2502      	movs	r5, #2
 8006534:	e779      	b.n	800642a <_dtoa_r+0x3d2>
 8006536:	9f00      	ldr	r7, [sp, #0]
 8006538:	9e03      	ldr	r6, [sp, #12]
 800653a:	e794      	b.n	8006466 <_dtoa_r+0x40e>
 800653c:	9901      	ldr	r1, [sp, #4]
 800653e:	4b4c      	ldr	r3, [pc, #304]	; (8006670 <_dtoa_r+0x618>)
 8006540:	4431      	add	r1, r6
 8006542:	910d      	str	r1, [sp, #52]	; 0x34
 8006544:	9908      	ldr	r1, [sp, #32]
 8006546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800654a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800654e:	2900      	cmp	r1, #0
 8006550:	d043      	beq.n	80065da <_dtoa_r+0x582>
 8006552:	494d      	ldr	r1, [pc, #308]	; (8006688 <_dtoa_r+0x630>)
 8006554:	2000      	movs	r0, #0
 8006556:	f7fa f9b1 	bl	80008bc <__aeabi_ddiv>
 800655a:	4652      	mov	r2, sl
 800655c:	465b      	mov	r3, fp
 800655e:	f7f9 fecb 	bl	80002f8 <__aeabi_dsub>
 8006562:	9d01      	ldr	r5, [sp, #4]
 8006564:	4682      	mov	sl, r0
 8006566:	468b      	mov	fp, r1
 8006568:	4649      	mov	r1, r9
 800656a:	4640      	mov	r0, r8
 800656c:	f7fa fb2c 	bl	8000bc8 <__aeabi_d2iz>
 8006570:	4606      	mov	r6, r0
 8006572:	f7fa f80f 	bl	8000594 <__aeabi_i2d>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7f9 febb 	bl	80002f8 <__aeabi_dsub>
 8006582:	3630      	adds	r6, #48	; 0x30
 8006584:	f805 6b01 	strb.w	r6, [r5], #1
 8006588:	4652      	mov	r2, sl
 800658a:	465b      	mov	r3, fp
 800658c:	4680      	mov	r8, r0
 800658e:	4689      	mov	r9, r1
 8006590:	f7fa fadc 	bl	8000b4c <__aeabi_dcmplt>
 8006594:	2800      	cmp	r0, #0
 8006596:	d163      	bne.n	8006660 <_dtoa_r+0x608>
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	4936      	ldr	r1, [pc, #216]	; (8006678 <_dtoa_r+0x620>)
 800659e:	2000      	movs	r0, #0
 80065a0:	f7f9 feaa 	bl	80002f8 <__aeabi_dsub>
 80065a4:	4652      	mov	r2, sl
 80065a6:	465b      	mov	r3, fp
 80065a8:	f7fa fad0 	bl	8000b4c <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f040 80b5 	bne.w	800671c <_dtoa_r+0x6c4>
 80065b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b4:	429d      	cmp	r5, r3
 80065b6:	d081      	beq.n	80064bc <_dtoa_r+0x464>
 80065b8:	4b30      	ldr	r3, [pc, #192]	; (800667c <_dtoa_r+0x624>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	4650      	mov	r0, sl
 80065be:	4659      	mov	r1, fp
 80065c0:	f7fa f852 	bl	8000668 <__aeabi_dmul>
 80065c4:	4b2d      	ldr	r3, [pc, #180]	; (800667c <_dtoa_r+0x624>)
 80065c6:	4682      	mov	sl, r0
 80065c8:	468b      	mov	fp, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	2200      	movs	r2, #0
 80065d0:	f7fa f84a 	bl	8000668 <__aeabi_dmul>
 80065d4:	4680      	mov	r8, r0
 80065d6:	4689      	mov	r9, r1
 80065d8:	e7c6      	b.n	8006568 <_dtoa_r+0x510>
 80065da:	4650      	mov	r0, sl
 80065dc:	4659      	mov	r1, fp
 80065de:	f7fa f843 	bl	8000668 <__aeabi_dmul>
 80065e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e4:	9d01      	ldr	r5, [sp, #4]
 80065e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065e8:	4682      	mov	sl, r0
 80065ea:	468b      	mov	fp, r1
 80065ec:	4649      	mov	r1, r9
 80065ee:	4640      	mov	r0, r8
 80065f0:	f7fa faea 	bl	8000bc8 <__aeabi_d2iz>
 80065f4:	4606      	mov	r6, r0
 80065f6:	f7f9 ffcd 	bl	8000594 <__aeabi_i2d>
 80065fa:	3630      	adds	r6, #48	; 0x30
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4640      	mov	r0, r8
 8006602:	4649      	mov	r1, r9
 8006604:	f7f9 fe78 	bl	80002f8 <__aeabi_dsub>
 8006608:	f805 6b01 	strb.w	r6, [r5], #1
 800660c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800660e:	429d      	cmp	r5, r3
 8006610:	4680      	mov	r8, r0
 8006612:	4689      	mov	r9, r1
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	d124      	bne.n	8006664 <_dtoa_r+0x60c>
 800661a:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <_dtoa_r+0x630>)
 800661c:	4650      	mov	r0, sl
 800661e:	4659      	mov	r1, fp
 8006620:	f7f9 fe6c 	bl	80002fc <__adddf3>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7fa faac 	bl	8000b88 <__aeabi_dcmpgt>
 8006630:	2800      	cmp	r0, #0
 8006632:	d173      	bne.n	800671c <_dtoa_r+0x6c4>
 8006634:	4652      	mov	r2, sl
 8006636:	465b      	mov	r3, fp
 8006638:	4913      	ldr	r1, [pc, #76]	; (8006688 <_dtoa_r+0x630>)
 800663a:	2000      	movs	r0, #0
 800663c:	f7f9 fe5c 	bl	80002f8 <__aeabi_dsub>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4640      	mov	r0, r8
 8006646:	4649      	mov	r1, r9
 8006648:	f7fa fa80 	bl	8000b4c <__aeabi_dcmplt>
 800664c:	2800      	cmp	r0, #0
 800664e:	f43f af35 	beq.w	80064bc <_dtoa_r+0x464>
 8006652:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006654:	1e6b      	subs	r3, r5, #1
 8006656:	930f      	str	r3, [sp, #60]	; 0x3c
 8006658:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800665c:	2b30      	cmp	r3, #48	; 0x30
 800665e:	d0f8      	beq.n	8006652 <_dtoa_r+0x5fa>
 8006660:	9700      	str	r7, [sp, #0]
 8006662:	e049      	b.n	80066f8 <_dtoa_r+0x6a0>
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <_dtoa_r+0x624>)
 8006666:	f7f9 ffff 	bl	8000668 <__aeabi_dmul>
 800666a:	4680      	mov	r8, r0
 800666c:	4689      	mov	r9, r1
 800666e:	e7bd      	b.n	80065ec <_dtoa_r+0x594>
 8006670:	080083d8 	.word	0x080083d8
 8006674:	080083b0 	.word	0x080083b0
 8006678:	3ff00000 	.word	0x3ff00000
 800667c:	40240000 	.word	0x40240000
 8006680:	401c0000 	.word	0x401c0000
 8006684:	40140000 	.word	0x40140000
 8006688:	3fe00000 	.word	0x3fe00000
 800668c:	9d01      	ldr	r5, [sp, #4]
 800668e:	4656      	mov	r6, sl
 8006690:	465f      	mov	r7, fp
 8006692:	4642      	mov	r2, r8
 8006694:	464b      	mov	r3, r9
 8006696:	4630      	mov	r0, r6
 8006698:	4639      	mov	r1, r7
 800669a:	f7fa f90f 	bl	80008bc <__aeabi_ddiv>
 800669e:	f7fa fa93 	bl	8000bc8 <__aeabi_d2iz>
 80066a2:	4682      	mov	sl, r0
 80066a4:	f7f9 ff76 	bl	8000594 <__aeabi_i2d>
 80066a8:	4642      	mov	r2, r8
 80066aa:	464b      	mov	r3, r9
 80066ac:	f7f9 ffdc 	bl	8000668 <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80066bc:	f7f9 fe1c 	bl	80002f8 <__aeabi_dsub>
 80066c0:	f805 6b01 	strb.w	r6, [r5], #1
 80066c4:	9e01      	ldr	r6, [sp, #4]
 80066c6:	9f03      	ldr	r7, [sp, #12]
 80066c8:	1bae      	subs	r6, r5, r6
 80066ca:	42b7      	cmp	r7, r6
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	d135      	bne.n	800673e <_dtoa_r+0x6e6>
 80066d2:	f7f9 fe13 	bl	80002fc <__adddf3>
 80066d6:	4642      	mov	r2, r8
 80066d8:	464b      	mov	r3, r9
 80066da:	4606      	mov	r6, r0
 80066dc:	460f      	mov	r7, r1
 80066de:	f7fa fa53 	bl	8000b88 <__aeabi_dcmpgt>
 80066e2:	b9d0      	cbnz	r0, 800671a <_dtoa_r+0x6c2>
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7fa fa24 	bl	8000b38 <__aeabi_dcmpeq>
 80066f0:	b110      	cbz	r0, 80066f8 <_dtoa_r+0x6a0>
 80066f2:	f01a 0f01 	tst.w	sl, #1
 80066f6:	d110      	bne.n	800671a <_dtoa_r+0x6c2>
 80066f8:	4620      	mov	r0, r4
 80066fa:	ee18 1a10 	vmov	r1, s16
 80066fe:	f000 fb05 	bl	8006d0c <_Bfree>
 8006702:	2300      	movs	r3, #0
 8006704:	9800      	ldr	r0, [sp, #0]
 8006706:	702b      	strb	r3, [r5, #0]
 8006708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800670a:	3001      	adds	r0, #1
 800670c:	6018      	str	r0, [r3, #0]
 800670e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006710:	2b00      	cmp	r3, #0
 8006712:	f43f acf1 	beq.w	80060f8 <_dtoa_r+0xa0>
 8006716:	601d      	str	r5, [r3, #0]
 8006718:	e4ee      	b.n	80060f8 <_dtoa_r+0xa0>
 800671a:	9f00      	ldr	r7, [sp, #0]
 800671c:	462b      	mov	r3, r5
 800671e:	461d      	mov	r5, r3
 8006720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006724:	2a39      	cmp	r2, #57	; 0x39
 8006726:	d106      	bne.n	8006736 <_dtoa_r+0x6de>
 8006728:	9a01      	ldr	r2, [sp, #4]
 800672a:	429a      	cmp	r2, r3
 800672c:	d1f7      	bne.n	800671e <_dtoa_r+0x6c6>
 800672e:	9901      	ldr	r1, [sp, #4]
 8006730:	2230      	movs	r2, #48	; 0x30
 8006732:	3701      	adds	r7, #1
 8006734:	700a      	strb	r2, [r1, #0]
 8006736:	781a      	ldrb	r2, [r3, #0]
 8006738:	3201      	adds	r2, #1
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	e790      	b.n	8006660 <_dtoa_r+0x608>
 800673e:	4ba6      	ldr	r3, [pc, #664]	; (80069d8 <_dtoa_r+0x980>)
 8006740:	2200      	movs	r2, #0
 8006742:	f7f9 ff91 	bl	8000668 <__aeabi_dmul>
 8006746:	2200      	movs	r2, #0
 8006748:	2300      	movs	r3, #0
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	f7fa f9f3 	bl	8000b38 <__aeabi_dcmpeq>
 8006752:	2800      	cmp	r0, #0
 8006754:	d09d      	beq.n	8006692 <_dtoa_r+0x63a>
 8006756:	e7cf      	b.n	80066f8 <_dtoa_r+0x6a0>
 8006758:	9a08      	ldr	r2, [sp, #32]
 800675a:	2a00      	cmp	r2, #0
 800675c:	f000 80d7 	beq.w	800690e <_dtoa_r+0x8b6>
 8006760:	9a06      	ldr	r2, [sp, #24]
 8006762:	2a01      	cmp	r2, #1
 8006764:	f300 80ba 	bgt.w	80068dc <_dtoa_r+0x884>
 8006768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800676a:	2a00      	cmp	r2, #0
 800676c:	f000 80b2 	beq.w	80068d4 <_dtoa_r+0x87c>
 8006770:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006774:	9e07      	ldr	r6, [sp, #28]
 8006776:	9d04      	ldr	r5, [sp, #16]
 8006778:	9a04      	ldr	r2, [sp, #16]
 800677a:	441a      	add	r2, r3
 800677c:	9204      	str	r2, [sp, #16]
 800677e:	9a05      	ldr	r2, [sp, #20]
 8006780:	2101      	movs	r1, #1
 8006782:	441a      	add	r2, r3
 8006784:	4620      	mov	r0, r4
 8006786:	9205      	str	r2, [sp, #20]
 8006788:	f000 fb78 	bl	8006e7c <__i2b>
 800678c:	4607      	mov	r7, r0
 800678e:	2d00      	cmp	r5, #0
 8006790:	dd0c      	ble.n	80067ac <_dtoa_r+0x754>
 8006792:	9b05      	ldr	r3, [sp, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd09      	ble.n	80067ac <_dtoa_r+0x754>
 8006798:	42ab      	cmp	r3, r5
 800679a:	9a04      	ldr	r2, [sp, #16]
 800679c:	bfa8      	it	ge
 800679e:	462b      	movge	r3, r5
 80067a0:	1ad2      	subs	r2, r2, r3
 80067a2:	9204      	str	r2, [sp, #16]
 80067a4:	9a05      	ldr	r2, [sp, #20]
 80067a6:	1aed      	subs	r5, r5, r3
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	9305      	str	r3, [sp, #20]
 80067ac:	9b07      	ldr	r3, [sp, #28]
 80067ae:	b31b      	cbz	r3, 80067f8 <_dtoa_r+0x7a0>
 80067b0:	9b08      	ldr	r3, [sp, #32]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80af 	beq.w	8006916 <_dtoa_r+0x8be>
 80067b8:	2e00      	cmp	r6, #0
 80067ba:	dd13      	ble.n	80067e4 <_dtoa_r+0x78c>
 80067bc:	4639      	mov	r1, r7
 80067be:	4632      	mov	r2, r6
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 fc1b 	bl	8006ffc <__pow5mult>
 80067c6:	ee18 2a10 	vmov	r2, s16
 80067ca:	4601      	mov	r1, r0
 80067cc:	4607      	mov	r7, r0
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fb6a 	bl	8006ea8 <__multiply>
 80067d4:	ee18 1a10 	vmov	r1, s16
 80067d8:	4680      	mov	r8, r0
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fa96 	bl	8006d0c <_Bfree>
 80067e0:	ee08 8a10 	vmov	s16, r8
 80067e4:	9b07      	ldr	r3, [sp, #28]
 80067e6:	1b9a      	subs	r2, r3, r6
 80067e8:	d006      	beq.n	80067f8 <_dtoa_r+0x7a0>
 80067ea:	ee18 1a10 	vmov	r1, s16
 80067ee:	4620      	mov	r0, r4
 80067f0:	f000 fc04 	bl	8006ffc <__pow5mult>
 80067f4:	ee08 0a10 	vmov	s16, r0
 80067f8:	2101      	movs	r1, #1
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 fb3e 	bl	8006e7c <__i2b>
 8006800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	4606      	mov	r6, r0
 8006806:	f340 8088 	ble.w	800691a <_dtoa_r+0x8c2>
 800680a:	461a      	mov	r2, r3
 800680c:	4601      	mov	r1, r0
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fbf4 	bl	8006ffc <__pow5mult>
 8006814:	9b06      	ldr	r3, [sp, #24]
 8006816:	2b01      	cmp	r3, #1
 8006818:	4606      	mov	r6, r0
 800681a:	f340 8081 	ble.w	8006920 <_dtoa_r+0x8c8>
 800681e:	f04f 0800 	mov.w	r8, #0
 8006822:	6933      	ldr	r3, [r6, #16]
 8006824:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006828:	6918      	ldr	r0, [r3, #16]
 800682a:	f000 fad7 	bl	8006ddc <__hi0bits>
 800682e:	f1c0 0020 	rsb	r0, r0, #32
 8006832:	9b05      	ldr	r3, [sp, #20]
 8006834:	4418      	add	r0, r3
 8006836:	f010 001f 	ands.w	r0, r0, #31
 800683a:	f000 8092 	beq.w	8006962 <_dtoa_r+0x90a>
 800683e:	f1c0 0320 	rsb	r3, r0, #32
 8006842:	2b04      	cmp	r3, #4
 8006844:	f340 808a 	ble.w	800695c <_dtoa_r+0x904>
 8006848:	f1c0 001c 	rsb	r0, r0, #28
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	4403      	add	r3, r0
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	4403      	add	r3, r0
 8006856:	4405      	add	r5, r0
 8006858:	9305      	str	r3, [sp, #20]
 800685a:	9b04      	ldr	r3, [sp, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd07      	ble.n	8006870 <_dtoa_r+0x818>
 8006860:	ee18 1a10 	vmov	r1, s16
 8006864:	461a      	mov	r2, r3
 8006866:	4620      	mov	r0, r4
 8006868:	f000 fc22 	bl	80070b0 <__lshift>
 800686c:	ee08 0a10 	vmov	s16, r0
 8006870:	9b05      	ldr	r3, [sp, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	dd05      	ble.n	8006882 <_dtoa_r+0x82a>
 8006876:	4631      	mov	r1, r6
 8006878:	461a      	mov	r2, r3
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fc18 	bl	80070b0 <__lshift>
 8006880:	4606      	mov	r6, r0
 8006882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d06e      	beq.n	8006966 <_dtoa_r+0x90e>
 8006888:	ee18 0a10 	vmov	r0, s16
 800688c:	4631      	mov	r1, r6
 800688e:	f000 fc7f 	bl	8007190 <__mcmp>
 8006892:	2800      	cmp	r0, #0
 8006894:	da67      	bge.n	8006966 <_dtoa_r+0x90e>
 8006896:	9b00      	ldr	r3, [sp, #0]
 8006898:	3b01      	subs	r3, #1
 800689a:	ee18 1a10 	vmov	r1, s16
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	220a      	movs	r2, #10
 80068a2:	2300      	movs	r3, #0
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 fa53 	bl	8006d50 <__multadd>
 80068aa:	9b08      	ldr	r3, [sp, #32]
 80068ac:	ee08 0a10 	vmov	s16, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 81b1 	beq.w	8006c18 <_dtoa_r+0xbc0>
 80068b6:	2300      	movs	r3, #0
 80068b8:	4639      	mov	r1, r7
 80068ba:	220a      	movs	r2, #10
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fa47 	bl	8006d50 <__multadd>
 80068c2:	9b02      	ldr	r3, [sp, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	4607      	mov	r7, r0
 80068c8:	f300 808e 	bgt.w	80069e8 <_dtoa_r+0x990>
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	dc51      	bgt.n	8006976 <_dtoa_r+0x91e>
 80068d2:	e089      	b.n	80069e8 <_dtoa_r+0x990>
 80068d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068da:	e74b      	b.n	8006774 <_dtoa_r+0x71c>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	1e5e      	subs	r6, r3, #1
 80068e0:	9b07      	ldr	r3, [sp, #28]
 80068e2:	42b3      	cmp	r3, r6
 80068e4:	bfbf      	itttt	lt
 80068e6:	9b07      	ldrlt	r3, [sp, #28]
 80068e8:	9607      	strlt	r6, [sp, #28]
 80068ea:	1af2      	sublt	r2, r6, r3
 80068ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068ee:	bfb6      	itet	lt
 80068f0:	189b      	addlt	r3, r3, r2
 80068f2:	1b9e      	subge	r6, r3, r6
 80068f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	bfb8      	it	lt
 80068fa:	2600      	movlt	r6, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bfb7      	itett	lt
 8006900:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006904:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006908:	1a9d      	sublt	r5, r3, r2
 800690a:	2300      	movlt	r3, #0
 800690c:	e734      	b.n	8006778 <_dtoa_r+0x720>
 800690e:	9e07      	ldr	r6, [sp, #28]
 8006910:	9d04      	ldr	r5, [sp, #16]
 8006912:	9f08      	ldr	r7, [sp, #32]
 8006914:	e73b      	b.n	800678e <_dtoa_r+0x736>
 8006916:	9a07      	ldr	r2, [sp, #28]
 8006918:	e767      	b.n	80067ea <_dtoa_r+0x792>
 800691a:	9b06      	ldr	r3, [sp, #24]
 800691c:	2b01      	cmp	r3, #1
 800691e:	dc18      	bgt.n	8006952 <_dtoa_r+0x8fa>
 8006920:	f1ba 0f00 	cmp.w	sl, #0
 8006924:	d115      	bne.n	8006952 <_dtoa_r+0x8fa>
 8006926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800692a:	b993      	cbnz	r3, 8006952 <_dtoa_r+0x8fa>
 800692c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006930:	0d1b      	lsrs	r3, r3, #20
 8006932:	051b      	lsls	r3, r3, #20
 8006934:	b183      	cbz	r3, 8006958 <_dtoa_r+0x900>
 8006936:	9b04      	ldr	r3, [sp, #16]
 8006938:	3301      	adds	r3, #1
 800693a:	9304      	str	r3, [sp, #16]
 800693c:	9b05      	ldr	r3, [sp, #20]
 800693e:	3301      	adds	r3, #1
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	f04f 0801 	mov.w	r8, #1
 8006946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006948:	2b00      	cmp	r3, #0
 800694a:	f47f af6a 	bne.w	8006822 <_dtoa_r+0x7ca>
 800694e:	2001      	movs	r0, #1
 8006950:	e76f      	b.n	8006832 <_dtoa_r+0x7da>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	e7f6      	b.n	8006946 <_dtoa_r+0x8ee>
 8006958:	4698      	mov	r8, r3
 800695a:	e7f4      	b.n	8006946 <_dtoa_r+0x8ee>
 800695c:	f43f af7d 	beq.w	800685a <_dtoa_r+0x802>
 8006960:	4618      	mov	r0, r3
 8006962:	301c      	adds	r0, #28
 8006964:	e772      	b.n	800684c <_dtoa_r+0x7f4>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	dc37      	bgt.n	80069dc <_dtoa_r+0x984>
 800696c:	9b06      	ldr	r3, [sp, #24]
 800696e:	2b02      	cmp	r3, #2
 8006970:	dd34      	ble.n	80069dc <_dtoa_r+0x984>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	9302      	str	r3, [sp, #8]
 8006976:	9b02      	ldr	r3, [sp, #8]
 8006978:	b96b      	cbnz	r3, 8006996 <_dtoa_r+0x93e>
 800697a:	4631      	mov	r1, r6
 800697c:	2205      	movs	r2, #5
 800697e:	4620      	mov	r0, r4
 8006980:	f000 f9e6 	bl	8006d50 <__multadd>
 8006984:	4601      	mov	r1, r0
 8006986:	4606      	mov	r6, r0
 8006988:	ee18 0a10 	vmov	r0, s16
 800698c:	f000 fc00 	bl	8007190 <__mcmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	f73f adbb 	bgt.w	800650c <_dtoa_r+0x4b4>
 8006996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006998:	9d01      	ldr	r5, [sp, #4]
 800699a:	43db      	mvns	r3, r3
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	f04f 0800 	mov.w	r8, #0
 80069a2:	4631      	mov	r1, r6
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 f9b1 	bl	8006d0c <_Bfree>
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	f43f aea4 	beq.w	80066f8 <_dtoa_r+0x6a0>
 80069b0:	f1b8 0f00 	cmp.w	r8, #0
 80069b4:	d005      	beq.n	80069c2 <_dtoa_r+0x96a>
 80069b6:	45b8      	cmp	r8, r7
 80069b8:	d003      	beq.n	80069c2 <_dtoa_r+0x96a>
 80069ba:	4641      	mov	r1, r8
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 f9a5 	bl	8006d0c <_Bfree>
 80069c2:	4639      	mov	r1, r7
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 f9a1 	bl	8006d0c <_Bfree>
 80069ca:	e695      	b.n	80066f8 <_dtoa_r+0x6a0>
 80069cc:	2600      	movs	r6, #0
 80069ce:	4637      	mov	r7, r6
 80069d0:	e7e1      	b.n	8006996 <_dtoa_r+0x93e>
 80069d2:	9700      	str	r7, [sp, #0]
 80069d4:	4637      	mov	r7, r6
 80069d6:	e599      	b.n	800650c <_dtoa_r+0x4b4>
 80069d8:	40240000 	.word	0x40240000
 80069dc:	9b08      	ldr	r3, [sp, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 80ca 	beq.w	8006b78 <_dtoa_r+0xb20>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	dd05      	ble.n	80069f8 <_dtoa_r+0x9a0>
 80069ec:	4639      	mov	r1, r7
 80069ee:	462a      	mov	r2, r5
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fb5d 	bl	80070b0 <__lshift>
 80069f6:	4607      	mov	r7, r0
 80069f8:	f1b8 0f00 	cmp.w	r8, #0
 80069fc:	d05b      	beq.n	8006ab6 <_dtoa_r+0xa5e>
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 f943 	bl	8006c8c <_Balloc>
 8006a06:	4605      	mov	r5, r0
 8006a08:	b928      	cbnz	r0, 8006a16 <_dtoa_r+0x9be>
 8006a0a:	4b87      	ldr	r3, [pc, #540]	; (8006c28 <_dtoa_r+0xbd0>)
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a12:	f7ff bb3b 	b.w	800608c <_dtoa_r+0x34>
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	3202      	adds	r2, #2
 8006a1a:	0092      	lsls	r2, r2, #2
 8006a1c:	f107 010c 	add.w	r1, r7, #12
 8006a20:	300c      	adds	r0, #12
 8006a22:	f000 f925 	bl	8006c70 <memcpy>
 8006a26:	2201      	movs	r2, #1
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 fb40 	bl	80070b0 <__lshift>
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	f103 0901 	add.w	r9, r3, #1
 8006a36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	f00a 0301 	and.w	r3, sl, #1
 8006a42:	46b8      	mov	r8, r7
 8006a44:	9304      	str	r3, [sp, #16]
 8006a46:	4607      	mov	r7, r0
 8006a48:	4631      	mov	r1, r6
 8006a4a:	ee18 0a10 	vmov	r0, s16
 8006a4e:	f7ff fa75 	bl	8005f3c <quorem>
 8006a52:	4641      	mov	r1, r8
 8006a54:	9002      	str	r0, [sp, #8]
 8006a56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a5a:	ee18 0a10 	vmov	r0, s16
 8006a5e:	f000 fb97 	bl	8007190 <__mcmp>
 8006a62:	463a      	mov	r2, r7
 8006a64:	9003      	str	r0, [sp, #12]
 8006a66:	4631      	mov	r1, r6
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fbad 	bl	80071c8 <__mdiff>
 8006a6e:	68c2      	ldr	r2, [r0, #12]
 8006a70:	f109 3bff 	add.w	fp, r9, #4294967295
 8006a74:	4605      	mov	r5, r0
 8006a76:	bb02      	cbnz	r2, 8006aba <_dtoa_r+0xa62>
 8006a78:	4601      	mov	r1, r0
 8006a7a:	ee18 0a10 	vmov	r0, s16
 8006a7e:	f000 fb87 	bl	8007190 <__mcmp>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4629      	mov	r1, r5
 8006a86:	4620      	mov	r0, r4
 8006a88:	9207      	str	r2, [sp, #28]
 8006a8a:	f000 f93f 	bl	8006d0c <_Bfree>
 8006a8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006a92:	ea43 0102 	orr.w	r1, r3, r2
 8006a96:	9b04      	ldr	r3, [sp, #16]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	464d      	mov	r5, r9
 8006a9c:	d10f      	bne.n	8006abe <_dtoa_r+0xa66>
 8006a9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006aa2:	d02a      	beq.n	8006afa <_dtoa_r+0xaa2>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dd02      	ble.n	8006ab0 <_dtoa_r+0xa58>
 8006aaa:	9b02      	ldr	r3, [sp, #8]
 8006aac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ab0:	f88b a000 	strb.w	sl, [fp]
 8006ab4:	e775      	b.n	80069a2 <_dtoa_r+0x94a>
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	e7ba      	b.n	8006a30 <_dtoa_r+0x9d8>
 8006aba:	2201      	movs	r2, #1
 8006abc:	e7e2      	b.n	8006a84 <_dtoa_r+0xa2c>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	db04      	blt.n	8006ace <_dtoa_r+0xa76>
 8006ac4:	9906      	ldr	r1, [sp, #24]
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	9904      	ldr	r1, [sp, #16]
 8006aca:	430b      	orrs	r3, r1
 8006acc:	d122      	bne.n	8006b14 <_dtoa_r+0xabc>
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	ddee      	ble.n	8006ab0 <_dtoa_r+0xa58>
 8006ad2:	ee18 1a10 	vmov	r1, s16
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fae9 	bl	80070b0 <__lshift>
 8006ade:	4631      	mov	r1, r6
 8006ae0:	ee08 0a10 	vmov	s16, r0
 8006ae4:	f000 fb54 	bl	8007190 <__mcmp>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	dc03      	bgt.n	8006af4 <_dtoa_r+0xa9c>
 8006aec:	d1e0      	bne.n	8006ab0 <_dtoa_r+0xa58>
 8006aee:	f01a 0f01 	tst.w	sl, #1
 8006af2:	d0dd      	beq.n	8006ab0 <_dtoa_r+0xa58>
 8006af4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006af8:	d1d7      	bne.n	8006aaa <_dtoa_r+0xa52>
 8006afa:	2339      	movs	r3, #57	; 0x39
 8006afc:	f88b 3000 	strb.w	r3, [fp]
 8006b00:	462b      	mov	r3, r5
 8006b02:	461d      	mov	r5, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b0a:	2a39      	cmp	r2, #57	; 0x39
 8006b0c:	d071      	beq.n	8006bf2 <_dtoa_r+0xb9a>
 8006b0e:	3201      	adds	r2, #1
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	e746      	b.n	80069a2 <_dtoa_r+0x94a>
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	dd07      	ble.n	8006b28 <_dtoa_r+0xad0>
 8006b18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b1c:	d0ed      	beq.n	8006afa <_dtoa_r+0xaa2>
 8006b1e:	f10a 0301 	add.w	r3, sl, #1
 8006b22:	f88b 3000 	strb.w	r3, [fp]
 8006b26:	e73c      	b.n	80069a2 <_dtoa_r+0x94a>
 8006b28:	9b05      	ldr	r3, [sp, #20]
 8006b2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b2e:	4599      	cmp	r9, r3
 8006b30:	d047      	beq.n	8006bc2 <_dtoa_r+0xb6a>
 8006b32:	ee18 1a10 	vmov	r1, s16
 8006b36:	2300      	movs	r3, #0
 8006b38:	220a      	movs	r2, #10
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f908 	bl	8006d50 <__multadd>
 8006b40:	45b8      	cmp	r8, r7
 8006b42:	ee08 0a10 	vmov	s16, r0
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	f04f 020a 	mov.w	r2, #10
 8006b4e:	4641      	mov	r1, r8
 8006b50:	4620      	mov	r0, r4
 8006b52:	d106      	bne.n	8006b62 <_dtoa_r+0xb0a>
 8006b54:	f000 f8fc 	bl	8006d50 <__multadd>
 8006b58:	4680      	mov	r8, r0
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	f109 0901 	add.w	r9, r9, #1
 8006b60:	e772      	b.n	8006a48 <_dtoa_r+0x9f0>
 8006b62:	f000 f8f5 	bl	8006d50 <__multadd>
 8006b66:	4639      	mov	r1, r7
 8006b68:	4680      	mov	r8, r0
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	220a      	movs	r2, #10
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 f8ee 	bl	8006d50 <__multadd>
 8006b74:	4607      	mov	r7, r0
 8006b76:	e7f1      	b.n	8006b5c <_dtoa_r+0xb04>
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	9302      	str	r3, [sp, #8]
 8006b7c:	9d01      	ldr	r5, [sp, #4]
 8006b7e:	ee18 0a10 	vmov	r0, s16
 8006b82:	4631      	mov	r1, r6
 8006b84:	f7ff f9da 	bl	8005f3c <quorem>
 8006b88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	f805 ab01 	strb.w	sl, [r5], #1
 8006b92:	1aea      	subs	r2, r5, r3
 8006b94:	9b02      	ldr	r3, [sp, #8]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	dd09      	ble.n	8006bae <_dtoa_r+0xb56>
 8006b9a:	ee18 1a10 	vmov	r1, s16
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 f8d4 	bl	8006d50 <__multadd>
 8006ba8:	ee08 0a10 	vmov	s16, r0
 8006bac:	e7e7      	b.n	8006b7e <_dtoa_r+0xb26>
 8006bae:	9b02      	ldr	r3, [sp, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bfc8      	it	gt
 8006bb4:	461d      	movgt	r5, r3
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	bfd8      	it	le
 8006bba:	2501      	movle	r5, #1
 8006bbc:	441d      	add	r5, r3
 8006bbe:	f04f 0800 	mov.w	r8, #0
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fa71 	bl	80070b0 <__lshift>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	ee08 0a10 	vmov	s16, r0
 8006bd4:	f000 fadc 	bl	8007190 <__mcmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	dc91      	bgt.n	8006b00 <_dtoa_r+0xaa8>
 8006bdc:	d102      	bne.n	8006be4 <_dtoa_r+0xb8c>
 8006bde:	f01a 0f01 	tst.w	sl, #1
 8006be2:	d18d      	bne.n	8006b00 <_dtoa_r+0xaa8>
 8006be4:	462b      	mov	r3, r5
 8006be6:	461d      	mov	r5, r3
 8006be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bec:	2a30      	cmp	r2, #48	; 0x30
 8006bee:	d0fa      	beq.n	8006be6 <_dtoa_r+0xb8e>
 8006bf0:	e6d7      	b.n	80069a2 <_dtoa_r+0x94a>
 8006bf2:	9a01      	ldr	r2, [sp, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d184      	bne.n	8006b02 <_dtoa_r+0xaaa>
 8006bf8:	9b00      	ldr	r3, [sp, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2331      	movs	r3, #49	; 0x31
 8006c00:	7013      	strb	r3, [r2, #0]
 8006c02:	e6ce      	b.n	80069a2 <_dtoa_r+0x94a>
 8006c04:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <_dtoa_r+0xbd4>)
 8006c06:	f7ff ba95 	b.w	8006134 <_dtoa_r+0xdc>
 8006c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f47f aa6e 	bne.w	80060ee <_dtoa_r+0x96>
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <_dtoa_r+0xbd8>)
 8006c14:	f7ff ba8e 	b.w	8006134 <_dtoa_r+0xdc>
 8006c18:	9b02      	ldr	r3, [sp, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dcae      	bgt.n	8006b7c <_dtoa_r+0xb24>
 8006c1e:	9b06      	ldr	r3, [sp, #24]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	f73f aea8 	bgt.w	8006976 <_dtoa_r+0x91e>
 8006c26:	e7a9      	b.n	8006b7c <_dtoa_r+0xb24>
 8006c28:	0800833d 	.word	0x0800833d
 8006c2c:	08008100 	.word	0x08008100
 8006c30:	080082d5 	.word	0x080082d5

08006c34 <fiprintf>:
 8006c34:	b40e      	push	{r1, r2, r3}
 8006c36:	b503      	push	{r0, r1, lr}
 8006c38:	4601      	mov	r1, r0
 8006c3a:	ab03      	add	r3, sp, #12
 8006c3c:	4805      	ldr	r0, [pc, #20]	; (8006c54 <fiprintf+0x20>)
 8006c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	f000 fcc5 	bl	80075d4 <_vfiprintf_r>
 8006c4a:	b002      	add	sp, #8
 8006c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c50:	b003      	add	sp, #12
 8006c52:	4770      	bx	lr
 8006c54:	2000000c 	.word	0x2000000c

08006c58 <_localeconv_r>:
 8006c58:	4800      	ldr	r0, [pc, #0]	; (8006c5c <_localeconv_r+0x4>)
 8006c5a:	4770      	bx	lr
 8006c5c:	20000160 	.word	0x20000160

08006c60 <malloc>:
 8006c60:	4b02      	ldr	r3, [pc, #8]	; (8006c6c <malloc+0xc>)
 8006c62:	4601      	mov	r1, r0
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	f000 bc17 	b.w	8007498 <_malloc_r>
 8006c6a:	bf00      	nop
 8006c6c:	2000000c 	.word	0x2000000c

08006c70 <memcpy>:
 8006c70:	440a      	add	r2, r1
 8006c72:	4291      	cmp	r1, r2
 8006c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c78:	d100      	bne.n	8006c7c <memcpy+0xc>
 8006c7a:	4770      	bx	lr
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c86:	4291      	cmp	r1, r2
 8006c88:	d1f9      	bne.n	8006c7e <memcpy+0xe>
 8006c8a:	bd10      	pop	{r4, pc}

08006c8c <_Balloc>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c90:	4604      	mov	r4, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	b976      	cbnz	r6, 8006cb4 <_Balloc+0x28>
 8006c96:	2010      	movs	r0, #16
 8006c98:	f7ff ffe2 	bl	8006c60 <malloc>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6260      	str	r0, [r4, #36]	; 0x24
 8006ca0:	b920      	cbnz	r0, 8006cac <_Balloc+0x20>
 8006ca2:	4b18      	ldr	r3, [pc, #96]	; (8006d04 <_Balloc+0x78>)
 8006ca4:	4818      	ldr	r0, [pc, #96]	; (8006d08 <_Balloc+0x7c>)
 8006ca6:	2166      	movs	r1, #102	; 0x66
 8006ca8:	f7ff f92a 	bl	8005f00 <__assert_func>
 8006cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cb0:	6006      	str	r6, [r0, #0]
 8006cb2:	60c6      	str	r6, [r0, #12]
 8006cb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cb6:	68f3      	ldr	r3, [r6, #12]
 8006cb8:	b183      	cbz	r3, 8006cdc <_Balloc+0x50>
 8006cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cc2:	b9b8      	cbnz	r0, 8006cf4 <_Balloc+0x68>
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	fa01 f605 	lsl.w	r6, r1, r5
 8006cca:	1d72      	adds	r2, r6, #5
 8006ccc:	0092      	lsls	r2, r2, #2
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 fb60 	bl	8007394 <_calloc_r>
 8006cd4:	b160      	cbz	r0, 8006cf0 <_Balloc+0x64>
 8006cd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cda:	e00e      	b.n	8006cfa <_Balloc+0x6e>
 8006cdc:	2221      	movs	r2, #33	; 0x21
 8006cde:	2104      	movs	r1, #4
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fb57 	bl	8007394 <_calloc_r>
 8006ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ce8:	60f0      	str	r0, [r6, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e4      	bne.n	8006cba <_Balloc+0x2e>
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	6802      	ldr	r2, [r0, #0]
 8006cf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d00:	e7f7      	b.n	8006cf2 <_Balloc+0x66>
 8006d02:	bf00      	nop
 8006d04:	08008124 	.word	0x08008124
 8006d08:	0800834e 	.word	0x0800834e

08006d0c <_Bfree>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d10:	4605      	mov	r5, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	b976      	cbnz	r6, 8006d34 <_Bfree+0x28>
 8006d16:	2010      	movs	r0, #16
 8006d18:	f7ff ffa2 	bl	8006c60 <malloc>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6268      	str	r0, [r5, #36]	; 0x24
 8006d20:	b920      	cbnz	r0, 8006d2c <_Bfree+0x20>
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <_Bfree+0x3c>)
 8006d24:	4809      	ldr	r0, [pc, #36]	; (8006d4c <_Bfree+0x40>)
 8006d26:	218a      	movs	r1, #138	; 0x8a
 8006d28:	f7ff f8ea 	bl	8005f00 <__assert_func>
 8006d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d30:	6006      	str	r6, [r0, #0]
 8006d32:	60c6      	str	r6, [r0, #12]
 8006d34:	b13c      	cbz	r4, 8006d46 <_Bfree+0x3a>
 8006d36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d38:	6862      	ldr	r2, [r4, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d40:	6021      	str	r1, [r4, #0]
 8006d42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	08008124 	.word	0x08008124
 8006d4c:	0800834e 	.word	0x0800834e

08006d50 <__multadd>:
 8006d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d54:	690d      	ldr	r5, [r1, #16]
 8006d56:	4607      	mov	r7, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	461e      	mov	r6, r3
 8006d5c:	f101 0c14 	add.w	ip, r1, #20
 8006d60:	2000      	movs	r0, #0
 8006d62:	f8dc 3000 	ldr.w	r3, [ip]
 8006d66:	b299      	uxth	r1, r3
 8006d68:	fb02 6101 	mla	r1, r2, r1, r6
 8006d6c:	0c1e      	lsrs	r6, r3, #16
 8006d6e:	0c0b      	lsrs	r3, r1, #16
 8006d70:	fb02 3306 	mla	r3, r2, r6, r3
 8006d74:	b289      	uxth	r1, r1
 8006d76:	3001      	adds	r0, #1
 8006d78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d7c:	4285      	cmp	r5, r0
 8006d7e:	f84c 1b04 	str.w	r1, [ip], #4
 8006d82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d86:	dcec      	bgt.n	8006d62 <__multadd+0x12>
 8006d88:	b30e      	cbz	r6, 8006dce <__multadd+0x7e>
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	42ab      	cmp	r3, r5
 8006d8e:	dc19      	bgt.n	8006dc4 <__multadd+0x74>
 8006d90:	6861      	ldr	r1, [r4, #4]
 8006d92:	4638      	mov	r0, r7
 8006d94:	3101      	adds	r1, #1
 8006d96:	f7ff ff79 	bl	8006c8c <_Balloc>
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	b928      	cbnz	r0, 8006daa <__multadd+0x5a>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <__multadd+0x84>)
 8006da2:	480d      	ldr	r0, [pc, #52]	; (8006dd8 <__multadd+0x88>)
 8006da4:	21b5      	movs	r1, #181	; 0xb5
 8006da6:	f7ff f8ab 	bl	8005f00 <__assert_func>
 8006daa:	6922      	ldr	r2, [r4, #16]
 8006dac:	3202      	adds	r2, #2
 8006dae:	f104 010c 	add.w	r1, r4, #12
 8006db2:	0092      	lsls	r2, r2, #2
 8006db4:	300c      	adds	r0, #12
 8006db6:	f7ff ff5b 	bl	8006c70 <memcpy>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff ffa5 	bl	8006d0c <_Bfree>
 8006dc2:	4644      	mov	r4, r8
 8006dc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dc8:	3501      	adds	r5, #1
 8006dca:	615e      	str	r6, [r3, #20]
 8006dcc:	6125      	str	r5, [r4, #16]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	0800833d 	.word	0x0800833d
 8006dd8:	0800834e 	.word	0x0800834e

08006ddc <__hi0bits>:
 8006ddc:	0c03      	lsrs	r3, r0, #16
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	b9d3      	cbnz	r3, 8006e18 <__hi0bits+0x3c>
 8006de2:	0400      	lsls	r0, r0, #16
 8006de4:	2310      	movs	r3, #16
 8006de6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dea:	bf04      	itt	eq
 8006dec:	0200      	lsleq	r0, r0, #8
 8006dee:	3308      	addeq	r3, #8
 8006df0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006df4:	bf04      	itt	eq
 8006df6:	0100      	lsleq	r0, r0, #4
 8006df8:	3304      	addeq	r3, #4
 8006dfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006dfe:	bf04      	itt	eq
 8006e00:	0080      	lsleq	r0, r0, #2
 8006e02:	3302      	addeq	r3, #2
 8006e04:	2800      	cmp	r0, #0
 8006e06:	db05      	blt.n	8006e14 <__hi0bits+0x38>
 8006e08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e0c:	f103 0301 	add.w	r3, r3, #1
 8006e10:	bf08      	it	eq
 8006e12:	2320      	moveq	r3, #32
 8006e14:	4618      	mov	r0, r3
 8006e16:	4770      	bx	lr
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e7e4      	b.n	8006de6 <__hi0bits+0xa>

08006e1c <__lo0bits>:
 8006e1c:	6803      	ldr	r3, [r0, #0]
 8006e1e:	f013 0207 	ands.w	r2, r3, #7
 8006e22:	4601      	mov	r1, r0
 8006e24:	d00b      	beq.n	8006e3e <__lo0bits+0x22>
 8006e26:	07da      	lsls	r2, r3, #31
 8006e28:	d423      	bmi.n	8006e72 <__lo0bits+0x56>
 8006e2a:	0798      	lsls	r0, r3, #30
 8006e2c:	bf49      	itett	mi
 8006e2e:	085b      	lsrmi	r3, r3, #1
 8006e30:	089b      	lsrpl	r3, r3, #2
 8006e32:	2001      	movmi	r0, #1
 8006e34:	600b      	strmi	r3, [r1, #0]
 8006e36:	bf5c      	itt	pl
 8006e38:	600b      	strpl	r3, [r1, #0]
 8006e3a:	2002      	movpl	r0, #2
 8006e3c:	4770      	bx	lr
 8006e3e:	b298      	uxth	r0, r3
 8006e40:	b9a8      	cbnz	r0, 8006e6e <__lo0bits+0x52>
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	2010      	movs	r0, #16
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	b90a      	cbnz	r2, 8006e4e <__lo0bits+0x32>
 8006e4a:	3008      	adds	r0, #8
 8006e4c:	0a1b      	lsrs	r3, r3, #8
 8006e4e:	071a      	lsls	r2, r3, #28
 8006e50:	bf04      	itt	eq
 8006e52:	091b      	lsreq	r3, r3, #4
 8006e54:	3004      	addeq	r0, #4
 8006e56:	079a      	lsls	r2, r3, #30
 8006e58:	bf04      	itt	eq
 8006e5a:	089b      	lsreq	r3, r3, #2
 8006e5c:	3002      	addeq	r0, #2
 8006e5e:	07da      	lsls	r2, r3, #31
 8006e60:	d403      	bmi.n	8006e6a <__lo0bits+0x4e>
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	f100 0001 	add.w	r0, r0, #1
 8006e68:	d005      	beq.n	8006e76 <__lo0bits+0x5a>
 8006e6a:	600b      	str	r3, [r1, #0]
 8006e6c:	4770      	bx	lr
 8006e6e:	4610      	mov	r0, r2
 8006e70:	e7e9      	b.n	8006e46 <__lo0bits+0x2a>
 8006e72:	2000      	movs	r0, #0
 8006e74:	4770      	bx	lr
 8006e76:	2020      	movs	r0, #32
 8006e78:	4770      	bx	lr
	...

08006e7c <__i2b>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	460c      	mov	r4, r1
 8006e80:	2101      	movs	r1, #1
 8006e82:	f7ff ff03 	bl	8006c8c <_Balloc>
 8006e86:	4602      	mov	r2, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <__i2b+0x1a>
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <__i2b+0x24>)
 8006e8c:	4805      	ldr	r0, [pc, #20]	; (8006ea4 <__i2b+0x28>)
 8006e8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e92:	f7ff f835 	bl	8005f00 <__assert_func>
 8006e96:	2301      	movs	r3, #1
 8006e98:	6144      	str	r4, [r0, #20]
 8006e9a:	6103      	str	r3, [r0, #16]
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	bf00      	nop
 8006ea0:	0800833d 	.word	0x0800833d
 8006ea4:	0800834e 	.word	0x0800834e

08006ea8 <__multiply>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	4691      	mov	r9, r2
 8006eae:	690a      	ldr	r2, [r1, #16]
 8006eb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	bfb8      	it	lt
 8006eb8:	460b      	movlt	r3, r1
 8006eba:	460c      	mov	r4, r1
 8006ebc:	bfbc      	itt	lt
 8006ebe:	464c      	movlt	r4, r9
 8006ec0:	4699      	movlt	r9, r3
 8006ec2:	6927      	ldr	r7, [r4, #16]
 8006ec4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ec8:	68a3      	ldr	r3, [r4, #8]
 8006eca:	6861      	ldr	r1, [r4, #4]
 8006ecc:	eb07 060a 	add.w	r6, r7, sl
 8006ed0:	42b3      	cmp	r3, r6
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	bfb8      	it	lt
 8006ed6:	3101      	addlt	r1, #1
 8006ed8:	f7ff fed8 	bl	8006c8c <_Balloc>
 8006edc:	b930      	cbnz	r0, 8006eec <__multiply+0x44>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b44      	ldr	r3, [pc, #272]	; (8006ff4 <__multiply+0x14c>)
 8006ee2:	4845      	ldr	r0, [pc, #276]	; (8006ff8 <__multiply+0x150>)
 8006ee4:	f240 115d 	movw	r1, #349	; 0x15d
 8006ee8:	f7ff f80a 	bl	8005f00 <__assert_func>
 8006eec:	f100 0514 	add.w	r5, r0, #20
 8006ef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	d321      	bcc.n	8006f40 <__multiply+0x98>
 8006efc:	f104 0314 	add.w	r3, r4, #20
 8006f00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f04:	f109 0314 	add.w	r3, r9, #20
 8006f08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f0c:	9202      	str	r2, [sp, #8]
 8006f0e:	1b3a      	subs	r2, r7, r4
 8006f10:	3a15      	subs	r2, #21
 8006f12:	f022 0203 	bic.w	r2, r2, #3
 8006f16:	3204      	adds	r2, #4
 8006f18:	f104 0115 	add.w	r1, r4, #21
 8006f1c:	428f      	cmp	r7, r1
 8006f1e:	bf38      	it	cc
 8006f20:	2204      	movcc	r2, #4
 8006f22:	9201      	str	r2, [sp, #4]
 8006f24:	9a02      	ldr	r2, [sp, #8]
 8006f26:	9303      	str	r3, [sp, #12]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d80c      	bhi.n	8006f46 <__multiply+0x9e>
 8006f2c:	2e00      	cmp	r6, #0
 8006f2e:	dd03      	ble.n	8006f38 <__multiply+0x90>
 8006f30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d05a      	beq.n	8006fee <__multiply+0x146>
 8006f38:	6106      	str	r6, [r0, #16]
 8006f3a:	b005      	add	sp, #20
 8006f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f40:	f843 2b04 	str.w	r2, [r3], #4
 8006f44:	e7d8      	b.n	8006ef8 <__multiply+0x50>
 8006f46:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f4a:	f1ba 0f00 	cmp.w	sl, #0
 8006f4e:	d024      	beq.n	8006f9a <__multiply+0xf2>
 8006f50:	f104 0e14 	add.w	lr, r4, #20
 8006f54:	46a9      	mov	r9, r5
 8006f56:	f04f 0c00 	mov.w	ip, #0
 8006f5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f5e:	f8d9 1000 	ldr.w	r1, [r9]
 8006f62:	fa1f fb82 	uxth.w	fp, r2
 8006f66:	b289      	uxth	r1, r1
 8006f68:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f70:	f8d9 2000 	ldr.w	r2, [r9]
 8006f74:	4461      	add	r1, ip
 8006f76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f82:	b289      	uxth	r1, r1
 8006f84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f88:	4577      	cmp	r7, lr
 8006f8a:	f849 1b04 	str.w	r1, [r9], #4
 8006f8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f92:	d8e2      	bhi.n	8006f5a <__multiply+0xb2>
 8006f94:	9a01      	ldr	r2, [sp, #4]
 8006f96:	f845 c002 	str.w	ip, [r5, r2]
 8006f9a:	9a03      	ldr	r2, [sp, #12]
 8006f9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	f1b9 0f00 	cmp.w	r9, #0
 8006fa6:	d020      	beq.n	8006fea <__multiply+0x142>
 8006fa8:	6829      	ldr	r1, [r5, #0]
 8006faa:	f104 0c14 	add.w	ip, r4, #20
 8006fae:	46ae      	mov	lr, r5
 8006fb0:	f04f 0a00 	mov.w	sl, #0
 8006fb4:	f8bc b000 	ldrh.w	fp, [ip]
 8006fb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fbc:	fb09 220b 	mla	r2, r9, fp, r2
 8006fc0:	4492      	add	sl, r2
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006fc8:	f84e 1b04 	str.w	r1, [lr], #4
 8006fcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fd0:	f8be 1000 	ldrh.w	r1, [lr]
 8006fd4:	0c12      	lsrs	r2, r2, #16
 8006fd6:	fb09 1102 	mla	r1, r9, r2, r1
 8006fda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006fde:	4567      	cmp	r7, ip
 8006fe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fe4:	d8e6      	bhi.n	8006fb4 <__multiply+0x10c>
 8006fe6:	9a01      	ldr	r2, [sp, #4]
 8006fe8:	50a9      	str	r1, [r5, r2]
 8006fea:	3504      	adds	r5, #4
 8006fec:	e79a      	b.n	8006f24 <__multiply+0x7c>
 8006fee:	3e01      	subs	r6, #1
 8006ff0:	e79c      	b.n	8006f2c <__multiply+0x84>
 8006ff2:	bf00      	nop
 8006ff4:	0800833d 	.word	0x0800833d
 8006ff8:	0800834e 	.word	0x0800834e

08006ffc <__pow5mult>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	4615      	mov	r5, r2
 8007002:	f012 0203 	ands.w	r2, r2, #3
 8007006:	4606      	mov	r6, r0
 8007008:	460f      	mov	r7, r1
 800700a:	d007      	beq.n	800701c <__pow5mult+0x20>
 800700c:	4c25      	ldr	r4, [pc, #148]	; (80070a4 <__pow5mult+0xa8>)
 800700e:	3a01      	subs	r2, #1
 8007010:	2300      	movs	r3, #0
 8007012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007016:	f7ff fe9b 	bl	8006d50 <__multadd>
 800701a:	4607      	mov	r7, r0
 800701c:	10ad      	asrs	r5, r5, #2
 800701e:	d03d      	beq.n	800709c <__pow5mult+0xa0>
 8007020:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007022:	b97c      	cbnz	r4, 8007044 <__pow5mult+0x48>
 8007024:	2010      	movs	r0, #16
 8007026:	f7ff fe1b 	bl	8006c60 <malloc>
 800702a:	4602      	mov	r2, r0
 800702c:	6270      	str	r0, [r6, #36]	; 0x24
 800702e:	b928      	cbnz	r0, 800703c <__pow5mult+0x40>
 8007030:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <__pow5mult+0xac>)
 8007032:	481e      	ldr	r0, [pc, #120]	; (80070ac <__pow5mult+0xb0>)
 8007034:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007038:	f7fe ff62 	bl	8005f00 <__assert_func>
 800703c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007040:	6004      	str	r4, [r0, #0]
 8007042:	60c4      	str	r4, [r0, #12]
 8007044:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800704c:	b94c      	cbnz	r4, 8007062 <__pow5mult+0x66>
 800704e:	f240 2171 	movw	r1, #625	; 0x271
 8007052:	4630      	mov	r0, r6
 8007054:	f7ff ff12 	bl	8006e7c <__i2b>
 8007058:	2300      	movs	r3, #0
 800705a:	f8c8 0008 	str.w	r0, [r8, #8]
 800705e:	4604      	mov	r4, r0
 8007060:	6003      	str	r3, [r0, #0]
 8007062:	f04f 0900 	mov.w	r9, #0
 8007066:	07eb      	lsls	r3, r5, #31
 8007068:	d50a      	bpl.n	8007080 <__pow5mult+0x84>
 800706a:	4639      	mov	r1, r7
 800706c:	4622      	mov	r2, r4
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff ff1a 	bl	8006ea8 <__multiply>
 8007074:	4639      	mov	r1, r7
 8007076:	4680      	mov	r8, r0
 8007078:	4630      	mov	r0, r6
 800707a:	f7ff fe47 	bl	8006d0c <_Bfree>
 800707e:	4647      	mov	r7, r8
 8007080:	106d      	asrs	r5, r5, #1
 8007082:	d00b      	beq.n	800709c <__pow5mult+0xa0>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	b938      	cbnz	r0, 8007098 <__pow5mult+0x9c>
 8007088:	4622      	mov	r2, r4
 800708a:	4621      	mov	r1, r4
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff ff0b 	bl	8006ea8 <__multiply>
 8007092:	6020      	str	r0, [r4, #0]
 8007094:	f8c0 9000 	str.w	r9, [r0]
 8007098:	4604      	mov	r4, r0
 800709a:	e7e4      	b.n	8007066 <__pow5mult+0x6a>
 800709c:	4638      	mov	r0, r7
 800709e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a2:	bf00      	nop
 80070a4:	080084a0 	.word	0x080084a0
 80070a8:	08008124 	.word	0x08008124
 80070ac:	0800834e 	.word	0x0800834e

080070b0 <__lshift>:
 80070b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	460c      	mov	r4, r1
 80070b6:	6849      	ldr	r1, [r1, #4]
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	4607      	mov	r7, r0
 80070c2:	4691      	mov	r9, r2
 80070c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070c8:	f108 0601 	add.w	r6, r8, #1
 80070cc:	42b3      	cmp	r3, r6
 80070ce:	db0b      	blt.n	80070e8 <__lshift+0x38>
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff fddb 	bl	8006c8c <_Balloc>
 80070d6:	4605      	mov	r5, r0
 80070d8:	b948      	cbnz	r0, 80070ee <__lshift+0x3e>
 80070da:	4602      	mov	r2, r0
 80070dc:	4b2a      	ldr	r3, [pc, #168]	; (8007188 <__lshift+0xd8>)
 80070de:	482b      	ldr	r0, [pc, #172]	; (800718c <__lshift+0xdc>)
 80070e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070e4:	f7fe ff0c 	bl	8005f00 <__assert_func>
 80070e8:	3101      	adds	r1, #1
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	e7ee      	b.n	80070cc <__lshift+0x1c>
 80070ee:	2300      	movs	r3, #0
 80070f0:	f100 0114 	add.w	r1, r0, #20
 80070f4:	f100 0210 	add.w	r2, r0, #16
 80070f8:	4618      	mov	r0, r3
 80070fa:	4553      	cmp	r3, sl
 80070fc:	db37      	blt.n	800716e <__lshift+0xbe>
 80070fe:	6920      	ldr	r0, [r4, #16]
 8007100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007104:	f104 0314 	add.w	r3, r4, #20
 8007108:	f019 091f 	ands.w	r9, r9, #31
 800710c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007110:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007114:	d02f      	beq.n	8007176 <__lshift+0xc6>
 8007116:	f1c9 0e20 	rsb	lr, r9, #32
 800711a:	468a      	mov	sl, r1
 800711c:	f04f 0c00 	mov.w	ip, #0
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	fa02 f209 	lsl.w	r2, r2, r9
 8007126:	ea42 020c 	orr.w	r2, r2, ip
 800712a:	f84a 2b04 	str.w	r2, [sl], #4
 800712e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007132:	4298      	cmp	r0, r3
 8007134:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007138:	d8f2      	bhi.n	8007120 <__lshift+0x70>
 800713a:	1b03      	subs	r3, r0, r4
 800713c:	3b15      	subs	r3, #21
 800713e:	f023 0303 	bic.w	r3, r3, #3
 8007142:	3304      	adds	r3, #4
 8007144:	f104 0215 	add.w	r2, r4, #21
 8007148:	4290      	cmp	r0, r2
 800714a:	bf38      	it	cc
 800714c:	2304      	movcc	r3, #4
 800714e:	f841 c003 	str.w	ip, [r1, r3]
 8007152:	f1bc 0f00 	cmp.w	ip, #0
 8007156:	d001      	beq.n	800715c <__lshift+0xac>
 8007158:	f108 0602 	add.w	r6, r8, #2
 800715c:	3e01      	subs	r6, #1
 800715e:	4638      	mov	r0, r7
 8007160:	612e      	str	r6, [r5, #16]
 8007162:	4621      	mov	r1, r4
 8007164:	f7ff fdd2 	bl	8006d0c <_Bfree>
 8007168:	4628      	mov	r0, r5
 800716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007172:	3301      	adds	r3, #1
 8007174:	e7c1      	b.n	80070fa <__lshift+0x4a>
 8007176:	3904      	subs	r1, #4
 8007178:	f853 2b04 	ldr.w	r2, [r3], #4
 800717c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007180:	4298      	cmp	r0, r3
 8007182:	d8f9      	bhi.n	8007178 <__lshift+0xc8>
 8007184:	e7ea      	b.n	800715c <__lshift+0xac>
 8007186:	bf00      	nop
 8007188:	0800833d 	.word	0x0800833d
 800718c:	0800834e 	.word	0x0800834e

08007190 <__mcmp>:
 8007190:	b530      	push	{r4, r5, lr}
 8007192:	6902      	ldr	r2, [r0, #16]
 8007194:	690c      	ldr	r4, [r1, #16]
 8007196:	1b12      	subs	r2, r2, r4
 8007198:	d10e      	bne.n	80071b8 <__mcmp+0x28>
 800719a:	f100 0314 	add.w	r3, r0, #20
 800719e:	3114      	adds	r1, #20
 80071a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071b0:	42a5      	cmp	r5, r4
 80071b2:	d003      	beq.n	80071bc <__mcmp+0x2c>
 80071b4:	d305      	bcc.n	80071c2 <__mcmp+0x32>
 80071b6:	2201      	movs	r2, #1
 80071b8:	4610      	mov	r0, r2
 80071ba:	bd30      	pop	{r4, r5, pc}
 80071bc:	4283      	cmp	r3, r0
 80071be:	d3f3      	bcc.n	80071a8 <__mcmp+0x18>
 80071c0:	e7fa      	b.n	80071b8 <__mcmp+0x28>
 80071c2:	f04f 32ff 	mov.w	r2, #4294967295
 80071c6:	e7f7      	b.n	80071b8 <__mcmp+0x28>

080071c8 <__mdiff>:
 80071c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	460c      	mov	r4, r1
 80071ce:	4606      	mov	r6, r0
 80071d0:	4611      	mov	r1, r2
 80071d2:	4620      	mov	r0, r4
 80071d4:	4690      	mov	r8, r2
 80071d6:	f7ff ffdb 	bl	8007190 <__mcmp>
 80071da:	1e05      	subs	r5, r0, #0
 80071dc:	d110      	bne.n	8007200 <__mdiff+0x38>
 80071de:	4629      	mov	r1, r5
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7ff fd53 	bl	8006c8c <_Balloc>
 80071e6:	b930      	cbnz	r0, 80071f6 <__mdiff+0x2e>
 80071e8:	4b3a      	ldr	r3, [pc, #232]	; (80072d4 <__mdiff+0x10c>)
 80071ea:	4602      	mov	r2, r0
 80071ec:	f240 2132 	movw	r1, #562	; 0x232
 80071f0:	4839      	ldr	r0, [pc, #228]	; (80072d8 <__mdiff+0x110>)
 80071f2:	f7fe fe85 	bl	8005f00 <__assert_func>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007200:	bfa4      	itt	ge
 8007202:	4643      	movge	r3, r8
 8007204:	46a0      	movge	r8, r4
 8007206:	4630      	mov	r0, r6
 8007208:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800720c:	bfa6      	itte	ge
 800720e:	461c      	movge	r4, r3
 8007210:	2500      	movge	r5, #0
 8007212:	2501      	movlt	r5, #1
 8007214:	f7ff fd3a 	bl	8006c8c <_Balloc>
 8007218:	b920      	cbnz	r0, 8007224 <__mdiff+0x5c>
 800721a:	4b2e      	ldr	r3, [pc, #184]	; (80072d4 <__mdiff+0x10c>)
 800721c:	4602      	mov	r2, r0
 800721e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007222:	e7e5      	b.n	80071f0 <__mdiff+0x28>
 8007224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007228:	6926      	ldr	r6, [r4, #16]
 800722a:	60c5      	str	r5, [r0, #12]
 800722c:	f104 0914 	add.w	r9, r4, #20
 8007230:	f108 0514 	add.w	r5, r8, #20
 8007234:	f100 0e14 	add.w	lr, r0, #20
 8007238:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800723c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007240:	f108 0210 	add.w	r2, r8, #16
 8007244:	46f2      	mov	sl, lr
 8007246:	2100      	movs	r1, #0
 8007248:	f859 3b04 	ldr.w	r3, [r9], #4
 800724c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007250:	fa1f f883 	uxth.w	r8, r3
 8007254:	fa11 f18b 	uxtah	r1, r1, fp
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	eba1 0808 	sub.w	r8, r1, r8
 800725e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007262:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007266:	fa1f f888 	uxth.w	r8, r8
 800726a:	1419      	asrs	r1, r3, #16
 800726c:	454e      	cmp	r6, r9
 800726e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007272:	f84a 3b04 	str.w	r3, [sl], #4
 8007276:	d8e7      	bhi.n	8007248 <__mdiff+0x80>
 8007278:	1b33      	subs	r3, r6, r4
 800727a:	3b15      	subs	r3, #21
 800727c:	f023 0303 	bic.w	r3, r3, #3
 8007280:	3304      	adds	r3, #4
 8007282:	3415      	adds	r4, #21
 8007284:	42a6      	cmp	r6, r4
 8007286:	bf38      	it	cc
 8007288:	2304      	movcc	r3, #4
 800728a:	441d      	add	r5, r3
 800728c:	4473      	add	r3, lr
 800728e:	469e      	mov	lr, r3
 8007290:	462e      	mov	r6, r5
 8007292:	4566      	cmp	r6, ip
 8007294:	d30e      	bcc.n	80072b4 <__mdiff+0xec>
 8007296:	f10c 0203 	add.w	r2, ip, #3
 800729a:	1b52      	subs	r2, r2, r5
 800729c:	f022 0203 	bic.w	r2, r2, #3
 80072a0:	3d03      	subs	r5, #3
 80072a2:	45ac      	cmp	ip, r5
 80072a4:	bf38      	it	cc
 80072a6:	2200      	movcc	r2, #0
 80072a8:	441a      	add	r2, r3
 80072aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80072ae:	b17b      	cbz	r3, 80072d0 <__mdiff+0x108>
 80072b0:	6107      	str	r7, [r0, #16]
 80072b2:	e7a3      	b.n	80071fc <__mdiff+0x34>
 80072b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80072b8:	fa11 f288 	uxtah	r2, r1, r8
 80072bc:	1414      	asrs	r4, r2, #16
 80072be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072c2:	b292      	uxth	r2, r2
 80072c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072c8:	f84e 2b04 	str.w	r2, [lr], #4
 80072cc:	1421      	asrs	r1, r4, #16
 80072ce:	e7e0      	b.n	8007292 <__mdiff+0xca>
 80072d0:	3f01      	subs	r7, #1
 80072d2:	e7ea      	b.n	80072aa <__mdiff+0xe2>
 80072d4:	0800833d 	.word	0x0800833d
 80072d8:	0800834e 	.word	0x0800834e

080072dc <__d2b>:
 80072dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	4689      	mov	r9, r1
 80072e2:	2101      	movs	r1, #1
 80072e4:	ec57 6b10 	vmov	r6, r7, d0
 80072e8:	4690      	mov	r8, r2
 80072ea:	f7ff fccf 	bl	8006c8c <_Balloc>
 80072ee:	4604      	mov	r4, r0
 80072f0:	b930      	cbnz	r0, 8007300 <__d2b+0x24>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b25      	ldr	r3, [pc, #148]	; (800738c <__d2b+0xb0>)
 80072f6:	4826      	ldr	r0, [pc, #152]	; (8007390 <__d2b+0xb4>)
 80072f8:	f240 310a 	movw	r1, #778	; 0x30a
 80072fc:	f7fe fe00 	bl	8005f00 <__assert_func>
 8007300:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007308:	bb35      	cbnz	r5, 8007358 <__d2b+0x7c>
 800730a:	2e00      	cmp	r6, #0
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	d028      	beq.n	8007362 <__d2b+0x86>
 8007310:	4668      	mov	r0, sp
 8007312:	9600      	str	r6, [sp, #0]
 8007314:	f7ff fd82 	bl	8006e1c <__lo0bits>
 8007318:	9900      	ldr	r1, [sp, #0]
 800731a:	b300      	cbz	r0, 800735e <__d2b+0x82>
 800731c:	9a01      	ldr	r2, [sp, #4]
 800731e:	f1c0 0320 	rsb	r3, r0, #32
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	430b      	orrs	r3, r1
 8007328:	40c2      	lsrs	r2, r0
 800732a:	6163      	str	r3, [r4, #20]
 800732c:	9201      	str	r2, [sp, #4]
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	61a3      	str	r3, [r4, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	bf14      	ite	ne
 8007336:	2202      	movne	r2, #2
 8007338:	2201      	moveq	r2, #1
 800733a:	6122      	str	r2, [r4, #16]
 800733c:	b1d5      	cbz	r5, 8007374 <__d2b+0x98>
 800733e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007342:	4405      	add	r5, r0
 8007344:	f8c9 5000 	str.w	r5, [r9]
 8007348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800734c:	f8c8 0000 	str.w	r0, [r8]
 8007350:	4620      	mov	r0, r4
 8007352:	b003      	add	sp, #12
 8007354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800735c:	e7d5      	b.n	800730a <__d2b+0x2e>
 800735e:	6161      	str	r1, [r4, #20]
 8007360:	e7e5      	b.n	800732e <__d2b+0x52>
 8007362:	a801      	add	r0, sp, #4
 8007364:	f7ff fd5a 	bl	8006e1c <__lo0bits>
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	6163      	str	r3, [r4, #20]
 800736c:	2201      	movs	r2, #1
 800736e:	6122      	str	r2, [r4, #16]
 8007370:	3020      	adds	r0, #32
 8007372:	e7e3      	b.n	800733c <__d2b+0x60>
 8007374:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800737c:	f8c9 0000 	str.w	r0, [r9]
 8007380:	6918      	ldr	r0, [r3, #16]
 8007382:	f7ff fd2b 	bl	8006ddc <__hi0bits>
 8007386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800738a:	e7df      	b.n	800734c <__d2b+0x70>
 800738c:	0800833d 	.word	0x0800833d
 8007390:	0800834e 	.word	0x0800834e

08007394 <_calloc_r>:
 8007394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007396:	fba1 2402 	umull	r2, r4, r1, r2
 800739a:	b94c      	cbnz	r4, 80073b0 <_calloc_r+0x1c>
 800739c:	4611      	mov	r1, r2
 800739e:	9201      	str	r2, [sp, #4]
 80073a0:	f000 f87a 	bl	8007498 <_malloc_r>
 80073a4:	9a01      	ldr	r2, [sp, #4]
 80073a6:	4605      	mov	r5, r0
 80073a8:	b930      	cbnz	r0, 80073b8 <_calloc_r+0x24>
 80073aa:	4628      	mov	r0, r5
 80073ac:	b003      	add	sp, #12
 80073ae:	bd30      	pop	{r4, r5, pc}
 80073b0:	220c      	movs	r2, #12
 80073b2:	6002      	str	r2, [r0, #0]
 80073b4:	2500      	movs	r5, #0
 80073b6:	e7f8      	b.n	80073aa <_calloc_r+0x16>
 80073b8:	4621      	mov	r1, r4
 80073ba:	f7fe f847 	bl	800544c <memset>
 80073be:	e7f4      	b.n	80073aa <_calloc_r+0x16>

080073c0 <_free_r>:
 80073c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073c2:	2900      	cmp	r1, #0
 80073c4:	d044      	beq.n	8007450 <_free_r+0x90>
 80073c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ca:	9001      	str	r0, [sp, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f1a1 0404 	sub.w	r4, r1, #4
 80073d2:	bfb8      	it	lt
 80073d4:	18e4      	addlt	r4, r4, r3
 80073d6:	f000 fd37 	bl	8007e48 <__malloc_lock>
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <_free_r+0x94>)
 80073dc:	9801      	ldr	r0, [sp, #4]
 80073de:	6813      	ldr	r3, [r2, #0]
 80073e0:	b933      	cbnz	r3, 80073f0 <_free_r+0x30>
 80073e2:	6063      	str	r3, [r4, #4]
 80073e4:	6014      	str	r4, [r2, #0]
 80073e6:	b003      	add	sp, #12
 80073e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073ec:	f000 bd32 	b.w	8007e54 <__malloc_unlock>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d908      	bls.n	8007406 <_free_r+0x46>
 80073f4:	6825      	ldr	r5, [r4, #0]
 80073f6:	1961      	adds	r1, r4, r5
 80073f8:	428b      	cmp	r3, r1
 80073fa:	bf01      	itttt	eq
 80073fc:	6819      	ldreq	r1, [r3, #0]
 80073fe:	685b      	ldreq	r3, [r3, #4]
 8007400:	1949      	addeq	r1, r1, r5
 8007402:	6021      	streq	r1, [r4, #0]
 8007404:	e7ed      	b.n	80073e2 <_free_r+0x22>
 8007406:	461a      	mov	r2, r3
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	b10b      	cbz	r3, 8007410 <_free_r+0x50>
 800740c:	42a3      	cmp	r3, r4
 800740e:	d9fa      	bls.n	8007406 <_free_r+0x46>
 8007410:	6811      	ldr	r1, [r2, #0]
 8007412:	1855      	adds	r5, r2, r1
 8007414:	42a5      	cmp	r5, r4
 8007416:	d10b      	bne.n	8007430 <_free_r+0x70>
 8007418:	6824      	ldr	r4, [r4, #0]
 800741a:	4421      	add	r1, r4
 800741c:	1854      	adds	r4, r2, r1
 800741e:	42a3      	cmp	r3, r4
 8007420:	6011      	str	r1, [r2, #0]
 8007422:	d1e0      	bne.n	80073e6 <_free_r+0x26>
 8007424:	681c      	ldr	r4, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	6053      	str	r3, [r2, #4]
 800742a:	4421      	add	r1, r4
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	e7da      	b.n	80073e6 <_free_r+0x26>
 8007430:	d902      	bls.n	8007438 <_free_r+0x78>
 8007432:	230c      	movs	r3, #12
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	e7d6      	b.n	80073e6 <_free_r+0x26>
 8007438:	6825      	ldr	r5, [r4, #0]
 800743a:	1961      	adds	r1, r4, r5
 800743c:	428b      	cmp	r3, r1
 800743e:	bf04      	itt	eq
 8007440:	6819      	ldreq	r1, [r3, #0]
 8007442:	685b      	ldreq	r3, [r3, #4]
 8007444:	6063      	str	r3, [r4, #4]
 8007446:	bf04      	itt	eq
 8007448:	1949      	addeq	r1, r1, r5
 800744a:	6021      	streq	r1, [r4, #0]
 800744c:	6054      	str	r4, [r2, #4]
 800744e:	e7ca      	b.n	80073e6 <_free_r+0x26>
 8007450:	b003      	add	sp, #12
 8007452:	bd30      	pop	{r4, r5, pc}
 8007454:	2000042c 	.word	0x2000042c

08007458 <sbrk_aligned>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	4e0e      	ldr	r6, [pc, #56]	; (8007494 <sbrk_aligned+0x3c>)
 800745c:	460c      	mov	r4, r1
 800745e:	6831      	ldr	r1, [r6, #0]
 8007460:	4605      	mov	r5, r0
 8007462:	b911      	cbnz	r1, 800746a <sbrk_aligned+0x12>
 8007464:	f000 f9e6 	bl	8007834 <_sbrk_r>
 8007468:	6030      	str	r0, [r6, #0]
 800746a:	4621      	mov	r1, r4
 800746c:	4628      	mov	r0, r5
 800746e:	f000 f9e1 	bl	8007834 <_sbrk_r>
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	d00a      	beq.n	800748c <sbrk_aligned+0x34>
 8007476:	1cc4      	adds	r4, r0, #3
 8007478:	f024 0403 	bic.w	r4, r4, #3
 800747c:	42a0      	cmp	r0, r4
 800747e:	d007      	beq.n	8007490 <sbrk_aligned+0x38>
 8007480:	1a21      	subs	r1, r4, r0
 8007482:	4628      	mov	r0, r5
 8007484:	f000 f9d6 	bl	8007834 <_sbrk_r>
 8007488:	3001      	adds	r0, #1
 800748a:	d101      	bne.n	8007490 <sbrk_aligned+0x38>
 800748c:	f04f 34ff 	mov.w	r4, #4294967295
 8007490:	4620      	mov	r0, r4
 8007492:	bd70      	pop	{r4, r5, r6, pc}
 8007494:	20000430 	.word	0x20000430

08007498 <_malloc_r>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	1ccd      	adds	r5, r1, #3
 800749e:	f025 0503 	bic.w	r5, r5, #3
 80074a2:	3508      	adds	r5, #8
 80074a4:	2d0c      	cmp	r5, #12
 80074a6:	bf38      	it	cc
 80074a8:	250c      	movcc	r5, #12
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	4607      	mov	r7, r0
 80074ae:	db01      	blt.n	80074b4 <_malloc_r+0x1c>
 80074b0:	42a9      	cmp	r1, r5
 80074b2:	d905      	bls.n	80074c0 <_malloc_r+0x28>
 80074b4:	230c      	movs	r3, #12
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	2600      	movs	r6, #0
 80074ba:	4630      	mov	r0, r6
 80074bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c0:	4e2e      	ldr	r6, [pc, #184]	; (800757c <_malloc_r+0xe4>)
 80074c2:	f000 fcc1 	bl	8007e48 <__malloc_lock>
 80074c6:	6833      	ldr	r3, [r6, #0]
 80074c8:	461c      	mov	r4, r3
 80074ca:	bb34      	cbnz	r4, 800751a <_malloc_r+0x82>
 80074cc:	4629      	mov	r1, r5
 80074ce:	4638      	mov	r0, r7
 80074d0:	f7ff ffc2 	bl	8007458 <sbrk_aligned>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	4604      	mov	r4, r0
 80074d8:	d14d      	bne.n	8007576 <_malloc_r+0xde>
 80074da:	6834      	ldr	r4, [r6, #0]
 80074dc:	4626      	mov	r6, r4
 80074de:	2e00      	cmp	r6, #0
 80074e0:	d140      	bne.n	8007564 <_malloc_r+0xcc>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	4631      	mov	r1, r6
 80074e6:	4638      	mov	r0, r7
 80074e8:	eb04 0803 	add.w	r8, r4, r3
 80074ec:	f000 f9a2 	bl	8007834 <_sbrk_r>
 80074f0:	4580      	cmp	r8, r0
 80074f2:	d13a      	bne.n	800756a <_malloc_r+0xd2>
 80074f4:	6821      	ldr	r1, [r4, #0]
 80074f6:	3503      	adds	r5, #3
 80074f8:	1a6d      	subs	r5, r5, r1
 80074fa:	f025 0503 	bic.w	r5, r5, #3
 80074fe:	3508      	adds	r5, #8
 8007500:	2d0c      	cmp	r5, #12
 8007502:	bf38      	it	cc
 8007504:	250c      	movcc	r5, #12
 8007506:	4629      	mov	r1, r5
 8007508:	4638      	mov	r0, r7
 800750a:	f7ff ffa5 	bl	8007458 <sbrk_aligned>
 800750e:	3001      	adds	r0, #1
 8007510:	d02b      	beq.n	800756a <_malloc_r+0xd2>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	442b      	add	r3, r5
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	e00e      	b.n	8007538 <_malloc_r+0xa0>
 800751a:	6822      	ldr	r2, [r4, #0]
 800751c:	1b52      	subs	r2, r2, r5
 800751e:	d41e      	bmi.n	800755e <_malloc_r+0xc6>
 8007520:	2a0b      	cmp	r2, #11
 8007522:	d916      	bls.n	8007552 <_malloc_r+0xba>
 8007524:	1961      	adds	r1, r4, r5
 8007526:	42a3      	cmp	r3, r4
 8007528:	6025      	str	r5, [r4, #0]
 800752a:	bf18      	it	ne
 800752c:	6059      	strne	r1, [r3, #4]
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	bf08      	it	eq
 8007532:	6031      	streq	r1, [r6, #0]
 8007534:	5162      	str	r2, [r4, r5]
 8007536:	604b      	str	r3, [r1, #4]
 8007538:	4638      	mov	r0, r7
 800753a:	f104 060b 	add.w	r6, r4, #11
 800753e:	f000 fc89 	bl	8007e54 <__malloc_unlock>
 8007542:	f026 0607 	bic.w	r6, r6, #7
 8007546:	1d23      	adds	r3, r4, #4
 8007548:	1af2      	subs	r2, r6, r3
 800754a:	d0b6      	beq.n	80074ba <_malloc_r+0x22>
 800754c:	1b9b      	subs	r3, r3, r6
 800754e:	50a3      	str	r3, [r4, r2]
 8007550:	e7b3      	b.n	80074ba <_malloc_r+0x22>
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	42a3      	cmp	r3, r4
 8007556:	bf0c      	ite	eq
 8007558:	6032      	streq	r2, [r6, #0]
 800755a:	605a      	strne	r2, [r3, #4]
 800755c:	e7ec      	b.n	8007538 <_malloc_r+0xa0>
 800755e:	4623      	mov	r3, r4
 8007560:	6864      	ldr	r4, [r4, #4]
 8007562:	e7b2      	b.n	80074ca <_malloc_r+0x32>
 8007564:	4634      	mov	r4, r6
 8007566:	6876      	ldr	r6, [r6, #4]
 8007568:	e7b9      	b.n	80074de <_malloc_r+0x46>
 800756a:	230c      	movs	r3, #12
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	4638      	mov	r0, r7
 8007570:	f000 fc70 	bl	8007e54 <__malloc_unlock>
 8007574:	e7a1      	b.n	80074ba <_malloc_r+0x22>
 8007576:	6025      	str	r5, [r4, #0]
 8007578:	e7de      	b.n	8007538 <_malloc_r+0xa0>
 800757a:	bf00      	nop
 800757c:	2000042c 	.word	0x2000042c

08007580 <__sfputc_r>:
 8007580:	6893      	ldr	r3, [r2, #8]
 8007582:	3b01      	subs	r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	b410      	push	{r4}
 8007588:	6093      	str	r3, [r2, #8]
 800758a:	da08      	bge.n	800759e <__sfputc_r+0x1e>
 800758c:	6994      	ldr	r4, [r2, #24]
 800758e:	42a3      	cmp	r3, r4
 8007590:	db01      	blt.n	8007596 <__sfputc_r+0x16>
 8007592:	290a      	cmp	r1, #10
 8007594:	d103      	bne.n	800759e <__sfputc_r+0x1e>
 8007596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800759a:	f000 b95b 	b.w	8007854 <__swbuf_r>
 800759e:	6813      	ldr	r3, [r2, #0]
 80075a0:	1c58      	adds	r0, r3, #1
 80075a2:	6010      	str	r0, [r2, #0]
 80075a4:	7019      	strb	r1, [r3, #0]
 80075a6:	4608      	mov	r0, r1
 80075a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <__sfputs_r>:
 80075ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b0:	4606      	mov	r6, r0
 80075b2:	460f      	mov	r7, r1
 80075b4:	4614      	mov	r4, r2
 80075b6:	18d5      	adds	r5, r2, r3
 80075b8:	42ac      	cmp	r4, r5
 80075ba:	d101      	bne.n	80075c0 <__sfputs_r+0x12>
 80075bc:	2000      	movs	r0, #0
 80075be:	e007      	b.n	80075d0 <__sfputs_r+0x22>
 80075c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c4:	463a      	mov	r2, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	f7ff ffda 	bl	8007580 <__sfputc_r>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d1f3      	bne.n	80075b8 <__sfputs_r+0xa>
 80075d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075d4 <_vfiprintf_r>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	460d      	mov	r5, r1
 80075da:	b09d      	sub	sp, #116	; 0x74
 80075dc:	4614      	mov	r4, r2
 80075de:	4698      	mov	r8, r3
 80075e0:	4606      	mov	r6, r0
 80075e2:	b118      	cbz	r0, 80075ec <_vfiprintf_r+0x18>
 80075e4:	6983      	ldr	r3, [r0, #24]
 80075e6:	b90b      	cbnz	r3, 80075ec <_vfiprintf_r+0x18>
 80075e8:	f000 fb16 	bl	8007c18 <__sinit>
 80075ec:	4b89      	ldr	r3, [pc, #548]	; (8007814 <_vfiprintf_r+0x240>)
 80075ee:	429d      	cmp	r5, r3
 80075f0:	d11b      	bne.n	800762a <_vfiprintf_r+0x56>
 80075f2:	6875      	ldr	r5, [r6, #4]
 80075f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	d405      	bmi.n	8007606 <_vfiprintf_r+0x32>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	059a      	lsls	r2, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_vfiprintf_r+0x32>
 8007600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007602:	f000 fba7 	bl	8007d54 <__retarget_lock_acquire_recursive>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	071b      	lsls	r3, r3, #28
 800760a:	d501      	bpl.n	8007610 <_vfiprintf_r+0x3c>
 800760c:	692b      	ldr	r3, [r5, #16]
 800760e:	b9eb      	cbnz	r3, 800764c <_vfiprintf_r+0x78>
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f000 f970 	bl	80078f8 <__swsetup_r>
 8007618:	b1c0      	cbz	r0, 800764c <_vfiprintf_r+0x78>
 800761a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800761c:	07dc      	lsls	r4, r3, #31
 800761e:	d50e      	bpl.n	800763e <_vfiprintf_r+0x6a>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b01d      	add	sp, #116	; 0x74
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	4b7b      	ldr	r3, [pc, #492]	; (8007818 <_vfiprintf_r+0x244>)
 800762c:	429d      	cmp	r5, r3
 800762e:	d101      	bne.n	8007634 <_vfiprintf_r+0x60>
 8007630:	68b5      	ldr	r5, [r6, #8]
 8007632:	e7df      	b.n	80075f4 <_vfiprintf_r+0x20>
 8007634:	4b79      	ldr	r3, [pc, #484]	; (800781c <_vfiprintf_r+0x248>)
 8007636:	429d      	cmp	r5, r3
 8007638:	bf08      	it	eq
 800763a:	68f5      	ldreq	r5, [r6, #12]
 800763c:	e7da      	b.n	80075f4 <_vfiprintf_r+0x20>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	0598      	lsls	r0, r3, #22
 8007642:	d4ed      	bmi.n	8007620 <_vfiprintf_r+0x4c>
 8007644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007646:	f000 fb86 	bl	8007d56 <__retarget_lock_release_recursive>
 800764a:	e7e9      	b.n	8007620 <_vfiprintf_r+0x4c>
 800764c:	2300      	movs	r3, #0
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
 8007650:	2320      	movs	r3, #32
 8007652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007656:	f8cd 800c 	str.w	r8, [sp, #12]
 800765a:	2330      	movs	r3, #48	; 0x30
 800765c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007820 <_vfiprintf_r+0x24c>
 8007660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007664:	f04f 0901 	mov.w	r9, #1
 8007668:	4623      	mov	r3, r4
 800766a:	469a      	mov	sl, r3
 800766c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007670:	b10a      	cbz	r2, 8007676 <_vfiprintf_r+0xa2>
 8007672:	2a25      	cmp	r2, #37	; 0x25
 8007674:	d1f9      	bne.n	800766a <_vfiprintf_r+0x96>
 8007676:	ebba 0b04 	subs.w	fp, sl, r4
 800767a:	d00b      	beq.n	8007694 <_vfiprintf_r+0xc0>
 800767c:	465b      	mov	r3, fp
 800767e:	4622      	mov	r2, r4
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff ff93 	bl	80075ae <__sfputs_r>
 8007688:	3001      	adds	r0, #1
 800768a:	f000 80aa 	beq.w	80077e2 <_vfiprintf_r+0x20e>
 800768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007690:	445a      	add	r2, fp
 8007692:	9209      	str	r2, [sp, #36]	; 0x24
 8007694:	f89a 3000 	ldrb.w	r3, [sl]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80a2 	beq.w	80077e2 <_vfiprintf_r+0x20e>
 800769e:	2300      	movs	r3, #0
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295
 80076a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a8:	f10a 0a01 	add.w	sl, sl, #1
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b4:	931a      	str	r3, [sp, #104]	; 0x68
 80076b6:	4654      	mov	r4, sl
 80076b8:	2205      	movs	r2, #5
 80076ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076be:	4858      	ldr	r0, [pc, #352]	; (8007820 <_vfiprintf_r+0x24c>)
 80076c0:	f7f8 fdc6 	bl	8000250 <memchr>
 80076c4:	9a04      	ldr	r2, [sp, #16]
 80076c6:	b9d8      	cbnz	r0, 8007700 <_vfiprintf_r+0x12c>
 80076c8:	06d1      	lsls	r1, r2, #27
 80076ca:	bf44      	itt	mi
 80076cc:	2320      	movmi	r3, #32
 80076ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d2:	0713      	lsls	r3, r2, #28
 80076d4:	bf44      	itt	mi
 80076d6:	232b      	movmi	r3, #43	; 0x2b
 80076d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b2a      	cmp	r3, #42	; 0x2a
 80076e2:	d015      	beq.n	8007710 <_vfiprintf_r+0x13c>
 80076e4:	9a07      	ldr	r2, [sp, #28]
 80076e6:	4654      	mov	r4, sl
 80076e8:	2000      	movs	r0, #0
 80076ea:	f04f 0c0a 	mov.w	ip, #10
 80076ee:	4621      	mov	r1, r4
 80076f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f4:	3b30      	subs	r3, #48	; 0x30
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d94e      	bls.n	8007798 <_vfiprintf_r+0x1c4>
 80076fa:	b1b0      	cbz	r0, 800772a <_vfiprintf_r+0x156>
 80076fc:	9207      	str	r2, [sp, #28]
 80076fe:	e014      	b.n	800772a <_vfiprintf_r+0x156>
 8007700:	eba0 0308 	sub.w	r3, r0, r8
 8007704:	fa09 f303 	lsl.w	r3, r9, r3
 8007708:	4313      	orrs	r3, r2
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	46a2      	mov	sl, r4
 800770e:	e7d2      	b.n	80076b6 <_vfiprintf_r+0xe2>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	1d19      	adds	r1, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	9103      	str	r1, [sp, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bfbb      	ittet	lt
 800771c:	425b      	neglt	r3, r3
 800771e:	f042 0202 	orrlt.w	r2, r2, #2
 8007722:	9307      	strge	r3, [sp, #28]
 8007724:	9307      	strlt	r3, [sp, #28]
 8007726:	bfb8      	it	lt
 8007728:	9204      	strlt	r2, [sp, #16]
 800772a:	7823      	ldrb	r3, [r4, #0]
 800772c:	2b2e      	cmp	r3, #46	; 0x2e
 800772e:	d10c      	bne.n	800774a <_vfiprintf_r+0x176>
 8007730:	7863      	ldrb	r3, [r4, #1]
 8007732:	2b2a      	cmp	r3, #42	; 0x2a
 8007734:	d135      	bne.n	80077a2 <_vfiprintf_r+0x1ce>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	9203      	str	r2, [sp, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	bfb8      	it	lt
 8007742:	f04f 33ff 	movlt.w	r3, #4294967295
 8007746:	3402      	adds	r4, #2
 8007748:	9305      	str	r3, [sp, #20]
 800774a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007830 <_vfiprintf_r+0x25c>
 800774e:	7821      	ldrb	r1, [r4, #0]
 8007750:	2203      	movs	r2, #3
 8007752:	4650      	mov	r0, sl
 8007754:	f7f8 fd7c 	bl	8000250 <memchr>
 8007758:	b140      	cbz	r0, 800776c <_vfiprintf_r+0x198>
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	eba0 000a 	sub.w	r0, r0, sl
 8007760:	fa03 f000 	lsl.w	r0, r3, r0
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	4303      	orrs	r3, r0
 8007768:	3401      	adds	r4, #1
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007770:	482c      	ldr	r0, [pc, #176]	; (8007824 <_vfiprintf_r+0x250>)
 8007772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007776:	2206      	movs	r2, #6
 8007778:	f7f8 fd6a 	bl	8000250 <memchr>
 800777c:	2800      	cmp	r0, #0
 800777e:	d03f      	beq.n	8007800 <_vfiprintf_r+0x22c>
 8007780:	4b29      	ldr	r3, [pc, #164]	; (8007828 <_vfiprintf_r+0x254>)
 8007782:	bb1b      	cbnz	r3, 80077cc <_vfiprintf_r+0x1f8>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	3307      	adds	r3, #7
 8007788:	f023 0307 	bic.w	r3, r3, #7
 800778c:	3308      	adds	r3, #8
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	443b      	add	r3, r7
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
 8007796:	e767      	b.n	8007668 <_vfiprintf_r+0x94>
 8007798:	fb0c 3202 	mla	r2, ip, r2, r3
 800779c:	460c      	mov	r4, r1
 800779e:	2001      	movs	r0, #1
 80077a0:	e7a5      	b.n	80076ee <_vfiprintf_r+0x11a>
 80077a2:	2300      	movs	r3, #0
 80077a4:	3401      	adds	r4, #1
 80077a6:	9305      	str	r3, [sp, #20]
 80077a8:	4619      	mov	r1, r3
 80077aa:	f04f 0c0a 	mov.w	ip, #10
 80077ae:	4620      	mov	r0, r4
 80077b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b4:	3a30      	subs	r2, #48	; 0x30
 80077b6:	2a09      	cmp	r2, #9
 80077b8:	d903      	bls.n	80077c2 <_vfiprintf_r+0x1ee>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0c5      	beq.n	800774a <_vfiprintf_r+0x176>
 80077be:	9105      	str	r1, [sp, #20]
 80077c0:	e7c3      	b.n	800774a <_vfiprintf_r+0x176>
 80077c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c6:	4604      	mov	r4, r0
 80077c8:	2301      	movs	r3, #1
 80077ca:	e7f0      	b.n	80077ae <_vfiprintf_r+0x1da>
 80077cc:	ab03      	add	r3, sp, #12
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	462a      	mov	r2, r5
 80077d2:	4b16      	ldr	r3, [pc, #88]	; (800782c <_vfiprintf_r+0x258>)
 80077d4:	a904      	add	r1, sp, #16
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7fd fee0 	bl	800559c <_printf_float>
 80077dc:	4607      	mov	r7, r0
 80077de:	1c78      	adds	r0, r7, #1
 80077e0:	d1d6      	bne.n	8007790 <_vfiprintf_r+0x1bc>
 80077e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077e4:	07d9      	lsls	r1, r3, #31
 80077e6:	d405      	bmi.n	80077f4 <_vfiprintf_r+0x220>
 80077e8:	89ab      	ldrh	r3, [r5, #12]
 80077ea:	059a      	lsls	r2, r3, #22
 80077ec:	d402      	bmi.n	80077f4 <_vfiprintf_r+0x220>
 80077ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077f0:	f000 fab1 	bl	8007d56 <__retarget_lock_release_recursive>
 80077f4:	89ab      	ldrh	r3, [r5, #12]
 80077f6:	065b      	lsls	r3, r3, #25
 80077f8:	f53f af12 	bmi.w	8007620 <_vfiprintf_r+0x4c>
 80077fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077fe:	e711      	b.n	8007624 <_vfiprintf_r+0x50>
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	462a      	mov	r2, r5
 8007806:	4b09      	ldr	r3, [pc, #36]	; (800782c <_vfiprintf_r+0x258>)
 8007808:	a904      	add	r1, sp, #16
 800780a:	4630      	mov	r0, r6
 800780c:	f7fe f96a 	bl	8005ae4 <_printf_i>
 8007810:	e7e4      	b.n	80077dc <_vfiprintf_r+0x208>
 8007812:	bf00      	nop
 8007814:	080084e0 	.word	0x080084e0
 8007818:	08008500 	.word	0x08008500
 800781c:	080084c0 	.word	0x080084c0
 8007820:	080084ac 	.word	0x080084ac
 8007824:	080084b6 	.word	0x080084b6
 8007828:	0800559d 	.word	0x0800559d
 800782c:	080075af 	.word	0x080075af
 8007830:	080084b2 	.word	0x080084b2

08007834 <_sbrk_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d06      	ldr	r5, [pc, #24]	; (8007850 <_sbrk_r+0x1c>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	f7fa f836 	bl	80018b0 <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_sbrk_r+0x1a>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_sbrk_r+0x1a>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20000438 	.word	0x20000438

08007854 <__swbuf_r>:
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	460e      	mov	r6, r1
 8007858:	4614      	mov	r4, r2
 800785a:	4605      	mov	r5, r0
 800785c:	b118      	cbz	r0, 8007866 <__swbuf_r+0x12>
 800785e:	6983      	ldr	r3, [r0, #24]
 8007860:	b90b      	cbnz	r3, 8007866 <__swbuf_r+0x12>
 8007862:	f000 f9d9 	bl	8007c18 <__sinit>
 8007866:	4b21      	ldr	r3, [pc, #132]	; (80078ec <__swbuf_r+0x98>)
 8007868:	429c      	cmp	r4, r3
 800786a:	d12b      	bne.n	80078c4 <__swbuf_r+0x70>
 800786c:	686c      	ldr	r4, [r5, #4]
 800786e:	69a3      	ldr	r3, [r4, #24]
 8007870:	60a3      	str	r3, [r4, #8]
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	071a      	lsls	r2, r3, #28
 8007876:	d52f      	bpl.n	80078d8 <__swbuf_r+0x84>
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	b36b      	cbz	r3, 80078d8 <__swbuf_r+0x84>
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	1ac0      	subs	r0, r0, r3
 8007882:	6963      	ldr	r3, [r4, #20]
 8007884:	b2f6      	uxtb	r6, r6
 8007886:	4283      	cmp	r3, r0
 8007888:	4637      	mov	r7, r6
 800788a:	dc04      	bgt.n	8007896 <__swbuf_r+0x42>
 800788c:	4621      	mov	r1, r4
 800788e:	4628      	mov	r0, r5
 8007890:	f000 f92e 	bl	8007af0 <_fflush_r>
 8007894:	bb30      	cbnz	r0, 80078e4 <__swbuf_r+0x90>
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	3b01      	subs	r3, #1
 800789a:	60a3      	str	r3, [r4, #8]
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	6022      	str	r2, [r4, #0]
 80078a2:	701e      	strb	r6, [r3, #0]
 80078a4:	6963      	ldr	r3, [r4, #20]
 80078a6:	3001      	adds	r0, #1
 80078a8:	4283      	cmp	r3, r0
 80078aa:	d004      	beq.n	80078b6 <__swbuf_r+0x62>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	07db      	lsls	r3, r3, #31
 80078b0:	d506      	bpl.n	80078c0 <__swbuf_r+0x6c>
 80078b2:	2e0a      	cmp	r6, #10
 80078b4:	d104      	bne.n	80078c0 <__swbuf_r+0x6c>
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f919 	bl	8007af0 <_fflush_r>
 80078be:	b988      	cbnz	r0, 80078e4 <__swbuf_r+0x90>
 80078c0:	4638      	mov	r0, r7
 80078c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <__swbuf_r+0x9c>)
 80078c6:	429c      	cmp	r4, r3
 80078c8:	d101      	bne.n	80078ce <__swbuf_r+0x7a>
 80078ca:	68ac      	ldr	r4, [r5, #8]
 80078cc:	e7cf      	b.n	800786e <__swbuf_r+0x1a>
 80078ce:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <__swbuf_r+0xa0>)
 80078d0:	429c      	cmp	r4, r3
 80078d2:	bf08      	it	eq
 80078d4:	68ec      	ldreq	r4, [r5, #12]
 80078d6:	e7ca      	b.n	800786e <__swbuf_r+0x1a>
 80078d8:	4621      	mov	r1, r4
 80078da:	4628      	mov	r0, r5
 80078dc:	f000 f80c 	bl	80078f8 <__swsetup_r>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d0cb      	beq.n	800787c <__swbuf_r+0x28>
 80078e4:	f04f 37ff 	mov.w	r7, #4294967295
 80078e8:	e7ea      	b.n	80078c0 <__swbuf_r+0x6c>
 80078ea:	bf00      	nop
 80078ec:	080084e0 	.word	0x080084e0
 80078f0:	08008500 	.word	0x08008500
 80078f4:	080084c0 	.word	0x080084c0

080078f8 <__swsetup_r>:
 80078f8:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <__swsetup_r+0xcc>)
 80078fa:	b570      	push	{r4, r5, r6, lr}
 80078fc:	681d      	ldr	r5, [r3, #0]
 80078fe:	4606      	mov	r6, r0
 8007900:	460c      	mov	r4, r1
 8007902:	b125      	cbz	r5, 800790e <__swsetup_r+0x16>
 8007904:	69ab      	ldr	r3, [r5, #24]
 8007906:	b913      	cbnz	r3, 800790e <__swsetup_r+0x16>
 8007908:	4628      	mov	r0, r5
 800790a:	f000 f985 	bl	8007c18 <__sinit>
 800790e:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <__swsetup_r+0xd0>)
 8007910:	429c      	cmp	r4, r3
 8007912:	d10f      	bne.n	8007934 <__swsetup_r+0x3c>
 8007914:	686c      	ldr	r4, [r5, #4]
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800791c:	0719      	lsls	r1, r3, #28
 800791e:	d42c      	bmi.n	800797a <__swsetup_r+0x82>
 8007920:	06dd      	lsls	r5, r3, #27
 8007922:	d411      	bmi.n	8007948 <__swsetup_r+0x50>
 8007924:	2309      	movs	r3, #9
 8007926:	6033      	str	r3, [r6, #0]
 8007928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295
 8007932:	e03e      	b.n	80079b2 <__swsetup_r+0xba>
 8007934:	4b25      	ldr	r3, [pc, #148]	; (80079cc <__swsetup_r+0xd4>)
 8007936:	429c      	cmp	r4, r3
 8007938:	d101      	bne.n	800793e <__swsetup_r+0x46>
 800793a:	68ac      	ldr	r4, [r5, #8]
 800793c:	e7eb      	b.n	8007916 <__swsetup_r+0x1e>
 800793e:	4b24      	ldr	r3, [pc, #144]	; (80079d0 <__swsetup_r+0xd8>)
 8007940:	429c      	cmp	r4, r3
 8007942:	bf08      	it	eq
 8007944:	68ec      	ldreq	r4, [r5, #12]
 8007946:	e7e6      	b.n	8007916 <__swsetup_r+0x1e>
 8007948:	0758      	lsls	r0, r3, #29
 800794a:	d512      	bpl.n	8007972 <__swsetup_r+0x7a>
 800794c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794e:	b141      	cbz	r1, 8007962 <__swsetup_r+0x6a>
 8007950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007954:	4299      	cmp	r1, r3
 8007956:	d002      	beq.n	800795e <__swsetup_r+0x66>
 8007958:	4630      	mov	r0, r6
 800795a:	f7ff fd31 	bl	80073c0 <_free_r>
 800795e:	2300      	movs	r3, #0
 8007960:	6363      	str	r3, [r4, #52]	; 0x34
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	2300      	movs	r3, #0
 800796c:	6063      	str	r3, [r4, #4]
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f043 0308 	orr.w	r3, r3, #8
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	b94b      	cbnz	r3, 8007992 <__swsetup_r+0x9a>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007988:	d003      	beq.n	8007992 <__swsetup_r+0x9a>
 800798a:	4621      	mov	r1, r4
 800798c:	4630      	mov	r0, r6
 800798e:	f000 fa09 	bl	8007da4 <__smakebuf_r>
 8007992:	89a0      	ldrh	r0, [r4, #12]
 8007994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007998:	f010 0301 	ands.w	r3, r0, #1
 800799c:	d00a      	beq.n	80079b4 <__swsetup_r+0xbc>
 800799e:	2300      	movs	r3, #0
 80079a0:	60a3      	str	r3, [r4, #8]
 80079a2:	6963      	ldr	r3, [r4, #20]
 80079a4:	425b      	negs	r3, r3
 80079a6:	61a3      	str	r3, [r4, #24]
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	b943      	cbnz	r3, 80079be <__swsetup_r+0xc6>
 80079ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079b0:	d1ba      	bne.n	8007928 <__swsetup_r+0x30>
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	0781      	lsls	r1, r0, #30
 80079b6:	bf58      	it	pl
 80079b8:	6963      	ldrpl	r3, [r4, #20]
 80079ba:	60a3      	str	r3, [r4, #8]
 80079bc:	e7f4      	b.n	80079a8 <__swsetup_r+0xb0>
 80079be:	2000      	movs	r0, #0
 80079c0:	e7f7      	b.n	80079b2 <__swsetup_r+0xba>
 80079c2:	bf00      	nop
 80079c4:	2000000c 	.word	0x2000000c
 80079c8:	080084e0 	.word	0x080084e0
 80079cc:	08008500 	.word	0x08008500
 80079d0:	080084c0 	.word	0x080084c0

080079d4 <abort>:
 80079d4:	b508      	push	{r3, lr}
 80079d6:	2006      	movs	r0, #6
 80079d8:	f000 fa6a 	bl	8007eb0 <raise>
 80079dc:	2001      	movs	r0, #1
 80079de:	f7f9 feef 	bl	80017c0 <_exit>
	...

080079e4 <__sflush_r>:
 80079e4:	898a      	ldrh	r2, [r1, #12]
 80079e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ea:	4605      	mov	r5, r0
 80079ec:	0710      	lsls	r0, r2, #28
 80079ee:	460c      	mov	r4, r1
 80079f0:	d458      	bmi.n	8007aa4 <__sflush_r+0xc0>
 80079f2:	684b      	ldr	r3, [r1, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dc05      	bgt.n	8007a04 <__sflush_r+0x20>
 80079f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dc02      	bgt.n	8007a04 <__sflush_r+0x20>
 80079fe:	2000      	movs	r0, #0
 8007a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a06:	2e00      	cmp	r6, #0
 8007a08:	d0f9      	beq.n	80079fe <__sflush_r+0x1a>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a10:	682f      	ldr	r7, [r5, #0]
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	d032      	beq.n	8007a7c <__sflush_r+0x98>
 8007a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	075a      	lsls	r2, r3, #29
 8007a1c:	d505      	bpl.n	8007a2a <__sflush_r+0x46>
 8007a1e:	6863      	ldr	r3, [r4, #4]
 8007a20:	1ac0      	subs	r0, r0, r3
 8007a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a24:	b10b      	cbz	r3, 8007a2a <__sflush_r+0x46>
 8007a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a28:	1ac0      	subs	r0, r0, r3
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a30:	6a21      	ldr	r1, [r4, #32]
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b0      	blx	r6
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	d106      	bne.n	8007a4a <__sflush_r+0x66>
 8007a3c:	6829      	ldr	r1, [r5, #0]
 8007a3e:	291d      	cmp	r1, #29
 8007a40:	d82c      	bhi.n	8007a9c <__sflush_r+0xb8>
 8007a42:	4a2a      	ldr	r2, [pc, #168]	; (8007aec <__sflush_r+0x108>)
 8007a44:	40ca      	lsrs	r2, r1
 8007a46:	07d6      	lsls	r6, r2, #31
 8007a48:	d528      	bpl.n	8007a9c <__sflush_r+0xb8>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	6062      	str	r2, [r4, #4]
 8007a4e:	04d9      	lsls	r1, r3, #19
 8007a50:	6922      	ldr	r2, [r4, #16]
 8007a52:	6022      	str	r2, [r4, #0]
 8007a54:	d504      	bpl.n	8007a60 <__sflush_r+0x7c>
 8007a56:	1c42      	adds	r2, r0, #1
 8007a58:	d101      	bne.n	8007a5e <__sflush_r+0x7a>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	b903      	cbnz	r3, 8007a60 <__sflush_r+0x7c>
 8007a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a62:	602f      	str	r7, [r5, #0]
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d0ca      	beq.n	80079fe <__sflush_r+0x1a>
 8007a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	d002      	beq.n	8007a76 <__sflush_r+0x92>
 8007a70:	4628      	mov	r0, r5
 8007a72:	f7ff fca5 	bl	80073c0 <_free_r>
 8007a76:	2000      	movs	r0, #0
 8007a78:	6360      	str	r0, [r4, #52]	; 0x34
 8007a7a:	e7c1      	b.n	8007a00 <__sflush_r+0x1c>
 8007a7c:	6a21      	ldr	r1, [r4, #32]
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b0      	blx	r6
 8007a84:	1c41      	adds	r1, r0, #1
 8007a86:	d1c7      	bne.n	8007a18 <__sflush_r+0x34>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0c4      	beq.n	8007a18 <__sflush_r+0x34>
 8007a8e:	2b1d      	cmp	r3, #29
 8007a90:	d001      	beq.n	8007a96 <__sflush_r+0xb2>
 8007a92:	2b16      	cmp	r3, #22
 8007a94:	d101      	bne.n	8007a9a <__sflush_r+0xb6>
 8007a96:	602f      	str	r7, [r5, #0]
 8007a98:	e7b1      	b.n	80079fe <__sflush_r+0x1a>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa0:	81a3      	strh	r3, [r4, #12]
 8007aa2:	e7ad      	b.n	8007a00 <__sflush_r+0x1c>
 8007aa4:	690f      	ldr	r7, [r1, #16]
 8007aa6:	2f00      	cmp	r7, #0
 8007aa8:	d0a9      	beq.n	80079fe <__sflush_r+0x1a>
 8007aaa:	0793      	lsls	r3, r2, #30
 8007aac:	680e      	ldr	r6, [r1, #0]
 8007aae:	bf08      	it	eq
 8007ab0:	694b      	ldreq	r3, [r1, #20]
 8007ab2:	600f      	str	r7, [r1, #0]
 8007ab4:	bf18      	it	ne
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	eba6 0807 	sub.w	r8, r6, r7
 8007abc:	608b      	str	r3, [r1, #8]
 8007abe:	f1b8 0f00 	cmp.w	r8, #0
 8007ac2:	dd9c      	ble.n	80079fe <__sflush_r+0x1a>
 8007ac4:	6a21      	ldr	r1, [r4, #32]
 8007ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ac8:	4643      	mov	r3, r8
 8007aca:	463a      	mov	r2, r7
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b0      	blx	r6
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	dc06      	bgt.n	8007ae2 <__sflush_r+0xfe>
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	e78e      	b.n	8007a00 <__sflush_r+0x1c>
 8007ae2:	4407      	add	r7, r0
 8007ae4:	eba8 0800 	sub.w	r8, r8, r0
 8007ae8:	e7e9      	b.n	8007abe <__sflush_r+0xda>
 8007aea:	bf00      	nop
 8007aec:	20400001 	.word	0x20400001

08007af0 <_fflush_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	690b      	ldr	r3, [r1, #16]
 8007af4:	4605      	mov	r5, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	b913      	cbnz	r3, 8007b00 <_fflush_r+0x10>
 8007afa:	2500      	movs	r5, #0
 8007afc:	4628      	mov	r0, r5
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	b118      	cbz	r0, 8007b0a <_fflush_r+0x1a>
 8007b02:	6983      	ldr	r3, [r0, #24]
 8007b04:	b90b      	cbnz	r3, 8007b0a <_fflush_r+0x1a>
 8007b06:	f000 f887 	bl	8007c18 <__sinit>
 8007b0a:	4b14      	ldr	r3, [pc, #80]	; (8007b5c <_fflush_r+0x6c>)
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	d11b      	bne.n	8007b48 <_fflush_r+0x58>
 8007b10:	686c      	ldr	r4, [r5, #4]
 8007b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0ef      	beq.n	8007afa <_fflush_r+0xa>
 8007b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b1c:	07d0      	lsls	r0, r2, #31
 8007b1e:	d404      	bmi.n	8007b2a <_fflush_r+0x3a>
 8007b20:	0599      	lsls	r1, r3, #22
 8007b22:	d402      	bmi.n	8007b2a <_fflush_r+0x3a>
 8007b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b26:	f000 f915 	bl	8007d54 <__retarget_lock_acquire_recursive>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	f7ff ff59 	bl	80079e4 <__sflush_r>
 8007b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b34:	07da      	lsls	r2, r3, #31
 8007b36:	4605      	mov	r5, r0
 8007b38:	d4e0      	bmi.n	8007afc <_fflush_r+0xc>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	059b      	lsls	r3, r3, #22
 8007b3e:	d4dd      	bmi.n	8007afc <_fflush_r+0xc>
 8007b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b42:	f000 f908 	bl	8007d56 <__retarget_lock_release_recursive>
 8007b46:	e7d9      	b.n	8007afc <_fflush_r+0xc>
 8007b48:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <_fflush_r+0x70>)
 8007b4a:	429c      	cmp	r4, r3
 8007b4c:	d101      	bne.n	8007b52 <_fflush_r+0x62>
 8007b4e:	68ac      	ldr	r4, [r5, #8]
 8007b50:	e7df      	b.n	8007b12 <_fflush_r+0x22>
 8007b52:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <_fflush_r+0x74>)
 8007b54:	429c      	cmp	r4, r3
 8007b56:	bf08      	it	eq
 8007b58:	68ec      	ldreq	r4, [r5, #12]
 8007b5a:	e7da      	b.n	8007b12 <_fflush_r+0x22>
 8007b5c:	080084e0 	.word	0x080084e0
 8007b60:	08008500 	.word	0x08008500
 8007b64:	080084c0 	.word	0x080084c0

08007b68 <std>:
 8007b68:	2300      	movs	r3, #0
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b76:	6083      	str	r3, [r0, #8]
 8007b78:	8181      	strh	r1, [r0, #12]
 8007b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b7c:	81c2      	strh	r2, [r0, #14]
 8007b7e:	6183      	str	r3, [r0, #24]
 8007b80:	4619      	mov	r1, r3
 8007b82:	2208      	movs	r2, #8
 8007b84:	305c      	adds	r0, #92	; 0x5c
 8007b86:	f7fd fc61 	bl	800544c <memset>
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x38>)
 8007b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <std+0x3c>)
 8007b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <std+0x40>)
 8007b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <std+0x44>)
 8007b98:	6224      	str	r4, [r4, #32]
 8007b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08007ee9 	.word	0x08007ee9
 8007ba4:	08007f0b 	.word	0x08007f0b
 8007ba8:	08007f43 	.word	0x08007f43
 8007bac:	08007f67 	.word	0x08007f67

08007bb0 <_cleanup_r>:
 8007bb0:	4901      	ldr	r1, [pc, #4]	; (8007bb8 <_cleanup_r+0x8>)
 8007bb2:	f000 b8af 	b.w	8007d14 <_fwalk_reent>
 8007bb6:	bf00      	nop
 8007bb8:	08007af1 	.word	0x08007af1

08007bbc <__sfmoreglue>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	2268      	movs	r2, #104	; 0x68
 8007bc0:	1e4d      	subs	r5, r1, #1
 8007bc2:	4355      	muls	r5, r2
 8007bc4:	460e      	mov	r6, r1
 8007bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bca:	f7ff fc65 	bl	8007498 <_malloc_r>
 8007bce:	4604      	mov	r4, r0
 8007bd0:	b140      	cbz	r0, 8007be4 <__sfmoreglue+0x28>
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007bd8:	300c      	adds	r0, #12
 8007bda:	60a0      	str	r0, [r4, #8]
 8007bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007be0:	f7fd fc34 	bl	800544c <memset>
 8007be4:	4620      	mov	r0, r4
 8007be6:	bd70      	pop	{r4, r5, r6, pc}

08007be8 <__sfp_lock_acquire>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sfp_lock_acquire+0x8>)
 8007bea:	f000 b8b3 	b.w	8007d54 <__retarget_lock_acquire_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20000435 	.word	0x20000435

08007bf4 <__sfp_lock_release>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__sfp_lock_release+0x8>)
 8007bf6:	f000 b8ae 	b.w	8007d56 <__retarget_lock_release_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	20000435 	.word	0x20000435

08007c00 <__sinit_lock_acquire>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__sinit_lock_acquire+0x8>)
 8007c02:	f000 b8a7 	b.w	8007d54 <__retarget_lock_acquire_recursive>
 8007c06:	bf00      	nop
 8007c08:	20000436 	.word	0x20000436

08007c0c <__sinit_lock_release>:
 8007c0c:	4801      	ldr	r0, [pc, #4]	; (8007c14 <__sinit_lock_release+0x8>)
 8007c0e:	f000 b8a2 	b.w	8007d56 <__retarget_lock_release_recursive>
 8007c12:	bf00      	nop
 8007c14:	20000436 	.word	0x20000436

08007c18 <__sinit>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	f7ff fff0 	bl	8007c00 <__sinit_lock_acquire>
 8007c20:	69a3      	ldr	r3, [r4, #24]
 8007c22:	b11b      	cbz	r3, 8007c2c <__sinit+0x14>
 8007c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c28:	f7ff bff0 	b.w	8007c0c <__sinit_lock_release>
 8007c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c30:	6523      	str	r3, [r4, #80]	; 0x50
 8007c32:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <__sinit+0x68>)
 8007c34:	4a13      	ldr	r2, [pc, #76]	; (8007c84 <__sinit+0x6c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	bf04      	itt	eq
 8007c3e:	2301      	moveq	r3, #1
 8007c40:	61a3      	streq	r3, [r4, #24]
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 f820 	bl	8007c88 <__sfp>
 8007c48:	6060      	str	r0, [r4, #4]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 f81c 	bl	8007c88 <__sfp>
 8007c50:	60a0      	str	r0, [r4, #8]
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 f818 	bl	8007c88 <__sfp>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	60e0      	str	r0, [r4, #12]
 8007c5c:	2104      	movs	r1, #4
 8007c5e:	6860      	ldr	r0, [r4, #4]
 8007c60:	f7ff ff82 	bl	8007b68 <std>
 8007c64:	68a0      	ldr	r0, [r4, #8]
 8007c66:	2201      	movs	r2, #1
 8007c68:	2109      	movs	r1, #9
 8007c6a:	f7ff ff7d 	bl	8007b68 <std>
 8007c6e:	68e0      	ldr	r0, [r4, #12]
 8007c70:	2202      	movs	r2, #2
 8007c72:	2112      	movs	r1, #18
 8007c74:	f7ff ff78 	bl	8007b68 <std>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	61a3      	str	r3, [r4, #24]
 8007c7c:	e7d2      	b.n	8007c24 <__sinit+0xc>
 8007c7e:	bf00      	nop
 8007c80:	080080ec 	.word	0x080080ec
 8007c84:	08007bb1 	.word	0x08007bb1

08007c88 <__sfp>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	f7ff ffac 	bl	8007be8 <__sfp_lock_acquire>
 8007c90:	4b1e      	ldr	r3, [pc, #120]	; (8007d0c <__sfp+0x84>)
 8007c92:	681e      	ldr	r6, [r3, #0]
 8007c94:	69b3      	ldr	r3, [r6, #24]
 8007c96:	b913      	cbnz	r3, 8007c9e <__sfp+0x16>
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff ffbd 	bl	8007c18 <__sinit>
 8007c9e:	3648      	adds	r6, #72	; 0x48
 8007ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	d503      	bpl.n	8007cb0 <__sfp+0x28>
 8007ca8:	6833      	ldr	r3, [r6, #0]
 8007caa:	b30b      	cbz	r3, 8007cf0 <__sfp+0x68>
 8007cac:	6836      	ldr	r6, [r6, #0]
 8007cae:	e7f7      	b.n	8007ca0 <__sfp+0x18>
 8007cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cb4:	b9d5      	cbnz	r5, 8007cec <__sfp+0x64>
 8007cb6:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <__sfp+0x88>)
 8007cb8:	60e3      	str	r3, [r4, #12]
 8007cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8007cc0:	f000 f847 	bl	8007d52 <__retarget_lock_init_recursive>
 8007cc4:	f7ff ff96 	bl	8007bf4 <__sfp_lock_release>
 8007cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cd0:	6025      	str	r5, [r4, #0]
 8007cd2:	61a5      	str	r5, [r4, #24]
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cdc:	f7fd fbb6 	bl	800544c <memset>
 8007ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ce8:	4620      	mov	r0, r4
 8007cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cec:	3468      	adds	r4, #104	; 0x68
 8007cee:	e7d9      	b.n	8007ca4 <__sfp+0x1c>
 8007cf0:	2104      	movs	r1, #4
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	f7ff ff62 	bl	8007bbc <__sfmoreglue>
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	6030      	str	r0, [r6, #0]
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d1d5      	bne.n	8007cac <__sfp+0x24>
 8007d00:	f7ff ff78 	bl	8007bf4 <__sfp_lock_release>
 8007d04:	230c      	movs	r3, #12
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	e7ee      	b.n	8007ce8 <__sfp+0x60>
 8007d0a:	bf00      	nop
 8007d0c:	080080ec 	.word	0x080080ec
 8007d10:	ffff0001 	.word	0xffff0001

08007d14 <_fwalk_reent>:
 8007d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d18:	4606      	mov	r6, r0
 8007d1a:	4688      	mov	r8, r1
 8007d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d20:	2700      	movs	r7, #0
 8007d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d26:	f1b9 0901 	subs.w	r9, r9, #1
 8007d2a:	d505      	bpl.n	8007d38 <_fwalk_reent+0x24>
 8007d2c:	6824      	ldr	r4, [r4, #0]
 8007d2e:	2c00      	cmp	r4, #0
 8007d30:	d1f7      	bne.n	8007d22 <_fwalk_reent+0xe>
 8007d32:	4638      	mov	r0, r7
 8007d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d38:	89ab      	ldrh	r3, [r5, #12]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d907      	bls.n	8007d4e <_fwalk_reent+0x3a>
 8007d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d42:	3301      	adds	r3, #1
 8007d44:	d003      	beq.n	8007d4e <_fwalk_reent+0x3a>
 8007d46:	4629      	mov	r1, r5
 8007d48:	4630      	mov	r0, r6
 8007d4a:	47c0      	blx	r8
 8007d4c:	4307      	orrs	r7, r0
 8007d4e:	3568      	adds	r5, #104	; 0x68
 8007d50:	e7e9      	b.n	8007d26 <_fwalk_reent+0x12>

08007d52 <__retarget_lock_init_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <__retarget_lock_acquire_recursive>:
 8007d54:	4770      	bx	lr

08007d56 <__retarget_lock_release_recursive>:
 8007d56:	4770      	bx	lr

08007d58 <__swhatbuf_r>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	460e      	mov	r6, r1
 8007d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d60:	2900      	cmp	r1, #0
 8007d62:	b096      	sub	sp, #88	; 0x58
 8007d64:	4614      	mov	r4, r2
 8007d66:	461d      	mov	r5, r3
 8007d68:	da08      	bge.n	8007d7c <__swhatbuf_r+0x24>
 8007d6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	602a      	str	r2, [r5, #0]
 8007d72:	061a      	lsls	r2, r3, #24
 8007d74:	d410      	bmi.n	8007d98 <__swhatbuf_r+0x40>
 8007d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d7a:	e00e      	b.n	8007d9a <__swhatbuf_r+0x42>
 8007d7c:	466a      	mov	r2, sp
 8007d7e:	f000 f925 	bl	8007fcc <_fstat_r>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	dbf1      	blt.n	8007d6a <__swhatbuf_r+0x12>
 8007d86:	9a01      	ldr	r2, [sp, #4]
 8007d88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d90:	425a      	negs	r2, r3
 8007d92:	415a      	adcs	r2, r3
 8007d94:	602a      	str	r2, [r5, #0]
 8007d96:	e7ee      	b.n	8007d76 <__swhatbuf_r+0x1e>
 8007d98:	2340      	movs	r3, #64	; 0x40
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	b016      	add	sp, #88	; 0x58
 8007da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007da4 <__smakebuf_r>:
 8007da4:	898b      	ldrh	r3, [r1, #12]
 8007da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007da8:	079d      	lsls	r5, r3, #30
 8007daa:	4606      	mov	r6, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	d507      	bpl.n	8007dc0 <__smakebuf_r+0x1c>
 8007db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	6123      	str	r3, [r4, #16]
 8007db8:	2301      	movs	r3, #1
 8007dba:	6163      	str	r3, [r4, #20]
 8007dbc:	b002      	add	sp, #8
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	ab01      	add	r3, sp, #4
 8007dc2:	466a      	mov	r2, sp
 8007dc4:	f7ff ffc8 	bl	8007d58 <__swhatbuf_r>
 8007dc8:	9900      	ldr	r1, [sp, #0]
 8007dca:	4605      	mov	r5, r0
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f7ff fb63 	bl	8007498 <_malloc_r>
 8007dd2:	b948      	cbnz	r0, 8007de8 <__smakebuf_r+0x44>
 8007dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd8:	059a      	lsls	r2, r3, #22
 8007dda:	d4ef      	bmi.n	8007dbc <__smakebuf_r+0x18>
 8007ddc:	f023 0303 	bic.w	r3, r3, #3
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	e7e3      	b.n	8007db0 <__smakebuf_r+0xc>
 8007de8:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <__smakebuf_r+0x7c>)
 8007dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	6020      	str	r0, [r4, #0]
 8007df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	6163      	str	r3, [r4, #20]
 8007dfa:	9b01      	ldr	r3, [sp, #4]
 8007dfc:	6120      	str	r0, [r4, #16]
 8007dfe:	b15b      	cbz	r3, 8007e18 <__smakebuf_r+0x74>
 8007e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e04:	4630      	mov	r0, r6
 8007e06:	f000 f8f3 	bl	8007ff0 <_isatty_r>
 8007e0a:	b128      	cbz	r0, 8007e18 <__smakebuf_r+0x74>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	89a0      	ldrh	r0, [r4, #12]
 8007e1a:	4305      	orrs	r5, r0
 8007e1c:	81a5      	strh	r5, [r4, #12]
 8007e1e:	e7cd      	b.n	8007dbc <__smakebuf_r+0x18>
 8007e20:	08007bb1 	.word	0x08007bb1

08007e24 <__ascii_mbtowc>:
 8007e24:	b082      	sub	sp, #8
 8007e26:	b901      	cbnz	r1, 8007e2a <__ascii_mbtowc+0x6>
 8007e28:	a901      	add	r1, sp, #4
 8007e2a:	b142      	cbz	r2, 8007e3e <__ascii_mbtowc+0x1a>
 8007e2c:	b14b      	cbz	r3, 8007e42 <__ascii_mbtowc+0x1e>
 8007e2e:	7813      	ldrb	r3, [r2, #0]
 8007e30:	600b      	str	r3, [r1, #0]
 8007e32:	7812      	ldrb	r2, [r2, #0]
 8007e34:	1e10      	subs	r0, r2, #0
 8007e36:	bf18      	it	ne
 8007e38:	2001      	movne	r0, #1
 8007e3a:	b002      	add	sp, #8
 8007e3c:	4770      	bx	lr
 8007e3e:	4610      	mov	r0, r2
 8007e40:	e7fb      	b.n	8007e3a <__ascii_mbtowc+0x16>
 8007e42:	f06f 0001 	mvn.w	r0, #1
 8007e46:	e7f8      	b.n	8007e3a <__ascii_mbtowc+0x16>

08007e48 <__malloc_lock>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__malloc_lock+0x8>)
 8007e4a:	f7ff bf83 	b.w	8007d54 <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	20000434 	.word	0x20000434

08007e54 <__malloc_unlock>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__malloc_unlock+0x8>)
 8007e56:	f7ff bf7e 	b.w	8007d56 <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20000434 	.word	0x20000434

08007e60 <_raise_r>:
 8007e60:	291f      	cmp	r1, #31
 8007e62:	b538      	push	{r3, r4, r5, lr}
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	d904      	bls.n	8007e74 <_raise_r+0x14>
 8007e6a:	2316      	movs	r3, #22
 8007e6c:	6003      	str	r3, [r0, #0]
 8007e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e76:	b112      	cbz	r2, 8007e7e <_raise_r+0x1e>
 8007e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e7c:	b94b      	cbnz	r3, 8007e92 <_raise_r+0x32>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 f830 	bl	8007ee4 <_getpid_r>
 8007e84:	462a      	mov	r2, r5
 8007e86:	4601      	mov	r1, r0
 8007e88:	4620      	mov	r0, r4
 8007e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e8e:	f000 b817 	b.w	8007ec0 <_kill_r>
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d00a      	beq.n	8007eac <_raise_r+0x4c>
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	d103      	bne.n	8007ea2 <_raise_r+0x42>
 8007e9a:	2316      	movs	r3, #22
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e7e7      	b.n	8007e72 <_raise_r+0x12>
 8007ea2:	2400      	movs	r4, #0
 8007ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	4798      	blx	r3
 8007eac:	2000      	movs	r0, #0
 8007eae:	e7e0      	b.n	8007e72 <_raise_r+0x12>

08007eb0 <raise>:
 8007eb0:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <raise+0xc>)
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	f7ff bfd3 	b.w	8007e60 <_raise_r>
 8007eba:	bf00      	nop
 8007ebc:	2000000c 	.word	0x2000000c

08007ec0 <_kill_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_kill_r+0x20>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	f7f9 fc67 	bl	80017a0 <_kill>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d102      	bne.n	8007edc <_kill_r+0x1c>
 8007ed6:	682b      	ldr	r3, [r5, #0]
 8007ed8:	b103      	cbz	r3, 8007edc <_kill_r+0x1c>
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000438 	.word	0x20000438

08007ee4 <_getpid_r>:
 8007ee4:	f7f9 bc54 	b.w	8001790 <_getpid>

08007ee8 <__sread>:
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	460c      	mov	r4, r1
 8007eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef0:	f000 f8a0 	bl	8008034 <_read_r>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	bfab      	itete	ge
 8007ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007efa:	89a3      	ldrhlt	r3, [r4, #12]
 8007efc:	181b      	addge	r3, r3, r0
 8007efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f02:	bfac      	ite	ge
 8007f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f06:	81a3      	strhlt	r3, [r4, #12]
 8007f08:	bd10      	pop	{r4, pc}

08007f0a <__swrite>:
 8007f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0e:	461f      	mov	r7, r3
 8007f10:	898b      	ldrh	r3, [r1, #12]
 8007f12:	05db      	lsls	r3, r3, #23
 8007f14:	4605      	mov	r5, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	4616      	mov	r6, r2
 8007f1a:	d505      	bpl.n	8007f28 <__swrite+0x1e>
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	2302      	movs	r3, #2
 8007f22:	2200      	movs	r2, #0
 8007f24:	f000 f874 	bl	8008010 <_lseek_r>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	4632      	mov	r2, r6
 8007f36:	463b      	mov	r3, r7
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	f000 b823 	b.w	8007f88 <_write_r>

08007f42 <__sseek>:
 8007f42:	b510      	push	{r4, lr}
 8007f44:	460c      	mov	r4, r1
 8007f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4a:	f000 f861 	bl	8008010 <_lseek_r>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	bf15      	itete	ne
 8007f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f5e:	81a3      	strheq	r3, [r4, #12]
 8007f60:	bf18      	it	ne
 8007f62:	81a3      	strhne	r3, [r4, #12]
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <__sclose>:
 8007f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6a:	f000 b81f 	b.w	8007fac <_close_r>

08007f6e <__ascii_wctomb>:
 8007f6e:	b149      	cbz	r1, 8007f84 <__ascii_wctomb+0x16>
 8007f70:	2aff      	cmp	r2, #255	; 0xff
 8007f72:	bf85      	ittet	hi
 8007f74:	238a      	movhi	r3, #138	; 0x8a
 8007f76:	6003      	strhi	r3, [r0, #0]
 8007f78:	700a      	strbls	r2, [r1, #0]
 8007f7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f7e:	bf98      	it	ls
 8007f80:	2001      	movls	r0, #1
 8007f82:	4770      	bx	lr
 8007f84:	4608      	mov	r0, r1
 8007f86:	4770      	bx	lr

08007f88 <_write_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	; (8007fa8 <_write_r+0x20>)
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f9 fc39 	bl	800180e <_write>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_write_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_write_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	20000438 	.word	0x20000438

08007fac <_close_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d06      	ldr	r5, [pc, #24]	; (8007fc8 <_close_r+0x1c>)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7f9 fc45 	bl	8001846 <_close>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_close_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_close_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000438 	.word	0x20000438

08007fcc <_fstat_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_fstat_r+0x20>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	f7f9 fc40 	bl	800185e <_fstat>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	d102      	bne.n	8007fe8 <_fstat_r+0x1c>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	b103      	cbz	r3, 8007fe8 <_fstat_r+0x1c>
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
 8007fea:	bf00      	nop
 8007fec:	20000438 	.word	0x20000438

08007ff0 <_isatty_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4d06      	ldr	r5, [pc, #24]	; (800800c <_isatty_r+0x1c>)
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	f7f9 fc3f 	bl	800187e <_isatty>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d102      	bne.n	800800a <_isatty_r+0x1a>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	b103      	cbz	r3, 800800a <_isatty_r+0x1a>
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	20000438 	.word	0x20000438

08008010 <_lseek_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4d07      	ldr	r5, [pc, #28]	; (8008030 <_lseek_r+0x20>)
 8008014:	4604      	mov	r4, r0
 8008016:	4608      	mov	r0, r1
 8008018:	4611      	mov	r1, r2
 800801a:	2200      	movs	r2, #0
 800801c:	602a      	str	r2, [r5, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	f7f9 fc38 	bl	8001894 <_lseek>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_lseek_r+0x1e>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_lseek_r+0x1e>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20000438 	.word	0x20000438

08008034 <_read_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d07      	ldr	r5, [pc, #28]	; (8008054 <_read_r+0x20>)
 8008038:	4604      	mov	r4, r0
 800803a:	4608      	mov	r0, r1
 800803c:	4611      	mov	r1, r2
 800803e:	2200      	movs	r2, #0
 8008040:	602a      	str	r2, [r5, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	f7f9 fbc6 	bl	80017d4 <_read>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	d102      	bne.n	8008052 <_read_r+0x1e>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	b103      	cbz	r3, 8008052 <_read_r+0x1e>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	20000438 	.word	0x20000438

08008058 <_init>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	bf00      	nop
 800805c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805e:	bc08      	pop	{r3}
 8008060:	469e      	mov	lr, r3
 8008062:	4770      	bx	lr

08008064 <_fini>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	bf00      	nop
 8008068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806a:	bc08      	pop	{r3}
 800806c:	469e      	mov	lr, r3
 800806e:	4770      	bx	lr
